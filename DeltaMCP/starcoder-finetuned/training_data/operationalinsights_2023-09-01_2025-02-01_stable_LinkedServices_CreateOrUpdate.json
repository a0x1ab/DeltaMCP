{
  "oasdiff": {
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}": {
          "operations": {
            "modified": {
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2015-11-01-preview",
                        "value": "2025-02-01",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/parameters/api-version"
                      },
                      {
                        "oldValue": "TestLinkWS/Automation",
                        "value": "Cluster",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/parameters/linkedServiceName"
                      },
                      {
                        "oldValue": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/testAccount",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/LinkedServicesCreate/parameters/parameters/properties/resourceId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster",
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/parameters/parameters/properties/writeAccessResourceId"
                      },
                      {
                        "oldValue": "/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/automation",
                        "value": "/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/200/body/id"
                      },
                      {
                        "oldValue": "TestLinkWS/Automation",
                        "value": "TestLinkWS/Cluster",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "ProvisioningAccount",
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/TestAccount",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/200/body/properties/resourceId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster",
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/200/body/properties/writeAccessResourceId"
                      },
                      {
                        "oldValue": "/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/automation",
                        "value": "/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/201/body/id"
                      },
                      {
                        "oldValue": "TestLinkWS/Automation",
                        "value": "TestLinkWS/Cluster",
                        "op": "replace",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/201/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "ProvisioningAccount",
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/TestAccount",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/201/body/properties/resourceId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster",
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/201/body/properties/writeAccessResourceId"
                      },
                      {
                        "oldValue": null,
                        "value": {},
                        "op": "add",
                        "from": "",
                        "path": "/LinkedServicesCreate/responses/202"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Proxy Resource"
                              }
                            ],
                            "deleted": [
                              {
                                "index": 0
                              }
                            ]
                          },
                          "properties": {
                            "added": [
                              "tags"
                            ],
                            "modified": {
                              "properties": {
                                "required": {
                                  "deleted": [
                                    "resourceId"
                                  ]
                                },
                                "properties": {
                                  "added": [
                                    "provisioningState",
                                    "writeAccessResourceId"
                                  ],
                                  "modified": {
                                    "resourceId": {
                                      "description": {
                                        "from": "The resource id of the resource that will be linked to the workspace.",
                                        "to": "The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "path": {
                      "resourceGroupName": {
                        "extensions": {
                          "deleted": [
                            "pattern"
                          ]
                        },
                        "description": {
                          "from": "The name of the resource group to get. The name is case insensitive.",
                          "to": "The name of the resource group. The name is case insensitive."
                        }
                      },
                      "subscriptionId": {
                        "extensions": {
                          "added": [
                            "minLength"
                          ]
                        },
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "The ID of the target subscription."
                        }
                      },
                      "workspaceName": {
                        "extensions": {
                          "added": [
                            "pattern",
                            "x-ms-parameter-location",
                            "maxLength",
                            "minLength"
                          ]
                        },
                        "description": {
                          "from": "Name of the Log Analytics Workspace that will contain the linkedServices resource",
                          "to": "The name of the workspace."
                        }
                      }
                    },
                    "query": {
                      "api-version": {
                        "extensions": {
                          "added": [
                            "minLength"
                          ]
                        },
                        "description": {
                          "from": "Client Api Version.",
                          "to": "The API version to use for this operation."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                  "properties": {
                                    "id": {
                                      "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the resource",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "title": "Resource",
                                  "type": "object",
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/allOf"
                            },
                            {
                              "oldValue": "Common properties of proxy resource.",
                              "value": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                              "op": "replace",
                              "from": "",
                              "path": "/allOf/0/description"
                            },
                            {
                              "oldValue": {
                                "id": {
                                  "description": "Resource ID.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Resource name.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Resource type.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf/0/properties"
                            },
                            {
                              "oldValue": null,
                              "value": "Proxy Resource",
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/title"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/type"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The provisioning state of the linked service.",
                                "enum": [
                                  "Succeeded",
                                  "Deleting",
                                  "ProvisioningAccount",
                                  "Updating"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "LinkedServiceEntityStatus"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": "The resource id of the resource that will be linked to the workspace.",
                              "value": "The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/resourceId/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/writeAccessResourceId"
                            },
                            {
                              "oldValue": [
                                "resourceId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Resource tags.",
                                "type": "object",
                                "x-ms-mutability": [
                                  "read",
                                  "create",
                                  "update"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                  "properties": {
                                    "id": {
                                      "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the resource",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "title": "Resource",
                                  "type": "object",
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/allOf"
                            },
                            {
                              "oldValue": "Common properties of proxy resource.",
                              "value": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                              "op": "replace",
                              "from": "",
                              "path": "/allOf/0/description"
                            },
                            {
                              "oldValue": {
                                "id": {
                                  "description": "Resource ID.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Resource name.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Resource type.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf/0/properties"
                            },
                            {
                              "oldValue": null,
                              "value": "Proxy Resource",
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/title"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/type"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The provisioning state of the linked service.",
                                "enum": [
                                  "Succeeded",
                                  "Deleting",
                                  "ProvisioningAccount",
                                  "Updating"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "LinkedServiceEntityStatus"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": "The resource id of the resource that will be linked to the workspace.",
                              "value": "The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/resourceId/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/writeAccessResourceId"
                            },
                            {
                              "oldValue": [
                                "resourceId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Resource tags.",
                                "type": "object",
                                "x-ms-mutability": [
                                  "read",
                                  "create",
                                  "update"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "LinkedServices_CreateOrUpdate": "FunctionDef(name='LinkedServices_CreateOrUpdate', args=arguments(posonlyargs=[], args=[arg(arg='linkedServiceName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='workspaceName', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create or update a linked service.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourcegroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.OperationalInsights/workspaces/'), FormattedValue(value=Name(id='workspaceName', ctx=Load()), conversion=-1), Constant(value='/linkedServices/'), FormattedValue(value=Name(id='linkedServiceName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='linkedServiceName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: linkedServiceName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='workspaceName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: workspaceName')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='LinkedServices_CreateOrUpdate')), keyword(arg='description', value=Constant(value='Create or update a linked service.'))])])"
  },
  "tools_b": {
    "LinkedServices_CreateOrUpdate": "FunctionDef(name='LinkedServices_CreateOrUpdate', args=arguments(posonlyargs=[], args=[arg(arg='linkedServiceName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='workspaceName', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create or update a linked service.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourcegroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.OperationalInsights/workspaces/'), FormattedValue(value=Name(id='workspaceName', ctx=Load()), conversion=-1), Constant(value='/linkedServices/'), FormattedValue(value=Name(id='linkedServiceName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='linkedServiceName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: linkedServiceName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='workspaceName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: workspaceName')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='LinkedServices_CreateOrUpdate')), keyword(arg='description', value=Constant(value='Create or update a linked service.'))])])"
  }
}