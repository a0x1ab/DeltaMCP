{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An Application Insights component definition.",
              "properties": {
                "etag": {
                  "description": "Resource etag",
                  "type": "string"
                },
                "kind": {
                  "description": "The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.",
                  "type": "string"
                },
                "properties": {
                  "description": "Properties that define an Application Insights component resource.",
                  "properties": {
                    "AppId": {
                      "description": "Application Insights Unique ID for your Application.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ApplicationId": {
                      "description": "The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "Application_Type": {
                      "default": "web",
                      "description": "Type of application being monitored.",
                      "enum": [
                        "web",
                        "other"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ApplicationType"
                      },
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "ConnectionString": {
                      "description": "Application Insights component connection string.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "CreationDate": {
                      "description": "Creation Date for the Application Insights component, in ISO 8601 format.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "DisableIpMasking": {
                      "description": "Disable IP masking.",
                      "type": "boolean"
                    },
                    "DisableLocalAuth": {
                      "description": "Disable Non-AAD based Auth.",
                      "type": "boolean"
                    },
                    "Flow_Type": {
                      "default": "Bluefield",
                      "description": "Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.",
                      "enum": [
                        "Bluefield"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "FlowType"
                      }
                    },
                    "ForceCustomerStorageForProfiler": {
                      "description": "Force users to create their own storage account for profiler and debugger.",
                      "type": "boolean"
                    },
                    "HockeyAppId": {
                      "description": "The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.",
                      "externalDocs": {
                        "url": "https://aka.ms/ewjuel"
                      },
                      "type": "string"
                    },
                    "HockeyAppToken": {
                      "description": "Token used to authenticate communications with between Application Insights and HockeyApp.",
                      "externalDocs": {
                        "url": "https://aka.ms/sls76s"
                      },
                      "readOnly": true,
                      "type": "string"
                    },
                    "ImmediatePurgeDataOn30Days": {
                      "description": "Purge data immediately after 30 days.",
                      "type": "boolean"
                    },
                    "IngestionMode": {
                      "default": "LogAnalytics",
                      "description": "Indicates the flow of the ingestion.",
                      "enum": [
                        "ApplicationInsights",
                        "ApplicationInsightsWithDiagnosticSettings",
                        "LogAnalytics"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "IngestionMode"
                      }
                    },
                    "InstrumentationKey": {
                      "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "LaMigrationDate": {
                      "description": "The date which the component got migrated to LA, in ISO 8601 format.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "Name": {
                      "description": "Application name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "PrivateLinkScopedResources": {
                      "description": "List of linked private link scope resources.",
                      "items": {
                        "description": "The private link scope resource reference.",
                        "properties": {
                          "ResourceId": {
                            "description": "The full resource Id of the private link scope resource.",
                            "type": "string"
                          },
                          "ScopeId": {
                            "description": "The private link scope unique Identifier.",
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array",
                      "x-ms-identifiers": [
                        "ScopeId"
                      ]
                    },
                    "Request_Source": {
                      "default": "rest",
                      "description": "Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.",
                      "enum": [
                        "rest"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "RequestSource"
                      }
                    },
                    "RetentionInDays": {
                      "description": "Retention period in days.",
                      "type": "integer"
                    },
                    "SamplingPercentage": {
                      "description": "Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.",
                      "externalDocs": {
                        "url": "https://aka.ms/sl0yqd"
                      },
                      "format": "double",
                      "type": "number"
                    },
                    "TenantId": {
                      "description": "Azure Tenant Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "WorkspaceResourceId": {
                      "description": "Resource Id of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property.",
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "publicNetworkAccessForIngestion": {
                      "default": "Enabled",
                      "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PublicNetworkAccessType",
                        "values": [
                          {
                            "description": "Enables connectivity to Application Insights through public DNS.",
                            "value": "Enabled"
                          },
                          {
                            "description": "Disables public connectivity to Application Insights through public DNS.",
                            "value": "Disabled"
                          }
                        ]
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "default": "Enabled",
                      "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PublicNetworkAccessType",
                        "values": [
                          {
                            "description": "Enables connectivity to Application Insights through public DNS.",
                            "value": "Enabled"
                          },
                          {
                            "description": "Disables public connectivity to Application Insights through public DNS.",
                            "value": "Disabled"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "Application_Type"
                  ]
                }
              },
              "required": [
                "kind"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApplicationInsightsComponent"
          },
          {
            "oldValue": {
              "description": "Describes the list of Application Insights Resources.",
              "properties": {
                "nextLink": {
                  "description": "The URI to get the next set of Application Insights component definitions if too many components where returned in the result set.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Application Insights component definitions.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An Application Insights component definition.",
                    "properties": {
                      "etag": {
                        "description": "Resource etag",
                        "type": "string"
                      },
                      "kind": {
                        "description": "The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties that define an Application Insights component resource.",
                        "properties": {
                          "AppId": {
                            "description": "Application Insights Unique ID for your Application.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "ApplicationId": {
                            "description": "The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "Application_Type": {
                            "default": "web",
                            "description": "Type of application being monitored.",
                            "enum": [
                              "web",
                              "other"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ApplicationType"
                            },
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "ConnectionString": {
                            "description": "Application Insights component connection string.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "CreationDate": {
                            "description": "Creation Date for the Application Insights component, in ISO 8601 format.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "DisableIpMasking": {
                            "description": "Disable IP masking.",
                            "type": "boolean"
                          },
                          "DisableLocalAuth": {
                            "description": "Disable Non-AAD based Auth.",
                            "type": "boolean"
                          },
                          "Flow_Type": {
                            "default": "Bluefield",
                            "description": "Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.",
                            "enum": [
                              "Bluefield"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "FlowType"
                            }
                          },
                          "ForceCustomerStorageForProfiler": {
                            "description": "Force users to create their own storage account for profiler and debugger.",
                            "type": "boolean"
                          },
                          "HockeyAppId": {
                            "description": "The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.",
                            "externalDocs": {
                              "url": "https://aka.ms/ewjuel"
                            },
                            "type": "string"
                          },
                          "HockeyAppToken": {
                            "description": "Token used to authenticate communications with between Application Insights and HockeyApp.",
                            "externalDocs": {
                              "url": "https://aka.ms/sls76s"
                            },
                            "readOnly": true,
                            "type": "string"
                          },
                          "ImmediatePurgeDataOn30Days": {
                            "description": "Purge data immediately after 30 days.",
                            "type": "boolean"
                          },
                          "IngestionMode": {
                            "default": "LogAnalytics",
                            "description": "Indicates the flow of the ingestion.",
                            "enum": [
                              "ApplicationInsights",
                              "ApplicationInsightsWithDiagnosticSettings",
                              "LogAnalytics"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "IngestionMode"
                            }
                          },
                          "InstrumentationKey": {
                            "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "LaMigrationDate": {
                            "description": "The date which the component got migrated to LA, in ISO 8601 format.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "Name": {
                            "description": "Application name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "PrivateLinkScopedResources": {
                            "description": "List of linked private link scope resources.",
                            "items": {
                              "description": "The private link scope resource reference.",
                              "properties": {
                                "ResourceId": {
                                  "description": "The full resource Id of the private link scope resource.",
                                  "type": "string"
                                },
                                "ScopeId": {
                                  "description": "The private link scope unique Identifier.",
                                  "type": "string"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "array",
                            "x-ms-identifiers": [
                              "ScopeId"
                            ]
                          },
                          "Request_Source": {
                            "default": "rest",
                            "description": "Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.",
                            "enum": [
                              "rest"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "RequestSource"
                            }
                          },
                          "RetentionInDays": {
                            "description": "Retention period in days.",
                            "type": "integer"
                          },
                          "SamplingPercentage": {
                            "description": "Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.",
                            "externalDocs": {
                              "url": "https://aka.ms/sl0yqd"
                            },
                            "format": "double",
                            "type": "number"
                          },
                          "TenantId": {
                            "description": "Azure Tenant Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "WorkspaceResourceId": {
                            "description": "Resource Id of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property.",
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "publicNetworkAccessForIngestion": {
                            "default": "Enabled",
                            "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PublicNetworkAccessType",
                              "values": [
                                {
                                  "description": "Enables connectivity to Application Insights through public DNS.",
                                  "value": "Enabled"
                                },
                                {
                                  "description": "Disables public connectivity to Application Insights through public DNS.",
                                  "value": "Disabled"
                                }
                              ]
                            }
                          },
                          "publicNetworkAccessForQuery": {
                            "default": "Enabled",
                            "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PublicNetworkAccessType",
                              "values": [
                                {
                                  "description": "Enables connectivity to Application Insights through public DNS.",
                                  "value": "Enabled"
                                },
                                {
                                  "description": "Disables public connectivity to Application Insights through public DNS.",
                                  "value": "Disabled"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "Application_Type"
                        ]
                      }
                    },
                    "required": [
                      "kind"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "value"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApplicationInsightsComponentListResult"
          },
          {
            "oldValue": {
              "description": "Properties that define an Application Insights component resource.",
              "properties": {
                "AppId": {
                  "description": "Application Insights Unique ID for your Application.",
                  "readOnly": true,
                  "type": "string"
                },
                "ApplicationId": {
                  "description": "The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.",
                  "readOnly": true,
                  "type": "string"
                },
                "Application_Type": {
                  "default": "web",
                  "description": "Type of application being monitored.",
                  "enum": [
                    "web",
                    "other"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ApplicationType"
                  },
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "ConnectionString": {
                  "description": "Application Insights component connection string.",
                  "readOnly": true,
                  "type": "string"
                },
                "CreationDate": {
                  "description": "Creation Date for the Application Insights component, in ISO 8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "DisableIpMasking": {
                  "description": "Disable IP masking.",
                  "type": "boolean"
                },
                "DisableLocalAuth": {
                  "description": "Disable Non-AAD based Auth.",
                  "type": "boolean"
                },
                "Flow_Type": {
                  "default": "Bluefield",
                  "description": "Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.",
                  "enum": [
                    "Bluefield"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "FlowType"
                  }
                },
                "ForceCustomerStorageForProfiler": {
                  "description": "Force users to create their own storage account for profiler and debugger.",
                  "type": "boolean"
                },
                "HockeyAppId": {
                  "description": "The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.",
                  "externalDocs": {
                    "url": "https://aka.ms/ewjuel"
                  },
                  "type": "string"
                },
                "HockeyAppToken": {
                  "description": "Token used to authenticate communications with between Application Insights and HockeyApp.",
                  "externalDocs": {
                    "url": "https://aka.ms/sls76s"
                  },
                  "readOnly": true,
                  "type": "string"
                },
                "ImmediatePurgeDataOn30Days": {
                  "description": "Purge data immediately after 30 days.",
                  "type": "boolean"
                },
                "IngestionMode": {
                  "default": "LogAnalytics",
                  "description": "Indicates the flow of the ingestion.",
                  "enum": [
                    "ApplicationInsights",
                    "ApplicationInsightsWithDiagnosticSettings",
                    "LogAnalytics"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "IngestionMode"
                  }
                },
                "InstrumentationKey": {
                  "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.",
                  "readOnly": true,
                  "type": "string"
                },
                "LaMigrationDate": {
                  "description": "The date which the component got migrated to LA, in ISO 8601 format.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "Name": {
                  "description": "Application name.",
                  "readOnly": true,
                  "type": "string"
                },
                "PrivateLinkScopedResources": {
                  "description": "List of linked private link scope resources.",
                  "items": {
                    "description": "The private link scope resource reference.",
                    "properties": {
                      "ResourceId": {
                        "description": "The full resource Id of the private link scope resource.",
                        "type": "string"
                      },
                      "ScopeId": {
                        "description": "The private link scope unique Identifier.",
                        "type": "string"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array",
                  "x-ms-identifiers": [
                    "ScopeId"
                  ]
                },
                "Request_Source": {
                  "default": "rest",
                  "description": "Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.",
                  "enum": [
                    "rest"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "RequestSource"
                  }
                },
                "RetentionInDays": {
                  "description": "Retention period in days.",
                  "type": "integer"
                },
                "SamplingPercentage": {
                  "description": "Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.",
                  "externalDocs": {
                    "url": "https://aka.ms/sl0yqd"
                  },
                  "format": "double",
                  "type": "number"
                },
                "TenantId": {
                  "description": "Azure Tenant Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "WorkspaceResourceId": {
                  "description": "Resource Id of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property.",
                  "type": "string"
                },
                "provisioningState": {
                  "description": "Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                  "readOnly": true,
                  "type": "string"
                },
                "publicNetworkAccessForIngestion": {
                  "default": "Enabled",
                  "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PublicNetworkAccessType",
                    "values": [
                      {
                        "description": "Enables connectivity to Application Insights through public DNS.",
                        "value": "Enabled"
                      },
                      {
                        "description": "Disables public connectivity to Application Insights through public DNS.",
                        "value": "Disabled"
                      }
                    ]
                  }
                },
                "publicNetworkAccessForQuery": {
                  "default": "Enabled",
                  "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PublicNetworkAccessType",
                    "values": [
                      {
                        "description": "Enables connectivity to Application Insights through public DNS.",
                        "value": "Enabled"
                      },
                      {
                        "description": "Disables public connectivity to Application Insights through public DNS.",
                        "value": "Disabled"
                      }
                    ]
                  }
                }
              },
              "required": [
                "Application_Type"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApplicationInsightsComponentProperties"
          },
          {
            "oldValue": {
              "description": "Describes the body of a purge request for an App Insights component",
              "properties": {
                "filters": {
                  "description": "The set of columns and filters (queries) to run over them to purge the resulting data.",
                  "items": {
                    "description": "User-defined filters to return data which will be purged from the table.",
                    "properties": {
                      "column": {
                        "description": "The column of the table over which the given query should run",
                        "type": "string"
                      },
                      "key": {
                        "description": "When filtering over custom dimensions, this key will be used as the name of the custom dimension.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same behavior as they would in a KQL query.",
                        "type": "string"
                      },
                      "value": {
                        "description": "the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values."
                      }
                    }
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "table": {
                  "description": "Table from which to purge data.",
                  "type": "string"
                }
              },
              "required": [
                "table",
                "filters"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeBody"
          },
          {
            "oldValue": {
              "description": "User-defined filters to return data which will be purged from the table.",
              "properties": {
                "column": {
                  "description": "The column of the table over which the given query should run",
                  "type": "string"
                },
                "key": {
                  "description": "When filtering over custom dimensions, this key will be used as the name of the custom dimension.",
                  "type": "string"
                },
                "operator": {
                  "description": "A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same behavior as they would in a KQL query.",
                  "type": "string"
                },
                "value": {
                  "description": "the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values."
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeBodyFilters"
          },
          {
            "oldValue": {
              "description": "Response containing operationId for a specific purge action.",
              "properties": {
                "operationId": {
                  "description": "Id to use when querying for status for a particular purge operation.",
                  "type": "string"
                }
              },
              "required": [
                "operationId"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeResponse"
          },
          {
            "oldValue": {
              "description": "Response containing status for a specific purge operation.",
              "properties": {
                "status": {
                  "description": "Status of the operation represented by the requested Id.",
                  "enum": [
                    "pending",
                    "completed"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PurgeState"
                  }
                }
              },
              "required": [
                "status"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeStatusResponse"
          },
          {
            "oldValue": {
              "description": "An azure resource object",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentsResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Error definition.",
              "properties": {
                "code": {
                  "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                  "readOnly": true,
                  "type": "string"
                },
                "innererror": {
                  "description": "Internal error details.",
                  "items": {
                    "description": "Error details",
                    "properties": {
                      "trace": {
                        "description": "detailed error trace",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "type": "array"
                      }
                    }
                  },
                  "readOnly": true
                },
                "message": {
                  "description": "Description of the error.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ErrorDefinition"
          },
          {
            "oldValue": {
              "properties": {
                "error": {
                  "description": "Error response indicates Insights service is not able to process the incoming request. The reason is provided in the error message.",
                  "properties": {
                    "code": {
                      "description": "Error code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "message": {
                      "description": "Error message indicating why the operation failed.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponseComponents"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Error details",
              "properties": {
                "trace": {
                  "description": "detailed error trace",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/InnerErrorTrace"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "etag": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource etag"
                    },
                    "id": {
                      "description": "Azure resource Id",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "identity": {
                      "description": "Customer Managed Identity",
                      "properties": {
                        "type": {
                          "description": "The identity type.",
                          "enum": [
                            "UserAssigned",
                            "None"
                          ],
                          "type": "string"
                        },
                        "userAssignedIdentities": {
                          "description": "Customer Managed Identity",
                          "properties": {
                            "principalId": {
                              "description": "The principal ID of resource identity.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tenantId": {
                              "description": "The tenant ID of resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An Application Insights private workbook definition.",
              "properties": {
                "kind": {
                  "description": "The kind of workbook. Choices are user and shared.",
                  "enum": [
                    "user",
                    "shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "kind"
                  }
                },
                "properties": {
                  "description": "Properties that contain a private workbook.",
                  "properties": {
                    "category": {
                      "description": "Workbook category, as defined by the user at creation time.",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "The user-defined name of the private workbook.",
                      "type": "string"
                    },
                    "serializedData": {
                      "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                      "type": "string",
                      "x-nullable": true
                    },
                    "sourceId": {
                      "description": "Optional resourceId for a source resource.",
                      "type": "string"
                    },
                    "storageUri": {
                      "description": "BYOS Storage Account URI",
                      "type": "string",
                      "x-nullable": true
                    },
                    "tags": {
                      "description": "A list of 0 or more tags that are associated with this private workbook definition",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timeModified": {
                      "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "userId": {
                      "description": "Unique user id of the specific user that owns this private workbook.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "version": {
                      "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "displayName",
                    "category",
                    "serializedData"
                  ]
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbook"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Error response.",
              "properties": {
                "error": {
                  "description": "Error definition.",
                  "properties": {
                    "code": {
                      "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "innererror": {
                      "description": "Internal error details.",
                      "items": {
                        "description": "Error details",
                        "properties": {
                          "trace": {
                            "description": "detailed error trace",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "readOnly": true
                    },
                    "message": {
                      "description": "Description of the error.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Customer Managed Identity",
              "properties": {
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "UserAssigned",
                    "None"
                  ],
                  "type": "string"
                },
                "userAssignedIdentities": {
                  "description": "Customer Managed Identity",
                  "properties": {
                    "principalId": {
                      "description": "The principal ID of resource identity.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The tenant ID of resource.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookManagedIdentity"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties that contain a private workbook.",
              "properties": {
                "category": {
                  "description": "Workbook category, as defined by the user at creation time.",
                  "type": "string"
                },
                "displayName": {
                  "description": "The user-defined name of the private workbook.",
                  "type": "string"
                },
                "serializedData": {
                  "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                  "type": "string",
                  "x-nullable": true
                },
                "sourceId": {
                  "description": "Optional resourceId for a source resource.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "BYOS Storage Account URI",
                  "type": "string",
                  "x-nullable": true
                },
                "tags": {
                  "description": "A list of 0 or more tags that are associated with this private workbook definition",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "timeModified": {
                  "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                  "readOnly": true,
                  "type": "string"
                },
                "userId": {
                  "description": "Unique user id of the specific user that owns this private workbook.",
                  "readOnly": true,
                  "type": "string"
                },
                "version": {
                  "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                  "type": "string"
                }
              },
              "required": [
                "displayName",
                "category",
                "serializedData"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure resource object",
              "properties": {
                "etag": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource etag"
                },
                "id": {
                  "description": "Azure resource Id",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "identity": {
                  "description": "Customer Managed Identity",
                  "properties": {
                    "type": {
                      "description": "The identity type.",
                      "enum": [
                        "UserAssigned",
                        "None"
                      ],
                      "type": "string"
                    },
                    "userAssignedIdentities": {
                      "description": "Customer Managed Identity",
                      "properties": {
                        "principalId": {
                          "description": "The principal ID of resource identity.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The tenant ID of resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                },
                "type": {
                  "description": "Azure resource type",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Customer Managed Identity",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookUserAssignedIdentities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Workbook list result.",
              "properties": {
                "nextLink": {
                  "type": "string"
                },
                "value": {
                  "description": "An array of private workbooks.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "etag": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource etag"
                          },
                          "id": {
                            "description": "Azure resource Id",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "identity": {
                            "description": "Customer Managed Identity",
                            "properties": {
                              "type": {
                                "description": "The identity type.",
                                "enum": [
                                  "UserAssigned",
                                  "None"
                                ],
                                "type": "string"
                              },
                              "userAssignedIdentities": {
                                "description": "Customer Managed Identity",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An Application Insights private workbook definition.",
                    "properties": {
                      "kind": {
                        "description": "The kind of workbook. Choices are user and shared.",
                        "enum": [
                          "user",
                          "shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "kind"
                        }
                      },
                      "properties": {
                        "description": "Properties that contain a private workbook.",
                        "properties": {
                          "category": {
                            "description": "Workbook category, as defined by the user at creation time.",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "The user-defined name of the private workbook.",
                            "type": "string"
                          },
                          "serializedData": {
                            "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                            "type": "string",
                            "x-nullable": true
                          },
                          "sourceId": {
                            "description": "Optional resourceId for a source resource.",
                            "type": "string"
                          },
                          "storageUri": {
                            "description": "BYOS Storage Account URI",
                            "type": "string",
                            "x-nullable": true
                          },
                          "tags": {
                            "description": "A list of 0 or more tags that are associated with this private workbook definition",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "timeModified": {
                            "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userId": {
                            "description": "Unique user id of the specific user that owns this private workbook.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "version": {
                            "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "displayName",
                          "category",
                          "serializedData"
                        ]
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbooksListResult"
          },
          {
            "oldValue": {
              "description": "The private link scope resource reference.",
              "properties": {
                "ResourceId": {
                  "description": "The full resource Id of the private link scope resource.",
                  "type": "string"
                },
                "ScopeId": {
                  "description": "The private link scope unique Identifier.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateLinkScopedResource"
          },
          {
            "oldValue": {
              "default": "Enabled",
              "description": "The network access type for operating on the Application Insights Component. By default it is Enabled",
              "enum": [
                "Enabled",
                "Disabled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "PublicNetworkAccessType",
                "values": [
                  {
                    "description": "Enables connectivity to Application Insights through public DNS.",
                    "value": "Enabled"
                  },
                  {
                    "description": "Disables public connectivity to Application Insights through public DNS.",
                    "value": "Disabled"
                  }
                ]
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PublicNetworkAccessType"
          },
          {
            "oldValue": {
              "description": "A container holding only the Tags for a resource, allowing the user to update the tags on a WebTest instance.",
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TagsResource"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks.",
              "in": "query",
              "name": "canFetchContent",
              "required": false,
              "type": "boolean",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/CanFetchWorkbookContentParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Category of workbook to return.",
              "enum": [
                "workbook",
                "TSG",
                "performance",
                "retention"
              ],
              "in": "query",
              "name": "category",
              "required": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "CategoryType"
              },
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/CategoryParameter"
          },
          {
            "oldValue": {
              "description": "In a purge status request, this is the Id of the operation the status of which is returned.",
              "in": "path",
              "name": "purgeId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeIdParameter"
          },
          {
            "oldValue": {
              "description": "Describes the body of a request to purge data in a single table of an Application Insights component",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "description": "Describes the body of a purge request for an App Insights component",
                "properties": {
                  "filters": {
                    "description": "The set of columns and filters (queries) to run over them to purge the resulting data.",
                    "items": {
                      "description": "User-defined filters to return data which will be purged from the table.",
                      "properties": {
                        "column": {
                          "description": "The column of the table over which the given query should run",
                          "type": "string"
                        },
                        "key": {
                          "description": "When filtering over custom dimensions, this key will be used as the name of the custom dimension.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same behavior as they would in a KQL query.",
                          "type": "string"
                        },
                        "value": {
                          "description": "the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values."
                        }
                      }
                    },
                    "type": "array",
                    "x-ms-identifiers": []
                  },
                  "table": {
                    "description": "Table from which to purge data.",
                    "type": "string"
                  }
                },
                "required": [
                  "table",
                  "filters"
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ComponentPurgeParameter"
          },
          {
            "oldValue": {
              "description": "The name of the Application Insights component resource.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure Resource Id that will fetch all linked workbooks.",
              "in": "query",
              "name": "sourceId",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SourceIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "collectionFormat": "csv",
              "description": "Tags presents on each workbook returned.",
              "in": "query",
              "items": {
                "type": "string"
              },
              "name": "tags",
              "required": false,
              "type": "array",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/TagsParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the Application Insights component resource.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/WorkbookResourceNameParameter"
          }
        ]
      }
    },
    "info": {
      "description": {
        "from": "Azure Application Insights client for Components",
        "to": "Azure Application Insights private workbook type."
      },
      "version": {
        "from": "2020-02-02",
        "to": "2020-10-20"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/myWorkbooks",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/purge",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/components",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/operations/{purgeId}"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "MyWorkbooks_ListByResourceGroup": "FunctionDef(\n  name='MyWorkbooks_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='category',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='tags',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='canFetchContent',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get all private workbooks defined within a specified resource group and category.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='category', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='category'),\n              ctx=Store())],\n          value=Name(id='category', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='tags', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='tags'),\n              ctx=Store())],\n          value=Name(id='tags', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='canFetchContent', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='canFetchContent'),\n              ctx=Store())],\n          value=Name(id='canFetchContent', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all private workbooks defined within a specified resource group and category.'))])],\n  type_params=[])",
    "MyWorkbooks_ListBySubscription": "FunctionDef(\n  name='MyWorkbooks_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='category',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='tags',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='canFetchContent',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get all private workbooks defined within a specified subscription and category.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='category', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='category'),\n              ctx=Store())],\n          value=Name(id='category', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='tags', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='tags'),\n              ctx=Store())],\n          value=Name(id='tags', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='canFetchContent', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='canFetchContent'),\n              ctx=Store())],\n          value=Name(id='canFetchContent', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all private workbooks defined within a specified subscription and category.'))])],\n  type_params=[])",
    "MyWorkbooks_Get": "FunctionDef(\n  name='MyWorkbooks_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a single private workbook by its resourceName.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a single private workbook by its resourceName.'))])],\n  type_params=[])",
    "MyWorkbooks_Delete": "FunctionDef(\n  name='MyWorkbooks_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a private workbook.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a private workbook.'))])],\n  type_params=[])",
    "MyWorkbooks_CreateOrUpdate": "FunctionDef(\n  name='MyWorkbooks_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a new private workbook.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a new private workbook.'))])],\n  type_params=[])",
    "MyWorkbooks_Update": "FunctionDef(\n  name='MyWorkbooks_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates a private workbook that has already been added.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates a private workbook that has already been added.'))])],\n  type_params=[])"
  }
}