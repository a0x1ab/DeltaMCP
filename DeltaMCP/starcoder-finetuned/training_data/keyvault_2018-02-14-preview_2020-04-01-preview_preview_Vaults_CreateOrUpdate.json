{
  "oasdiff": {
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}": {
          "operations": {
            "modified": {
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [
                            {
                              "value": ""
                            }
                          ],
                          "virtualNetworkRules": [
                            {
                              "id": "",
                              "ignoreMissingVnetServiceEndpoint": false
                            }
                          ]
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/networkAcls"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          {
                            "id": "",
                            "properties": {
                              "privateEndpoint": {
                                "id": ""
                              },
                              "privateLinkServiceConnectionState": {
                                "actionsRequired": "None",
                                "status": "Approved"
                              },
                              "provisioningState": "Succeeded"
                            }
                          }
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/privateEndpointConnections"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/201/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/409"
                      },
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create or update a vault with network acls/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/200/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/201/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/409"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "provisioningState",
                                    "softDeleteRetentionInDays",
                                    "privateEndpointConnections",
                                    "enableRbacAuthorization"
                                  ],
                                  "modified": {
                                    "accessPolicies": {
                                      "description": {
                                        "from": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                                        "to": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required."
                                      }
                                    },
                                    "enableSoftDelete": {
                                      "description": {
                                        "from": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                                        "to": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false."
                                      },
                                      "default": {
                                        "from": null,
                                        "to": true
                                      }
                                    },
                                    "networkAcls": {
                                      "properties": {
                                        "modified": {
                                          "virtualNetworkRules": {
                                            "items": {
                                              "properties": {
                                                "added": [
                                                  "ignoreMissingVnetServiceEndpoint"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "409",
                    "default",
                    "400"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Vaults_CreateOrUpdate": "FunctionDef(name='Vaults_CreateOrUpdate', args=arguments(posonlyargs=[], args=[arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='vaultName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create or update a key vault in the specified subscription.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.KeyVault/vaults/'), FormattedValue(value=Name(id='vaultName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='vaultName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: vaultName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Vaults_CreateOrUpdate')), keyword(arg='description', value=Constant(value='Create or update a key vault in the specified subscription.'))])])"
  },
  "tools_b": {
    "Vaults_CreateOrUpdate": "FunctionDef(name='Vaults_CreateOrUpdate', args=arguments(posonlyargs=[], args=[arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='vaultName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create or update a key vault in the specified subscription.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.KeyVault/vaults/'), FormattedValue(value=Name(id='vaultName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='vaultName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: vaultName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Vaults_CreateOrUpdate')), keyword(arg='description', value=Constant(value='Create or update a key vault in the specified subscription.'))])])"
  }
}