{
  "oasdiff": {
    "extensions": {
      "added": [
        "securityDefinitions"
      ],
      "deleted": [
        "consumes",
        "produces"
      ],
      "modified": {
        "definitions": [
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The CheckNameAvailability operation response.",
              "properties": {
                "message": {
                  "description": "An error message explaining the Reason value in more detail.",
                  "readOnly": true,
                  "type": "string"
                },
                "nameAvailable": {
                  "description": "A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "reason": {
                  "description": "The reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false.",
                  "enum": [
                    "AccountNameInvalid",
                    "AlreadyExists"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Reason"
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/CheckNameAvailabilityResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Deleted vault information with extended details.",
              "properties": {
                "id": {
                  "description": "The resource ID for the deleted key vault.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the key vault.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of the deleted vault.",
                  "properties": {
                    "deletionDate": {
                      "description": "The deleted date.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "The location of the original vault.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "scheduledPurgeDate": {
                      "description": "The scheduled purged date.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Tags of the original vault.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "vaultId": {
                      "description": "The resource id of the original vault.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "type": {
                  "description": "The resource type of the key vault.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVault"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of vaults",
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of deleted vaults.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of deleted vaults.",
                  "items": {
                    "description": "Deleted vault information with extended details.",
                    "properties": {
                      "id": {
                        "description": "The resource ID for the deleted key vault.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the key vault.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties of the deleted vault.",
                        "properties": {
                          "deletionDate": {
                            "description": "The deleted date.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "The location of the original vault.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "scheduledPurgeDate": {
                            "description": "The scheduled purged date.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Tags of the original vault.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "vaultId": {
                            "description": "The resource id of the original vault.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "type": {
                        "description": "The resource type of the key vault.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVaultListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of the deleted vault.",
              "properties": {
                "deletionDate": {
                  "description": "The deleted date.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "The location of the original vault.",
                  "readOnly": true,
                  "type": "string"
                },
                "scheduledPurgeDate": {
                  "description": "The scheduled purged date.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags of the original vault.",
                  "readOnly": true,
                  "type": "object"
                },
                "vaultId": {
                  "description": "The resource id of the original vault.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVaultProperties"
          },
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/Permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/storage"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Resource/properties/name/readOnly"
          },
          {
            "oldValue": "name",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Resource/required/1"
          },
          {
            "oldValue": "Gets the URL to get the next set of vault resources.",
            "value": "The URL to get the next set of vault resources.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/nextLink/description"
          },
          {
            "oldValue": "Gets the list of vault resources.",
            "value": "The list of vault resources.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/name/readOnly"
          },
          {
            "oldValue": "name",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/required/1"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Vault/allOf/0/properties/name/readOnly"
          },
          {
            "oldValue": "name",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/allOf/0/required/1"
          },
          {
            "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/maxItems"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
              "enum": [
                "recover",
                "default"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "CreateMode"
              }
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/createMode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/enablePurgeProtection"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
            "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": "accessPolicies",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/properties/properties/required/2"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Parameters for updating the access policy in a vault",
              "properties": {
                "id": {
                  "description": "The resource id of the access policy.",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "The resource type of the access policy.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The resource name of the access policy.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of the vault access policy",
                  "properties": {
                    "accessPolicies": {
                      "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                      "items": {
                        "description": "An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                        "properties": {
                          "applicationId": {
                            "description": " Application ID of the client making request on behalf of a principal",
                            "format": "uuid",
                            "type": "string"
                          },
                          "objectId": {
                            "description": "The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.",
                            "type": "string"
                          },
                          "permissions": {
                            "description": "Permissions the identity has for keys, secrets, certificates and storage.",
                            "properties": {
                              "certificates": {
                                "description": "Permissions to certificates",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "create",
                                    "import",
                                    "update",
                                    "managecontacts",
                                    "getissuers",
                                    "listissuers",
                                    "setissuers",
                                    "deleteissuers",
                                    "manageissuers",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "CertificatePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "keys": {
                                "description": "Permissions to keys",
                                "items": {
                                  "enum": [
                                    "encrypt",
                                    "decrypt",
                                    "wrapKey",
                                    "unwrapKey",
                                    "sign",
                                    "verify",
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "import",
                                    "delete",
                                    "backup",
                                    "restore",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "KeyPermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "secrets": {
                                "description": "Permissions to secrets",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "set",
                                    "delete",
                                    "backup",
                                    "restore",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "SecretPermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "storage": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              }
                            }
                          },
                          "tenantId": {
                            "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenantId",
                          "objectId",
                          "permissions"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accessPolicies"
                  ]
                },
                "type": {
                  "description": "The resource name of the access policy.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "properties"
              ],
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of the vault access policy",
              "properties": {
                "accessPolicies": {
                  "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                  "items": {
                    "description": "An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                    "properties": {
                      "applicationId": {
                        "description": " Application ID of the client making request on behalf of a principal",
                        "format": "uuid",
                        "type": "string"
                      },
                      "objectId": {
                        "description": "The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.",
                        "type": "string"
                      },
                      "permissions": {
                        "description": "Permissions the identity has for keys, secrets, certificates and storage.",
                        "properties": {
                          "certificates": {
                            "description": "Permissions to certificates",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "delete",
                                "create",
                                "import",
                                "update",
                                "managecontacts",
                                "getissuers",
                                "listissuers",
                                "setissuers",
                                "deleteissuers",
                                "manageissuers",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "CertificatePermissions"
                              }
                            },
                            "type": "array"
                          },
                          "keys": {
                            "description": "Permissions to keys",
                            "items": {
                              "enum": [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey",
                                "sign",
                                "verify",
                                "get",
                                "list",
                                "create",
                                "update",
                                "import",
                                "delete",
                                "backup",
                                "restore",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "KeyPermissions"
                              }
                            },
                            "type": "array"
                          },
                          "secrets": {
                            "description": "Permissions to secrets",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "set",
                                "delete",
                                "backup",
                                "restore",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "SecretPermissions"
                              }
                            },
                            "type": "array"
                          },
                          "storage": {
                            "description": "Permissions to storage accounts",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "delete",
                                "set",
                                "update",
                                "regeneratekey",
                                "recover",
                                "purge",
                                "backup",
                                "restore",
                                "setsas",
                                "listsas",
                                "getsas",
                                "deletesas"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "StoragePermissions"
                              }
                            },
                            "type": "array"
                          }
                        }
                      },
                      "tenantId": {
                        "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenantId",
                      "objectId",
                      "permissions"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "accessPolicies"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The parameters used to check the availability of the vault name.",
              "properties": {
                "name": {
                  "description": "The vault name.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of resource, Microsoft.KeyVault/vaults",
                  "enum": [
                    "Microsoft.KeyVault/vaults"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Type"
                  }
                }
              },
              "required": [
                "name",
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/VaultCheckNameAvailabilityParameters"
          },
          {
            "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/maxItems"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
              "enum": [
                "recover",
                "default"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "CreateMode"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/createMode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enablePurgeProtection"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
            "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": "accessPolicies",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/required/2"
          },
          {
            "oldValue": "The tags that will be assigned to the key vault. ",
            "value": "The tags that will be assigned to the key vault.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/tags/description"
          },
          {
            "oldValue": "Gets or sets the URL to get the next set of vaults.",
            "value": "The URL to get the next set of vaults.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/nextLink/description"
          },
          {
            "oldValue": "Gets or sets the list of vaults.",
            "value": "The list of vaults.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/allOf/0/properties/name/readOnly"
          },
          {
            "oldValue": "name",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/allOf/0/required/1"
          },
          {
            "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/maxItems"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
              "enum": [
                "recover",
                "default"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "CreateMode"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/createMode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enablePurgeProtection"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
            "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": "accessPolicies",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/required/2"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Parameters for creating or updating a vault",
              "properties": {
                "properties": {
                  "description": "Properties of the vault",
                  "properties": {
                    "accessPolicies": {
                      "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                      "items": {
                        "description": "An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                        "properties": {
                          "applicationId": {
                            "description": " Application ID of the client making request on behalf of a principal",
                            "format": "uuid",
                            "type": "string"
                          },
                          "objectId": {
                            "description": "The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.",
                            "type": "string"
                          },
                          "permissions": {
                            "description": "Permissions the identity has for keys, secrets, certificates and storage.",
                            "properties": {
                              "certificates": {
                                "description": "Permissions to certificates",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "create",
                                    "import",
                                    "update",
                                    "managecontacts",
                                    "getissuers",
                                    "listissuers",
                                    "setissuers",
                                    "deleteissuers",
                                    "manageissuers",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "CertificatePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "keys": {
                                "description": "Permissions to keys",
                                "items": {
                                  "enum": [
                                    "encrypt",
                                    "decrypt",
                                    "wrapKey",
                                    "unwrapKey",
                                    "sign",
                                    "verify",
                                    "get",
                                    "list",
                                    "create",
                                    "update",
                                    "import",
                                    "delete",
                                    "backup",
                                    "restore",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "KeyPermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "secrets": {
                                "description": "Permissions to secrets",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "set",
                                    "delete",
                                    "backup",
                                    "restore",
                                    "recover",
                                    "purge"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "SecretPermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "storage": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              }
                            }
                          },
                          "tenantId": {
                            "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenantId",
                          "objectId",
                          "permissions"
                        ]
                      },
                      "type": "array"
                    },
                    "createMode": {
                      "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                      "enum": [
                        "recover",
                        "default"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "CreateMode"
                      }
                    },
                    "enablePurgeProtection": {
                      "description": "Property specifying whether protection against purge is enabled for this vault; it is only effective if soft delete is also enabled. Once activated, the property may no longer be reset to false.",
                      "type": "boolean"
                    },
                    "enableSoftDelete": {
                      "description": "Property specifying whether recoverable deletion ('soft' delete) is enabled for this key vault. The property may not be set to false.",
                      "type": "boolean"
                    },
                    "enabledForDeployment": {
                      "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.",
                      "type": "boolean"
                    },
                    "enabledForDiskEncryption": {
                      "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.",
                      "type": "boolean"
                    },
                    "enabledForTemplateDeployment": {
                      "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.",
                      "type": "boolean"
                    },
                    "sku": {
                      "description": "SKU details",
                      "properties": {
                        "family": {
                          "description": "SKU family name",
                          "enum": [
                            "A"
                          ],
                          "type": "string",
                          "x-ms-client-default": "A",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "SkuFamily"
                          }
                        },
                        "name": {
                          "description": "SKU name to specify whether the key vault is a standard vault or a premium vault.",
                          "enum": [
                            "standard",
                            "premium"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SkuName"
                          }
                        }
                      },
                      "required": [
                        "name",
                        "family"
                      ]
                    },
                    "tenantId": {
                      "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                      "format": "uuid",
                      "type": "string"
                    }
                  }
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The tags that will be assigned to the key vault. ",
                  "type": "object"
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of the vault",
              "properties": {
                "accessPolicies": {
                  "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                  "items": {
                    "description": "An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                    "properties": {
                      "applicationId": {
                        "description": " Application ID of the client making request on behalf of a principal",
                        "format": "uuid",
                        "type": "string"
                      },
                      "objectId": {
                        "description": "The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.",
                        "type": "string"
                      },
                      "permissions": {
                        "description": "Permissions the identity has for keys, secrets, certificates and storage.",
                        "properties": {
                          "certificates": {
                            "description": "Permissions to certificates",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "delete",
                                "create",
                                "import",
                                "update",
                                "managecontacts",
                                "getissuers",
                                "listissuers",
                                "setissuers",
                                "deleteissuers",
                                "manageissuers",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "CertificatePermissions"
                              }
                            },
                            "type": "array"
                          },
                          "keys": {
                            "description": "Permissions to keys",
                            "items": {
                              "enum": [
                                "encrypt",
                                "decrypt",
                                "wrapKey",
                                "unwrapKey",
                                "sign",
                                "verify",
                                "get",
                                "list",
                                "create",
                                "update",
                                "import",
                                "delete",
                                "backup",
                                "restore",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "KeyPermissions"
                              }
                            },
                            "type": "array"
                          },
                          "secrets": {
                            "description": "Permissions to secrets",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "set",
                                "delete",
                                "backup",
                                "restore",
                                "recover",
                                "purge"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "SecretPermissions"
                              }
                            },
                            "type": "array"
                          },
                          "storage": {
                            "description": "Permissions to storage accounts",
                            "items": {
                              "enum": [
                                "get",
                                "list",
                                "delete",
                                "set",
                                "update",
                                "regeneratekey",
                                "recover",
                                "purge",
                                "backup",
                                "restore",
                                "setsas",
                                "listsas",
                                "getsas",
                                "deletesas"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "StoragePermissions"
                              }
                            },
                            "type": "array"
                          }
                        }
                      },
                      "tenantId": {
                        "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenantId",
                      "objectId",
                      "permissions"
                    ]
                  },
                  "type": "array"
                },
                "createMode": {
                  "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                  "enum": [
                    "recover",
                    "default"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "CreateMode"
                  }
                },
                "enablePurgeProtection": {
                  "description": "Property specifying whether protection against purge is enabled for this vault; it is only effective if soft delete is also enabled. Once activated, the property may no longer be reset to false.",
                  "type": "boolean"
                },
                "enableSoftDelete": {
                  "description": "Property specifying whether recoverable deletion ('soft' delete) is enabled for this key vault. The property may not be set to false.",
                  "type": "boolean"
                },
                "enabledForDeployment": {
                  "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.",
                  "type": "boolean"
                },
                "enabledForDiskEncryption": {
                  "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.",
                  "type": "boolean"
                },
                "enabledForTemplateDeployment": {
                  "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.",
                  "type": "boolean"
                },
                "sku": {
                  "description": "SKU details",
                  "properties": {
                    "family": {
                      "description": "SKU family name",
                      "enum": [
                        "A"
                      ],
                      "type": "string",
                      "x-ms-client-default": "A",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "SkuFamily"
                      }
                    },
                    "name": {
                      "description": "SKU name to specify whether the key vault is a standard vault or a premium vault.",
                      "enum": [
                        "standard",
                        "premium"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    }
                  },
                  "required": [
                    "name",
                    "family"
                  ]
                },
                "tenantId": {
                  "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties"
          },
          {
            "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/description"
          },
          {
            "oldValue": "Permissions the identity has for keys, secrets and certificates.",
            "value": "Permissions the identity has for keys, secrets, certificates and storage.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/description"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "create",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "update",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "managecontacts",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "getissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "listissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "setissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "deleteissuers",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "manageissuers",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": "all",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "encrypt",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "decrypt",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "wrapKey",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "unwrapKey",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "sign",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "verify",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "list",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "create",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "import",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "purge",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
          },
          {
            "oldValue": "all",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "get",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "list",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "delete",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "backup",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "restore",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "recover",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Permissions to storage accounts",
              "items": {
                "enum": [
                  "get",
                  "list",
                  "delete",
                  "set",
                  "update",
                  "regeneratekey",
                  "recover",
                  "purge",
                  "backup",
                  "restore",
                  "setsas",
                  "listsas",
                  "getsas",
                  "deletesas"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "StoragePermissions"
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/maxItems"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
              "enum": [
                "recover",
                "default"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "CreateMode"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/createMode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/enablePurgeProtection"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
            "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": "accessPolicies",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultProperties/required/2"
          }
        ],
        "parameters": [
          {
            "oldValue": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
            "value": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
            "op": "replace",
            "from": "",
            "path": "/SubscriptionIdParameter/description"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2015-06-01",
        "to": "2016-10-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults",
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability",
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge",
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}"
      ],
      "modified": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "added": [
                    "produces",
                    "x-ms-examples",
                    "consumes"
                  ]
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Gets or sets the URL to get the next set of vaults.",
                              "value": "The URL to get the next set of vaults.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/nextLink/description"
                            },
                            {
                              "oldValue": "Gets or sets the list of vaults.",
                              "value": "The list of vaults.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf/0/properties/name/readOnly"
                            },
                            {
                              "oldValue": "name",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/allOf/0/required/1"
                            },
                            {
                              "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": "Permissions the identity has for keys, secrets and certificates.",
                              "value": "Permissions the identity has for keys, secrets, certificates and storage.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/description"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "create",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "update",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": "all",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "sign",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "verify",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "list",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "create",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "import",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/maxItems"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                                "enum": [
                                  "recover",
                                  "default"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "CreateMode"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/createMode"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enablePurgeProtection"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
                              "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": "accessPolicies",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/required/2"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}": {
          "operations": {
            "added": [
              "PATCH"
            ],
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "produces",
                    "x-ms-examples",
                    "consumes"
                  ]
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
                        }
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "added": [
                    "consumes",
                    "produces",
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/properties/name/readOnly"
                            },
                            {
                              "oldValue": "name",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf/0/required/1"
                            },
                            {
                              "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": "Permissions the identity has for keys, secrets and certificates.",
                              "value": "Permissions the identity has for keys, secrets, certificates and storage.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/description"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "create",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "update",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": "all",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "sign",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "verify",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "list",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "create",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "import",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/maxItems"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                                "enum": [
                                  "recover",
                                  "default"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "CreateMode"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/createMode"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enablePurgeProtection"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
                              "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": "accessPolicies",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required/2"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-examples",
                    "consumes",
                    "produces"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "required": {
                                  "deleted": [
                                    "accessPolicies"
                                  ]
                                },
                                "properties": {
                                  "added": [
                                    "enablePurgeProtection",
                                    "createMode"
                                  ],
                                  "modified": {
                                    "accessPolicies": {
                                      "description": {
                                        "from": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                                        "to": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required."
                                      },
                                      "maxItems": {
                                        "from": 16,
                                        "to": null
                                      },
                                      "items": {
                                        "properties": {
                                          "modified": {
                                            "permissions": {
                                              "description": {
                                                "from": "Permissions the identity has for keys, secrets and certificates.",
                                                "to": "Permissions the identity has for keys, secrets, certificates and storage."
                                              },
                                              "properties": {
                                                "added": [
                                                  "storage"
                                                ],
                                                "modified": {
                                                  "certificates": {
                                                    "items": {
                                                      "enum": {
                                                        "deleted": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "keys": {
                                                    "items": {
                                                      "enum": {
                                                        "deleted": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "secrets": {
                                                    "items": {
                                                      "enum": {
                                                        "deleted": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "enableSoftDelete": {
                                      "description": {
                                        "from": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
                                        "to": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value."
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "The tags that will be assigned to the key vault. ",
                                  "to": "The tags that will be assigned to the key vault."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/properties/name/readOnly"
                            },
                            {
                              "oldValue": "name",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf/0/required/1"
                            },
                            {
                              "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": "Permissions the identity has for keys, secrets and certificates.",
                              "value": "Permissions the identity has for keys, secrets, certificates and storage.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/description"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "create",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "update",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": "all",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "sign",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "verify",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "list",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "create",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "import",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/maxItems"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                                "enum": [
                                  "recover",
                                  "default"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "CreateMode"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/createMode"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enablePurgeProtection"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
                              "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": "accessPolicies",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required/2"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/allOf/0/properties/name/readOnly"
                            },
                            {
                              "oldValue": "name",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf/0/required/1"
                            },
                            {
                              "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": "Permissions the identity has for keys, secrets and certificates.",
                              "value": "Permissions the identity has for keys, secrets, certificates and storage.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/description"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "create",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "update",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": "all",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "sign",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "verify",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "list",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "create",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "import",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "purge",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/8"
                            },
                            {
                              "oldValue": "all",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "get",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "list",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "delete",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "backup",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "restore",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "recover",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Permissions to storage accounts",
                                "items": {
                                  "enum": [
                                    "get",
                                    "list",
                                    "delete",
                                    "set",
                                    "update",
                                    "regeneratekey",
                                    "recover",
                                    "purge",
                                    "backup",
                                    "restore",
                                    "setsas",
                                    "listsas",
                                    "getsas",
                                    "deletesas"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "StoragePermissions"
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/maxItems"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The vault's create mode to indicate whether the vault need to be recovered or not.",
                                "enum": [
                                  "recover",
                                  "default"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "CreateMode"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/createMode"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enablePurgeProtection"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault.",
                              "value": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": "accessPolicies",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required/2"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resources": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "added": [
                    "x-ms-examples",
                    "consumes",
                    "produces"
                  ]
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                          "to": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Gets the URL to get the next set of vault resources.",
                              "value": "The URL to get the next set of vault resources.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/nextLink/description"
                            },
                            {
                              "oldValue": "Gets the list of vault resources.",
                              "value": "The list of vault resources.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/name/readOnly"
                            },
                            {
                              "oldValue": "name",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/required/1"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Update": "FunctionDef(\n  name='Vaults_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_UpdateAccessPolicy": "FunctionDef(\n  name='Vaults_UpdateAccessPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationKind',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update access policies in a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessPolicies/'),\n          FormattedValue(\n            value=Name(id='operationKind', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationKind', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationKind')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_UpdateAccessPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update access policies in a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_ListBySubscription": "FunctionDef(\n  name='Vaults_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_ListDeleted": "FunctionDef(\n  name='Vaults_ListDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets information about the deleted vaults in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/deletedVaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets information about the deleted vaults in a subscription.'))])],\n  type_params=[])",
    "Vaults_GetDeleted": "FunctionDef(\n  name='Vaults_GetDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_GetDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_PurgeDeleted": "FunctionDef(\n  name='Vaults_PurgeDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/purge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_PurgeDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_CheckNameAvailability": "FunctionDef(\n  name='Vaults_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the vault name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the vault name is valid and is not already in use.'))])],\n  type_params=[])"
  }
}