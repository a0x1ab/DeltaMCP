{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "description": "Query result column descriptor.",
              "properties": {
                "name": {
                  "description": "Column name.",
                  "type": "string"
                },
                "type": {
                  "description": "Data type of a column in a table.",
                  "enum": [
                    "string",
                    "integer",
                    "number",
                    "boolean",
                    "object",
                    "datetime"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ColumnDataType"
                  }
                }
              },
              "required": [
                "name",
                "type"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Column"
          },
          {
            "oldValue": {
              "description": "Data type of a column in a table.",
              "enum": [
                "string",
                "integer",
                "number",
                "boolean",
                "object",
                "datetime"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ColumnDataType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ColumnDataType"
          },
          {
            "oldValue": {
              "description": "Error details.",
              "properties": {
                "code": {
                  "description": "Error code identifying the specific error.",
                  "type": "string"
                },
                "details": {
                  "description": "Error details",
                  "items": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "properties": {
                      "code": {
                        "description": "Error code identifying the specific error.",
                        "type": "string"
                      },
                      "message": {
                        "description": "A human readable error message.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code",
                      "message"
                    ],
                    "title": "Error details.",
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "description": "A human readable error message.",
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ],
              "title": "Error info.",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Error"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "object"
              },
              "properties": {
                "code": {
                  "description": "Error code identifying the specific error.",
                  "type": "string"
                },
                "message": {
                  "description": "A human readable error message.",
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ],
              "title": "Error details.",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorDetails"
          },
          {
            "oldValue": {
              "description": "An error response from the API.",
              "properties": {
                "error": {
                  "description": "Error details.",
                  "properties": {
                    "code": {
                      "description": "Error code identifying the specific error.",
                      "type": "string"
                    },
                    "details": {
                      "description": "Error details",
                      "items": {
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "code": {
                            "description": "Error code identifying the specific error.",
                            "type": "string"
                          },
                          "message": {
                            "description": "A human readable error message.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "code",
                          "message"
                        ],
                        "title": "Error details.",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A human readable error message.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error info.",
                  "type": "object"
                }
              },
              "required": [
                "error"
              ],
              "title": "Error response.",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponse"
          },
          {
            "oldValue": {
              "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
              "discriminator": "resultType",
              "properties": {
                "expression": {
                  "description": "Facet expression, same as in the corresponding facet request.",
                  "type": "string"
                },
                "resultType": {
                  "description": "Result type",
                  "type": "string"
                }
              },
              "required": [
                "expression",
                "resultType"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Facet"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                  "discriminator": "resultType",
                  "properties": {
                    "expression": {
                      "description": "Facet expression, same as in the corresponding facet request.",
                      "type": "string"
                    },
                    "resultType": {
                      "description": "Result type",
                      "type": "string"
                    }
                  },
                  "required": [
                    "expression",
                    "resultType"
                  ],
                  "type": "object"
                }
              ],
              "description": "A facet whose execution resulted in an error.",
              "properties": {
                "errors": {
                  "description": "An array containing detected facet errors with details.",
                  "items": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "properties": {
                      "code": {
                        "description": "Error code identifying the specific error.",
                        "type": "string"
                      },
                      "message": {
                        "description": "A human readable error message.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code",
                      "message"
                    ],
                    "title": "Error details.",
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object",
              "x-ms-discriminator-value": "FacetError"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetError"
          },
          {
            "oldValue": {
              "description": "A request to compute additional statistics (facets) over the query results.",
              "properties": {
                "expression": {
                  "description": "The column or list of columns to summarize by",
                  "type": "string"
                },
                "options": {
                  "description": "The options for facet evaluation",
                  "properties": {
                    "$top": {
                      "description": "The maximum number of facet rows that should be returned.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "filter": {
                      "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                      "type": "string"
                    },
                    "sortBy": {
                      "description": "The column name or query expression to sort on. Defaults to count if not present.",
                      "type": "string"
                    },
                    "sortOrder": {
                      "default": "desc",
                      "description": "The sorting order by the selected column (count by default).",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "FacetSortOrder"
                      }
                    }
                  }
                }
              },
              "required": [
                "expression"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetRequest"
          },
          {
            "oldValue": {
              "description": "The options for facet evaluation",
              "properties": {
                "$top": {
                  "description": "The maximum number of facet rows that should be returned.",
                  "format": "int32",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "filter": {
                  "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                  "type": "string"
                },
                "sortBy": {
                  "description": "The column name or query expression to sort on. Defaults to count if not present.",
                  "type": "string"
                },
                "sortOrder": {
                  "default": "desc",
                  "description": "The sorting order by the selected column (count by default).",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "FacetSortOrder"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetRequestOptions"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                  "discriminator": "resultType",
                  "properties": {
                    "expression": {
                      "description": "Facet expression, same as in the corresponding facet request.",
                      "type": "string"
                    },
                    "resultType": {
                      "description": "Result type",
                      "type": "string"
                    }
                  },
                  "required": [
                    "expression",
                    "resultType"
                  ],
                  "type": "object"
                }
              ],
              "description": "Successfully executed facet containing additional statistics on the response of a query.",
              "properties": {
                "count": {
                  "description": "Number of records returned in the facet response.",
                  "format": "int32",
                  "type": "integer"
                },
                "data": {
                  "description": "A JObject array or Table containing the desired facets. Only present if the facet is valid.",
                  "type": "object"
                },
                "totalRecords": {
                  "description": "Number of total records in the facet results.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "totalRecords",
                "count",
                "data"
              ],
              "type": "object",
              "x-ms-discriminator-value": "FacetResult"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetResult"
          },
          {
            "oldValue": {
              "description": "Resource Graph REST API operation definition.",
              "properties": {
                "display": {
                  "description": "Display metadata associated with the operation.",
                  "properties": {
                    "description": {
                      "description": "Description for the operation.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Type of operation: get, read, delete, etc.",
                      "type": "string"
                    },
                    "provider": {
                      "description": "Service provider: Microsoft Resource Graph.",
                      "type": "string"
                    },
                    "resource": {
                      "description": "Resource on which the operation is performed etc.",
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "description": "Operation name: {provider}/{resource}/{operation}",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of operations.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Operation"
          },
          {
            "oldValue": {
              "description": "Result of the request to list Resource Graph operations. It contains a list of operations and a URL link to get the next set of results.",
              "properties": {
                "value": {
                  "description": "List of Resource Graph operations supported by the Resource Graph resource provider.",
                  "items": {
                    "description": "Resource Graph REST API operation definition.",
                    "properties": {
                      "display": {
                        "description": "Display metadata associated with the operation.",
                        "properties": {
                          "description": {
                            "description": "Description for the operation.",
                            "type": "string"
                          },
                          "operation": {
                            "description": "Type of operation: get, read, delete, etc.",
                            "type": "string"
                          },
                          "provider": {
                            "description": "Service provider: Microsoft Resource Graph.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource on which the operation is performed etc.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Operation name: {provider}/{resource}/{operation}",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The origin of operations.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationListResult"
          },
          {
            "oldValue": {
              "description": "Describes a query to be executed.",
              "properties": {
                "facets": {
                  "description": "An array of facet requests to be computed against the query result.",
                  "items": {
                    "description": "A request to compute additional statistics (facets) over the query results.",
                    "properties": {
                      "expression": {
                        "description": "The column or list of columns to summarize by",
                        "type": "string"
                      },
                      "options": {
                        "description": "The options for facet evaluation",
                        "properties": {
                          "$top": {
                            "description": "The maximum number of facet rows that should be returned.",
                            "format": "int32",
                            "maximum": 1000,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "filter": {
                            "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                            "type": "string"
                          },
                          "sortBy": {
                            "description": "The column name or query expression to sort on. Defaults to count if not present.",
                            "type": "string"
                          },
                          "sortOrder": {
                            "default": "desc",
                            "description": "The sorting order by the selected column (count by default).",
                            "enum": [
                              "asc",
                              "desc"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "FacetSortOrder"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "expression"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "managementGroups": {
                  "description": "Azure management groups against which to execute the query. Example: [ 'mg1', 'mg2' ]",
                  "items": {
                    "description": "The name of Management group.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "options": {
                  "description": "The options for query evaluation",
                  "properties": {
                    "$skip": {
                      "description": "The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.",
                      "format": "int32",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "$skipToken": {
                      "description": "Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.",
                      "type": "string"
                    },
                    "$top": {
                      "description": "The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "allowPartialScopes": {
                      "default": false,
                      "description": "Only applicable for tenant and management group level queries to decide whether to allow partial scopes for result in case the number of subscriptions exceed allowed limits.",
                      "type": "boolean"
                    },
                    "authorizationScopeFilter": {
                      "default": "AtScopeAndBelow",
                      "description": "Defines what level of authorization resources should be returned based on the which subscriptions and management groups are passed as scopes.",
                      "enum": [
                        "AtScopeAndBelow",
                        "AtScopeAndAbove",
                        "AtScopeExact",
                        "AtScopeAboveAndBelow"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AuthorizationScopeFilter"
                      }
                    },
                    "resultFormat": {
                      "default": "objectArray",
                      "description": "Defines in which format query result returned.",
                      "enum": [
                        "table",
                        "objectArray"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ResultFormat"
                      }
                    }
                  }
                },
                "query": {
                  "description": "The resources query.",
                  "type": "string"
                },
                "subscriptions": {
                  "description": "Azure subscriptions against which to execute the query.",
                  "items": {
                    "description": "Subscription Id.",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryRequest"
          },
          {
            "oldValue": {
              "description": "The options for query evaluation",
              "properties": {
                "$skip": {
                  "description": "The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "$skipToken": {
                  "description": "Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.",
                  "type": "string"
                },
                "$top": {
                  "description": "The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.",
                  "format": "int32",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "allowPartialScopes": {
                  "default": false,
                  "description": "Only applicable for tenant and management group level queries to decide whether to allow partial scopes for result in case the number of subscriptions exceed allowed limits.",
                  "type": "boolean"
                },
                "authorizationScopeFilter": {
                  "default": "AtScopeAndBelow",
                  "description": "Defines what level of authorization resources should be returned based on the which subscriptions and management groups are passed as scopes.",
                  "enum": [
                    "AtScopeAndBelow",
                    "AtScopeAndAbove",
                    "AtScopeExact",
                    "AtScopeAboveAndBelow"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AuthorizationScopeFilter"
                  }
                },
                "resultFormat": {
                  "default": "objectArray",
                  "description": "Defines in which format query result returned.",
                  "enum": [
                    "table",
                    "objectArray"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ResultFormat"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryRequestOptions"
          },
          {
            "oldValue": {
              "description": "Query result.",
              "properties": {
                "$skipToken": {
                  "description": "When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current request) to retrieve the next page of data.",
                  "type": "string"
                },
                "count": {
                  "description": "Number of records returned in the current response. In the case of paging, this is the number of records in the current page.",
                  "format": "int64",
                  "type": "integer"
                },
                "data": {
                  "description": "Query output in JObject array or Table format.",
                  "type": "object"
                },
                "facets": {
                  "description": "Query facets.",
                  "items": {
                    "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                    "discriminator": "resultType",
                    "properties": {
                      "expression": {
                        "description": "Facet expression, same as in the corresponding facet request.",
                        "type": "string"
                      },
                      "resultType": {
                        "description": "Result type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "expression",
                      "resultType"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "resultTruncated": {
                  "description": "Indicates whether the query results are truncated.",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ResultTruncated"
                  }
                },
                "totalRecords": {
                  "description": "Number of total records matching the query.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "totalRecords",
                "count",
                "resultTruncated",
                "data"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Paged Report records list representation.",
              "properties": {
                "count": {
                  "description": "Total record count number across all pages.",
                  "format": "int64",
                  "type": "integer"
                },
                "nextLink": {
                  "description": "Next page link if any.",
                  "type": "string"
                },
                "value": {
                  "description": "Page values.",
                  "items": {
                    "description": "Report data.",
                    "properties": {
                      "apiId": {
                        "description": "API identifier path. /apis/{apiId}",
                        "type": "string"
                      },
                      "apiRegion": {
                        "description": "API region identifier.",
                        "type": "string"
                      },
                      "apiTimeAvg": {
                        "description": "Average time it took to process request.",
                        "format": "double",
                        "type": "number"
                      },
                      "apiTimeMax": {
                        "description": "Maximum time it took to process request.",
                        "format": "double",
                        "type": "number"
                      },
                      "apiTimeMin": {
                        "description": "Minimum time it took to process request.",
                        "format": "double",
                        "type": "number"
                      },
                      "bandwidth": {
                        "description": "Bandwidth consumed.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "cacheHitCount": {
                        "description": "Number of times when content was served from cache policy.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "cacheMissCount": {
                        "description": "Number of times content was fetched from backend.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "callCountBlocked": {
                        "description": "Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests",
                        "format": "int32",
                        "type": "integer"
                      },
                      "callCountFailed": {
                        "description": "Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600",
                        "format": "int32",
                        "type": "integer"
                      },
                      "callCountOther": {
                        "description": "Number of other calls.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "callCountSuccess": {
                        "description": "Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect",
                        "format": "int32",
                        "type": "integer"
                      },
                      "callCountTotal": {
                        "description": "Total number of calls.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "country": {
                        "description": "Country to which this record data is related.",
                        "type": "string"
                      },
                      "interval": {
                        "description": "Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name depending on report endpoint specifies product, API, operation or developer name.",
                        "type": "string"
                      },
                      "operationId": {
                        "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                        "type": "string"
                      },
                      "productId": {
                        "description": "Product identifier path. /products/{productId}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "region": {
                        "description": "Country region to which this record data is related.",
                        "type": "string"
                      },
                      "serviceTimeAvg": {
                        "description": "Average time it took to process request on backend.",
                        "format": "double",
                        "type": "number"
                      },
                      "serviceTimeMax": {
                        "description": "Maximum time it took to process request on backend.",
                        "format": "double",
                        "type": "number"
                      },
                      "serviceTimeMin": {
                        "description": "Minimum time it took to process request on backend.",
                        "format": "double",
                        "type": "number"
                      },
                      "subscriptionId": {
                        "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                        "format": "date-time",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User identifier path. /users/{userId}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "zip": {
                        "description": "Zip code to which this record data is related.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReportCollection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Report data.",
              "properties": {
                "apiId": {
                  "description": "API identifier path. /apis/{apiId}",
                  "type": "string"
                },
                "apiRegion": {
                  "description": "API region identifier.",
                  "type": "string"
                },
                "apiTimeAvg": {
                  "description": "Average time it took to process request.",
                  "format": "double",
                  "type": "number"
                },
                "apiTimeMax": {
                  "description": "Maximum time it took to process request.",
                  "format": "double",
                  "type": "number"
                },
                "apiTimeMin": {
                  "description": "Minimum time it took to process request.",
                  "format": "double",
                  "type": "number"
                },
                "bandwidth": {
                  "description": "Bandwidth consumed.",
                  "format": "int64",
                  "type": "integer"
                },
                "cacheHitCount": {
                  "description": "Number of times when content was served from cache policy.",
                  "format": "int32",
                  "type": "integer"
                },
                "cacheMissCount": {
                  "description": "Number of times content was fetched from backend.",
                  "format": "int32",
                  "type": "integer"
                },
                "callCountBlocked": {
                  "description": "Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests",
                  "format": "int32",
                  "type": "integer"
                },
                "callCountFailed": {
                  "description": "Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600",
                  "format": "int32",
                  "type": "integer"
                },
                "callCountOther": {
                  "description": "Number of other calls.",
                  "format": "int32",
                  "type": "integer"
                },
                "callCountSuccess": {
                  "description": "Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect",
                  "format": "int32",
                  "type": "integer"
                },
                "callCountTotal": {
                  "description": "Total number of calls.",
                  "format": "int32",
                  "type": "integer"
                },
                "country": {
                  "description": "Country to which this record data is related.",
                  "type": "string"
                },
                "interval": {
                  "description": "Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).",
                  "type": "string"
                },
                "name": {
                  "description": "Name depending on report endpoint specifies product, API, operation or developer name.",
                  "type": "string"
                },
                "operationId": {
                  "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                  "type": "string"
                },
                "productId": {
                  "description": "Product identifier path. /products/{productId}",
                  "readOnly": true,
                  "type": "string"
                },
                "region": {
                  "description": "Country region to which this record data is related.",
                  "type": "string"
                },
                "serviceTimeAvg": {
                  "description": "Average time it took to process request on backend.",
                  "format": "double",
                  "type": "number"
                },
                "serviceTimeMax": {
                  "description": "Maximum time it took to process request on backend.",
                  "format": "double",
                  "type": "number"
                },
                "serviceTimeMin": {
                  "description": "Minimum time it took to process request on backend.",
                  "format": "double",
                  "type": "number"
                },
                "subscriptionId": {
                  "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "userId": {
                  "description": "User identifier path. /users/{userId}",
                  "readOnly": true,
                  "type": "string"
                },
                "zip": {
                  "description": "Zip code to which this record data is related.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReportRecordContract"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Paged Report records list representation.",
              "properties": {
                "count": {
                  "description": "Total record count number across all pages.",
                  "format": "int64",
                  "type": "integer"
                },
                "value": {
                  "description": "Page values.",
                  "items": {
                    "description": "Request Report data.",
                    "properties": {
                      "apiId": {
                        "description": "API identifier path. /apis/{apiId}",
                        "type": "string"
                      },
                      "apiRegion": {
                        "description": "Azure region where the gateway that processed this request is located.",
                        "type": "string"
                      },
                      "apiTime": {
                        "description": "The total time it took to process this request.",
                        "format": "double",
                        "type": "number"
                      },
                      "backendResponseCode": {
                        "description": "The HTTP status code received by the gateway as a result of forwarding this request to the backend.",
                        "type": "string"
                      },
                      "cache": {
                        "description": "Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.",
                        "type": "string"
                      },
                      "ipAddress": {
                        "description": "The client IP address associated with this request.",
                        "type": "string"
                      },
                      "method": {
                        "description": "The HTTP method associated with this request..",
                        "type": "string"
                      },
                      "operationId": {
                        "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                        "type": "string"
                      },
                      "productId": {
                        "description": "Product identifier path. /products/{productId}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "requestId": {
                        "description": "Request Identifier.",
                        "type": "string"
                      },
                      "requestSize": {
                        "description": "The size of this request..",
                        "format": "int32",
                        "type": "integer"
                      },
                      "responseCode": {
                        "description": "The HTTP status code returned by the gateway.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "responseSize": {
                        "description": "The size of the response returned by the gateway.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "serviceTime": {
                        "description": "he time it took to forward this request to the backend and get the response back.",
                        "format": "double",
                        "type": "number"
                      },
                      "subscriptionId": {
                        "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "The date and time when this request was received by the gateway in ISO 8601 format.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "url": {
                        "description": "The full URL associated with this request.",
                        "type": "string"
                      },
                      "userId": {
                        "description": "User identifier path. /users/{userId}",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RequestReportCollection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Request Report data.",
              "properties": {
                "apiId": {
                  "description": "API identifier path. /apis/{apiId}",
                  "type": "string"
                },
                "apiRegion": {
                  "description": "Azure region where the gateway that processed this request is located.",
                  "type": "string"
                },
                "apiTime": {
                  "description": "The total time it took to process this request.",
                  "format": "double",
                  "type": "number"
                },
                "backendResponseCode": {
                  "description": "The HTTP status code received by the gateway as a result of forwarding this request to the backend.",
                  "type": "string"
                },
                "cache": {
                  "description": "Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.",
                  "type": "string"
                },
                "ipAddress": {
                  "description": "The client IP address associated with this request.",
                  "type": "string"
                },
                "method": {
                  "description": "The HTTP method associated with this request..",
                  "type": "string"
                },
                "operationId": {
                  "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                  "type": "string"
                },
                "productId": {
                  "description": "Product identifier path. /products/{productId}",
                  "readOnly": true,
                  "type": "string"
                },
                "requestId": {
                  "description": "Request Identifier.",
                  "type": "string"
                },
                "requestSize": {
                  "description": "The size of this request..",
                  "format": "int32",
                  "type": "integer"
                },
                "responseCode": {
                  "description": "The HTTP status code returned by the gateway.",
                  "format": "int32",
                  "type": "integer"
                },
                "responseSize": {
                  "description": "The size of the response returned by the gateway.",
                  "format": "int32",
                  "type": "integer"
                },
                "serviceTime": {
                  "description": "he time it took to forward this request to the backend and get the response back.",
                  "format": "double",
                  "type": "number"
                },
                "subscriptionId": {
                  "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                  "type": "string"
                },
                "timestamp": {
                  "description": "The date and time when this request was received by the gateway in ISO 8601 format.",
                  "format": "date-time",
                  "type": "string"
                },
                "url": {
                  "description": "The full URL associated with this request.",
                  "type": "string"
                },
                "userId": {
                  "description": "User identifier path. /users/{userId}",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RequestReportRecordContract"
          },
          {
            "oldValue": {
              "description": "Query result row.",
              "items": {
                "description": "Cell value.",
                "type": "object"
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Row"
          },
          {
            "oldValue": {
              "description": "Query output in tabular format.",
              "properties": {
                "columns": {
                  "description": "Query result column descriptors.",
                  "items": {
                    "description": "Query result column descriptor.",
                    "properties": {
                      "name": {
                        "description": "Column name.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Data type of a column in a table.",
                        "enum": [
                          "string",
                          "integer",
                          "number",
                          "boolean",
                          "object",
                          "datetime"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ColumnDataType"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "rows": {
                  "description": "Query result rows.",
                  "items": {
                    "description": "Query result row.",
                    "items": {
                      "description": "Cell value.",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "required": [
                "columns",
                "rows"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Table"
          }
        ],
        "parameters": [
          {
            "oldValue": {
              "description": "Api Version.",
              "in": "query",
              "name": "api-version",
              "required": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApiVersionParameter"
          }
        ],
        "securityDefinitions": [
          {
            "oldValue": "Azure Active Directory OAuth2 Flow",
            "value": "Azure Active Directory OAuth2 Flow.",
            "op": "replace",
            "from": "",
            "path": "/azure_auth/description"
          }
        ]
      }
    },
    "info": {
      "title": {
        "from": "Azure Resource Graph",
        "to": "ApiManagementClient"
      },
      "description": {
        "from": "Azure Resource Graph API Reference",
        "to": "Use these REST APIs to get the analytics reports associated with your Azure API Management deployment."
      },
      "version": {
        "from": "2022-10-01",
        "to": "2017-03-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byRequest",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/bySubscription",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byUser",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byApi",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byGeo",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byOperation",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byProduct"
      ],
      "deleted": [
        "/providers/Microsoft.ResourceGraph/operations",
        "/providers/Microsoft.ResourceGraph/resources"
      ]
    }
  },
  "tools_a": {
    "Resources": "FunctionDef(\n  name='Resources',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Resources')),\n        keyword(\n          arg='description',\n          value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.'))])],\n  type_params=[])",
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available REST API operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available REST API operations.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Resources": "FunctionDef(\n  name='Resources',\n  args=arguments(\n    posonlyargs=[],\n    args=[],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Resources')),\n        keyword(\n          arg='description',\n          value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.'))])],\n  type_params=[])",
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available REST API operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available REST API operations.'))])],\n  type_params=[])"
  }
}