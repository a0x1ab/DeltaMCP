{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "description": "Defines the action to take on rule match.",
              "enum": [
                "Allow",
                "Block",
                "Log",
                "Redirect"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ActionType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ActionType"
          },
          {
            "oldValue": {
              "description": "Defines contents of a web application rule",
              "properties": {
                "action": {
                  "description": "Defines the action to take on rule match.",
                  "enum": [
                    "Allow",
                    "Block",
                    "Log",
                    "Redirect"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ActionType"
                  }
                },
                "enabledState": {
                  "description": "Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CustomRuleEnabledState"
                  }
                },
                "matchConditions": {
                  "description": "List of match conditions.",
                  "items": {
                    "description": "Define a match condition.",
                    "properties": {
                      "matchValue": {
                        "description": "List of possible match values.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "matchVariable": {
                        "description": "Request variable to compare with.",
                        "enum": [
                          "RemoteAddr",
                          "RequestMethod",
                          "QueryString",
                          "PostArgs",
                          "RequestUri",
                          "RequestHeader",
                          "RequestBody",
                          "Cookies",
                          "SocketAddr"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "MatchVariable"
                        }
                      },
                      "negateCondition": {
                        "description": "Describes if the result of this condition should be negated.",
                        "type": "boolean"
                      },
                      "operator": {
                        "description": "Comparison type to use for matching with the variable value.",
                        "enum": [
                          "Any",
                          "IPMatch",
                          "GeoMatch",
                          "Equal",
                          "Contains",
                          "LessThan",
                          "GreaterThan",
                          "LessThanOrEqual",
                          "GreaterThanOrEqual",
                          "BeginsWith",
                          "EndsWith",
                          "RegEx"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "Operator"
                        }
                      },
                      "selector": {
                        "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                        "type": "string"
                      },
                      "transforms": {
                        "description": "List of transforms.",
                        "items": {
                          "description": "Describes what transforms applied before matching.",
                          "enum": [
                            "Lowercase",
                            "Uppercase",
                            "Trim",
                            "UrlDecode",
                            "UrlEncode",
                            "RemoveNulls"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "TransformType"
                          }
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "matchVariable",
                      "operator",
                      "matchValue"
                    ]
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Describes the name of the rule.",
                  "maxLength": 128,
                  "type": "string"
                },
                "priority": {
                  "description": "Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
                  "type": "integer"
                },
                "rateLimitDurationInMinutes": {
                  "description": "Time window for resetting the rate limit count. Default is 1 minute.",
                  "maximum": 5,
                  "minimum": 0,
                  "type": "integer"
                },
                "rateLimitThreshold": {
                  "description": "Number of allowed requests per client within the time window.",
                  "minimum": 0,
                  "type": "integer"
                },
                "ruleType": {
                  "description": "Describes type of rule.",
                  "enum": [
                    "MatchRule",
                    "RateLimitRule"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "RuleType"
                  }
                }
              },
              "required": [
                "priority",
                "ruleType",
                "matchConditions",
                "action"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CustomRule"
          },
          {
            "oldValue": {
              "description": "Defines contents of custom rules",
              "properties": {
                "rules": {
                  "description": "List of rules",
                  "items": {
                    "description": "Defines contents of a web application rule",
                    "properties": {
                      "action": {
                        "description": "Defines the action to take on rule match.",
                        "enum": [
                          "Allow",
                          "Block",
                          "Log",
                          "Redirect"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ActionType"
                        }
                      },
                      "enabledState": {
                        "description": "Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
                        "enum": [
                          "Disabled",
                          "Enabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "CustomRuleEnabledState"
                        }
                      },
                      "matchConditions": {
                        "description": "List of match conditions.",
                        "items": {
                          "description": "Define a match condition.",
                          "properties": {
                            "matchValue": {
                              "description": "List of possible match values.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "matchVariable": {
                              "description": "Request variable to compare with.",
                              "enum": [
                                "RemoteAddr",
                                "RequestMethod",
                                "QueryString",
                                "PostArgs",
                                "RequestUri",
                                "RequestHeader",
                                "RequestBody",
                                "Cookies",
                                "SocketAddr"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "MatchVariable"
                              }
                            },
                            "negateCondition": {
                              "description": "Describes if the result of this condition should be negated.",
                              "type": "boolean"
                            },
                            "operator": {
                              "description": "Comparison type to use for matching with the variable value.",
                              "enum": [
                                "Any",
                                "IPMatch",
                                "GeoMatch",
                                "Equal",
                                "Contains",
                                "LessThan",
                                "GreaterThan",
                                "LessThanOrEqual",
                                "GreaterThanOrEqual",
                                "BeginsWith",
                                "EndsWith",
                                "RegEx"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "Operator"
                              }
                            },
                            "selector": {
                              "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                              "type": "string"
                            },
                            "transforms": {
                              "description": "List of transforms.",
                              "items": {
                                "description": "Describes what transforms applied before matching.",
                                "enum": [
                                  "Lowercase",
                                  "Uppercase",
                                  "Trim",
                                  "UrlDecode",
                                  "UrlEncode",
                                  "RemoveNulls"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "TransformType"
                                }
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "matchVariable",
                            "operator",
                            "matchValue"
                          ]
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "Describes the name of the rule.",
                        "maxLength": 128,
                        "type": "string"
                      },
                      "priority": {
                        "description": "Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
                        "type": "integer"
                      },
                      "rateLimitDurationInMinutes": {
                        "description": "Time window for resetting the rate limit count. Default is 1 minute.",
                        "maximum": 5,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "rateLimitThreshold": {
                        "description": "Number of allowed requests per client within the time window.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "ruleType": {
                        "description": "Describes type of rule.",
                        "enum": [
                          "MatchRule",
                          "RateLimitRule"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "RuleType"
                        }
                      }
                    },
                    "required": [
                      "priority",
                      "ruleType",
                      "matchConditions",
                      "action"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CustomRuleList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the endpoint properties",
              "properties": {
                "endpoint": {
                  "description": "The endpoint URL",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the endpoint",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Endpoint"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines the properties of an Experiment",
              "properties": {
                "name": {
                  "description": "The name of the Experiment",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Defines the properties of an experiment",
                  "properties": {
                    "description": {
                      "description": "The description of the details or intents of the Experiment",
                      "type": "string"
                    },
                    "enabledState": {
                      "description": "The state of the Experiment",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "state"
                      }
                    },
                    "endpointA": {
                      "description": "Defines the endpoint properties",
                      "properties": {
                        "endpoint": {
                          "description": "The endpoint URL",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the endpoint",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "endpointB": {
                      "description": "Defines the endpoint properties",
                      "properties": {
                        "endpoint": {
                          "description": "The endpoint URL",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the endpoint",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "resourceState": {
                      "description": "Defines the server side resource status",
                      "enum": [
                        "Creating",
                        "Enabling",
                        "Enabled",
                        "Disabling",
                        "Disabled",
                        "Deleting"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "NetworkExperimentResourceState"
                      }
                    },
                    "scriptFileUri": {
                      "description": "The uri to the Script used in the Experiment",
                      "readOnly": true,
                      "type": "string"
                    },
                    "status": {
                      "description": "The description of Experiment status from the server side",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Experiment"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines a list of Experiments. It contains a list of Experiment objects and a URL link to get the next set of results.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of Experiment objects if there are any.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Experiments within a resource group.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Common resource representation.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "Defines the properties of an Experiment",
                    "properties": {
                      "name": {
                        "description": "The name of the Experiment",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Defines the properties of an experiment",
                        "properties": {
                          "description": {
                            "description": "The description of the details or intents of the Experiment",
                            "type": "string"
                          },
                          "enabledState": {
                            "description": "The state of the Experiment",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "state"
                            }
                          },
                          "endpointA": {
                            "description": "Defines the endpoint properties",
                            "properties": {
                              "endpoint": {
                                "description": "The endpoint URL",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the endpoint",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "endpointB": {
                            "description": "Defines the endpoint properties",
                            "properties": {
                              "endpoint": {
                                "description": "The endpoint URL",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the endpoint",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "resourceState": {
                            "description": "Defines the server side resource status",
                            "enum": [
                              "Creating",
                              "Enabling",
                              "Enabled",
                              "Disabling",
                              "Disabled",
                              "Deleting"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "NetworkExperimentResourceState"
                            }
                          },
                          "scriptFileUri": {
                            "description": "The uri to the Script used in the Experiment",
                            "readOnly": true,
                            "type": "string"
                          },
                          "status": {
                            "description": "The description of Experiment status from the server side",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ExperimentList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of an experiment",
              "properties": {
                "description": {
                  "description": "The description of the details or intents of the Experiment",
                  "type": "string"
                },
                "enabledState": {
                  "description": "The state of the Experiment",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "state"
                  }
                },
                "endpointA": {
                  "description": "Defines the endpoint properties",
                  "properties": {
                    "endpoint": {
                      "description": "The endpoint URL",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the endpoint",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "endpointB": {
                  "description": "Defines the endpoint properties",
                  "properties": {
                    "endpoint": {
                      "description": "The endpoint URL",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the endpoint",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "resourceState": {
                  "description": "Defines the server side resource status",
                  "enum": [
                    "Creating",
                    "Enabling",
                    "Enabled",
                    "Disabling",
                    "Disabled",
                    "Deleting"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "NetworkExperimentResourceState"
                  }
                },
                "scriptFileUri": {
                  "description": "The uri to the Script used in the Experiment",
                  "readOnly": true,
                  "type": "string"
                },
                "status": {
                  "description": "The description of Experiment status from the server side",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ExperimentProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines modifiable attributes of an Experiment",
              "properties": {
                "properties": {
                  "description": "Defines the properties of an experiment",
                  "properties": {
                    "description": {
                      "description": "The description of the intent or details of the Experiment",
                      "type": "string"
                    },
                    "enabledState": {
                      "description": "The state of the Experiment",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "state"
                      }
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ExperimentUpdateModel"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of an experiment",
              "properties": {
                "description": {
                  "description": "The description of the intent or details of the Experiment",
                  "type": "string"
                },
                "enabledState": {
                  "description": "The state of the Experiment",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "state"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ExperimentUpdateProperties"
          },
          {
            "oldValue": {
              "description": "Defines the Resource ID for a Frontend Endpoint.",
              "properties": {
                "id": {
                  "description": "Resource ID.",
                  "type": "string"
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FrontendEndpointLink"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of a latency metric used in the latency scorecard",
              "properties": {
                "aCLower95CI": {
                  "description": "The lower end of the 95% confidence interval for endpoint A",
                  "readOnly": true,
                  "type": "number"
                },
                "aHUpper95CI": {
                  "description": "The upper end of the 95% confidence interval for endpoint A",
                  "readOnly": true,
                  "type": "number"
                },
                "aValue": {
                  "description": "The metric value of the A endpoint",
                  "readOnly": true,
                  "type": "number"
                },
                "bCLower95CI": {
                  "description": "The lower end of the 95% confidence interval for endpoint B",
                  "readOnly": true,
                  "type": "number"
                },
                "bUpper95CI": {
                  "description": "The upper end of the 95% confidence interval for endpoint B",
                  "readOnly": true,
                  "type": "number"
                },
                "bValue": {
                  "description": "The metric value of the B endpoint",
                  "readOnly": true,
                  "type": "number"
                },
                "delta": {
                  "description": "The difference in value between endpoint A and B",
                  "readOnly": true,
                  "type": "number"
                },
                "deltaPercent": {
                  "description": "The percent difference between endpoint A and B",
                  "readOnly": true,
                  "type": "number"
                },
                "endDateTimeUTC": {
                  "description": "The end time of the Latency Scorecard in UTC",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Latency Metric",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/LatencyMetric"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines the LatencyScorecard",
              "properties": {
                "properties": {
                  "description": "Defines a the properties of a Latency Scorecard",
                  "properties": {
                    "country": {
                      "description": "The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html",
                      "readOnly": true,
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the Latency Scorecard",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endDateTimeUTC": {
                      "description": "The end time of the Latency Scorecard in UTC",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endpointA": {
                      "description": "The A endpoint in the scorecard",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endpointB": {
                      "description": "The B endpoint in the scorecard",
                      "readOnly": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique identifier of the Latency Scorecard",
                      "readOnly": true,
                      "type": "string"
                    },
                    "latencyMetrics": {
                      "description": "The latency metrics of the Latency Scorecard",
                      "items": {
                        "description": "Defines the properties of a latency metric used in the latency scorecard",
                        "properties": {
                          "aCLower95CI": {
                            "description": "The lower end of the 95% confidence interval for endpoint A",
                            "readOnly": true,
                            "type": "number"
                          },
                          "aHUpper95CI": {
                            "description": "The upper end of the 95% confidence interval for endpoint A",
                            "readOnly": true,
                            "type": "number"
                          },
                          "aValue": {
                            "description": "The metric value of the A endpoint",
                            "readOnly": true,
                            "type": "number"
                          },
                          "bCLower95CI": {
                            "description": "The lower end of the 95% confidence interval for endpoint B",
                            "readOnly": true,
                            "type": "number"
                          },
                          "bUpper95CI": {
                            "description": "The upper end of the 95% confidence interval for endpoint B",
                            "readOnly": true,
                            "type": "number"
                          },
                          "bValue": {
                            "description": "The metric value of the B endpoint",
                            "readOnly": true,
                            "type": "number"
                          },
                          "delta": {
                            "description": "The difference in value between endpoint A and B",
                            "readOnly": true,
                            "type": "number"
                          },
                          "deltaPercent": {
                            "description": "The percent difference between endpoint A and B",
                            "readOnly": true,
                            "type": "number"
                          },
                          "endDateTimeUTC": {
                            "description": "The end time of the Latency Scorecard in UTC",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Latency Metric",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "description": "The name of the Latency Scorecard",
                      "readOnly": true,
                      "type": "string"
                    },
                    "startDateTimeUTC": {
                      "description": "The start time of the Latency Scorecard in UTC",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/LatencyScorecard"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines a the properties of a Latency Scorecard",
              "properties": {
                "country": {
                  "description": "The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html",
                  "readOnly": true,
                  "type": "string"
                },
                "description": {
                  "description": "The description of the Latency Scorecard",
                  "readOnly": true,
                  "type": "string"
                },
                "endDateTimeUTC": {
                  "description": "The end time of the Latency Scorecard in UTC",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "endpointA": {
                  "description": "The A endpoint in the scorecard",
                  "readOnly": true,
                  "type": "string"
                },
                "endpointB": {
                  "description": "The B endpoint in the scorecard",
                  "readOnly": true,
                  "type": "string"
                },
                "id": {
                  "description": "The unique identifier of the Latency Scorecard",
                  "readOnly": true,
                  "type": "string"
                },
                "latencyMetrics": {
                  "description": "The latency metrics of the Latency Scorecard",
                  "items": {
                    "description": "Defines the properties of a latency metric used in the latency scorecard",
                    "properties": {
                      "aCLower95CI": {
                        "description": "The lower end of the 95% confidence interval for endpoint A",
                        "readOnly": true,
                        "type": "number"
                      },
                      "aHUpper95CI": {
                        "description": "The upper end of the 95% confidence interval for endpoint A",
                        "readOnly": true,
                        "type": "number"
                      },
                      "aValue": {
                        "description": "The metric value of the A endpoint",
                        "readOnly": true,
                        "type": "number"
                      },
                      "bCLower95CI": {
                        "description": "The lower end of the 95% confidence interval for endpoint B",
                        "readOnly": true,
                        "type": "number"
                      },
                      "bUpper95CI": {
                        "description": "The upper end of the 95% confidence interval for endpoint B",
                        "readOnly": true,
                        "type": "number"
                      },
                      "bValue": {
                        "description": "The metric value of the B endpoint",
                        "readOnly": true,
                        "type": "number"
                      },
                      "delta": {
                        "description": "The difference in value between endpoint A and B",
                        "readOnly": true,
                        "type": "number"
                      },
                      "deltaPercent": {
                        "description": "The percent difference between endpoint A and B",
                        "readOnly": true,
                        "type": "number"
                      },
                      "endDateTimeUTC": {
                        "description": "The end time of the Latency Scorecard in UTC",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Latency Metric",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The name of the Latency Scorecard",
                  "readOnly": true,
                  "type": "string"
                },
                "startDateTimeUTC": {
                  "description": "The start time of the Latency Scorecard in UTC",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/LatencyScorecardProperties"
          },
          {
            "oldValue": {
              "description": "Describes a managed rule definition.",
              "properties": {
                "defaultAction": {
                  "description": "Defines the action to take on rule match.",
                  "enum": [
                    "Allow",
                    "Block",
                    "Log",
                    "Redirect"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ActionType"
                  }
                },
                "defaultState": {
                  "description": "Describes if the managed rule is in enabled or disabled state.",
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ManagedRuleEnabledState"
                  }
                },
                "description": {
                  "description": "Describes the functionality of the managed rule.",
                  "readOnly": true,
                  "type": "string"
                },
                "ruleId": {
                  "description": "Identifier for the managed rule.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleDefinition"
          },
          {
            "oldValue": {
              "description": "Describes if the managed rule is in enabled or disabled state.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ManagedRuleEnabledState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleEnabledState"
          },
          {
            "oldValue": {
              "description": "Exclude variables from managed rule evaluation.",
              "properties": {
                "matchVariable": {
                  "description": "The variable type to be excluded.",
                  "enum": [
                    "RequestHeaderNames",
                    "RequestCookieNames",
                    "QueryStringArgNames",
                    "RequestBodyPostArgNames"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ManagedRuleExclusionMatchVariable"
                  }
                },
                "selector": {
                  "description": "Selector value for which elements in the collection this exclusion applies to.",
                  "type": "string"
                },
                "selectorMatchOperator": {
                  "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                  "enum": [
                    "Equals",
                    "Contains",
                    "StartsWith",
                    "EndsWith",
                    "EqualsAny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ManagedRuleExclusionSelectorMatchOperator"
                  }
                }
              },
              "required": [
                "matchVariable",
                "selectorMatchOperator",
                "selector"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleExclusion"
          },
          {
            "oldValue": {
              "description": "Describes a managed rule group.",
              "properties": {
                "description": {
                  "description": "Description of the managed rule group.",
                  "readOnly": true,
                  "type": "string"
                },
                "ruleGroupName": {
                  "description": "Name of the managed rule group.",
                  "readOnly": true,
                  "type": "string"
                },
                "rules": {
                  "description": "List of rules within the managed rule group.",
                  "items": {
                    "description": "Describes a managed rule definition.",
                    "properties": {
                      "defaultAction": {
                        "description": "Defines the action to take on rule match.",
                        "enum": [
                          "Allow",
                          "Block",
                          "Log",
                          "Redirect"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ActionType"
                        }
                      },
                      "defaultState": {
                        "description": "Describes if the managed rule is in enabled or disabled state.",
                        "enum": [
                          "Disabled",
                          "Enabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleEnabledState"
                        }
                      },
                      "description": {
                        "description": "Describes the functionality of the managed rule.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "ruleId": {
                        "description": "Identifier for the managed rule.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleGroupDefinition"
          },
          {
            "oldValue": {
              "description": "Defines a managed rule group override setting.",
              "properties": {
                "exclusions": {
                  "description": "Describes the exclusions that are applied to all rules in the group.",
                  "items": {
                    "description": "Exclude variables from managed rule evaluation.",
                    "properties": {
                      "matchVariable": {
                        "description": "The variable type to be excluded.",
                        "enum": [
                          "RequestHeaderNames",
                          "RequestCookieNames",
                          "QueryStringArgNames",
                          "RequestBodyPostArgNames"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionMatchVariable"
                        }
                      },
                      "selector": {
                        "description": "Selector value for which elements in the collection this exclusion applies to.",
                        "type": "string"
                      },
                      "selectorMatchOperator": {
                        "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                        "enum": [
                          "Equals",
                          "Contains",
                          "StartsWith",
                          "EndsWith",
                          "EqualsAny"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionSelectorMatchOperator"
                        }
                      }
                    },
                    "required": [
                      "matchVariable",
                      "selectorMatchOperator",
                      "selector"
                    ]
                  },
                  "type": "array"
                },
                "ruleGroupName": {
                  "description": "Describes the managed rule group to override.",
                  "type": "string"
                },
                "rules": {
                  "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                  "items": {
                    "description": "Defines a managed rule group override setting.",
                    "properties": {
                      "action": {
                        "description": "Defines the action to take on rule match.",
                        "enum": [
                          "Allow",
                          "Block",
                          "Log",
                          "Redirect"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ActionType"
                        }
                      },
                      "enabledState": {
                        "description": "Describes if the managed rule is in enabled or disabled state.",
                        "enum": [
                          "Disabled",
                          "Enabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleEnabledState"
                        }
                      },
                      "exclusions": {
                        "description": "Describes the exclusions that are applied to this specific rule.",
                        "items": {
                          "description": "Exclude variables from managed rule evaluation.",
                          "properties": {
                            "matchVariable": {
                              "description": "The variable type to be excluded.",
                              "enum": [
                                "RequestHeaderNames",
                                "RequestCookieNames",
                                "QueryStringArgNames",
                                "RequestBodyPostArgNames"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionMatchVariable"
                              }
                            },
                            "selector": {
                              "description": "Selector value for which elements in the collection this exclusion applies to.",
                              "type": "string"
                            },
                            "selectorMatchOperator": {
                              "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                              "enum": [
                                "Equals",
                                "Contains",
                                "StartsWith",
                                "EndsWith",
                                "EqualsAny"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionSelectorMatchOperator"
                              }
                            }
                          },
                          "required": [
                            "matchVariable",
                            "selectorMatchOperator",
                            "selector"
                          ]
                        },
                        "type": "array"
                      },
                      "ruleId": {
                        "description": "Identifier for the managed rule.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ruleId"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "ruleGroupName"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleGroupOverride"
          },
          {
            "oldValue": {
              "description": "Defines a managed rule group override setting.",
              "properties": {
                "action": {
                  "description": "Defines the action to take on rule match.",
                  "enum": [
                    "Allow",
                    "Block",
                    "Log",
                    "Redirect"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ActionType"
                  }
                },
                "enabledState": {
                  "description": "Describes if the managed rule is in enabled or disabled state.",
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ManagedRuleEnabledState"
                  }
                },
                "exclusions": {
                  "description": "Describes the exclusions that are applied to this specific rule.",
                  "items": {
                    "description": "Exclude variables from managed rule evaluation.",
                    "properties": {
                      "matchVariable": {
                        "description": "The variable type to be excluded.",
                        "enum": [
                          "RequestHeaderNames",
                          "RequestCookieNames",
                          "QueryStringArgNames",
                          "RequestBodyPostArgNames"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionMatchVariable"
                        }
                      },
                      "selector": {
                        "description": "Selector value for which elements in the collection this exclusion applies to.",
                        "type": "string"
                      },
                      "selectorMatchOperator": {
                        "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                        "enum": [
                          "Equals",
                          "Contains",
                          "StartsWith",
                          "EndsWith",
                          "EqualsAny"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionSelectorMatchOperator"
                        }
                      }
                    },
                    "required": [
                      "matchVariable",
                      "selectorMatchOperator",
                      "selector"
                    ]
                  },
                  "type": "array"
                },
                "ruleId": {
                  "description": "Identifier for the managed rule.",
                  "type": "string"
                }
              },
              "required": [
                "ruleId"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleOverride"
          },
          {
            "oldValue": {
              "description": "Defines a managed rule set.",
              "properties": {
                "exclusions": {
                  "description": "Describes the exclusions that are applied to all rules in the set.",
                  "items": {
                    "description": "Exclude variables from managed rule evaluation.",
                    "properties": {
                      "matchVariable": {
                        "description": "The variable type to be excluded.",
                        "enum": [
                          "RequestHeaderNames",
                          "RequestCookieNames",
                          "QueryStringArgNames",
                          "RequestBodyPostArgNames"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionMatchVariable"
                        }
                      },
                      "selector": {
                        "description": "Selector value for which elements in the collection this exclusion applies to.",
                        "type": "string"
                      },
                      "selectorMatchOperator": {
                        "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                        "enum": [
                          "Equals",
                          "Contains",
                          "StartsWith",
                          "EndsWith",
                          "EqualsAny"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ManagedRuleExclusionSelectorMatchOperator"
                        }
                      }
                    },
                    "required": [
                      "matchVariable",
                      "selectorMatchOperator",
                      "selector"
                    ]
                  },
                  "type": "array"
                },
                "ruleGroupOverrides": {
                  "description": "Defines the rule group overrides to apply to the rule set.",
                  "items": {
                    "description": "Defines a managed rule group override setting.",
                    "properties": {
                      "exclusions": {
                        "description": "Describes the exclusions that are applied to all rules in the group.",
                        "items": {
                          "description": "Exclude variables from managed rule evaluation.",
                          "properties": {
                            "matchVariable": {
                              "description": "The variable type to be excluded.",
                              "enum": [
                                "RequestHeaderNames",
                                "RequestCookieNames",
                                "QueryStringArgNames",
                                "RequestBodyPostArgNames"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionMatchVariable"
                              }
                            },
                            "selector": {
                              "description": "Selector value for which elements in the collection this exclusion applies to.",
                              "type": "string"
                            },
                            "selectorMatchOperator": {
                              "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                              "enum": [
                                "Equals",
                                "Contains",
                                "StartsWith",
                                "EndsWith",
                                "EqualsAny"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionSelectorMatchOperator"
                              }
                            }
                          },
                          "required": [
                            "matchVariable",
                            "selectorMatchOperator",
                            "selector"
                          ]
                        },
                        "type": "array"
                      },
                      "ruleGroupName": {
                        "description": "Describes the managed rule group to override.",
                        "type": "string"
                      },
                      "rules": {
                        "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                        "items": {
                          "description": "Defines a managed rule group override setting.",
                          "properties": {
                            "action": {
                              "description": "Defines the action to take on rule match.",
                              "enum": [
                                "Allow",
                                "Block",
                                "Log",
                                "Redirect"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ActionType"
                              }
                            },
                            "enabledState": {
                              "description": "Describes if the managed rule is in enabled or disabled state.",
                              "enum": [
                                "Disabled",
                                "Enabled"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleEnabledState"
                              }
                            },
                            "exclusions": {
                              "description": "Describes the exclusions that are applied to this specific rule.",
                              "items": {
                                "description": "Exclude variables from managed rule evaluation.",
                                "properties": {
                                  "matchVariable": {
                                    "description": "The variable type to be excluded.",
                                    "enum": [
                                      "RequestHeaderNames",
                                      "RequestCookieNames",
                                      "QueryStringArgNames",
                                      "RequestBodyPostArgNames"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedRuleExclusionMatchVariable"
                                    }
                                  },
                                  "selector": {
                                    "description": "Selector value for which elements in the collection this exclusion applies to.",
                                    "type": "string"
                                  },
                                  "selectorMatchOperator": {
                                    "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                    "enum": [
                                      "Equals",
                                      "Contains",
                                      "StartsWith",
                                      "EndsWith",
                                      "EqualsAny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedRuleExclusionSelectorMatchOperator"
                                    }
                                  }
                                },
                                "required": [
                                  "matchVariable",
                                  "selectorMatchOperator",
                                  "selector"
                                ]
                              },
                              "type": "array"
                            },
                            "ruleId": {
                              "description": "Identifier for the managed rule.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ruleId"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "ruleGroupName"
                    ]
                  },
                  "type": "array"
                },
                "ruleSetType": {
                  "description": "Defines the rule set type to use.",
                  "type": "string"
                },
                "ruleSetVersion": {
                  "description": "Defines the version of the rule set to use.",
                  "type": "string"
                }
              },
              "required": [
                "ruleSetType",
                "ruleSetVersion"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleSet"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Describes the a managed rule set definition.",
              "properties": {
                "properties": {
                  "description": "Properties for a managed rule set definition.",
                  "properties": {
                    "provisioningState": {
                      "description": "Provisioning state of the managed rule set.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ruleGroups": {
                      "description": "Rule groups of the managed rule set.",
                      "items": {
                        "description": "Describes a managed rule group.",
                        "properties": {
                          "description": {
                            "description": "Description of the managed rule group.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "ruleGroupName": {
                            "description": "Name of the managed rule group.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "rules": {
                            "description": "List of rules within the managed rule group.",
                            "items": {
                              "description": "Describes a managed rule definition.",
                              "properties": {
                                "defaultAction": {
                                  "description": "Defines the action to take on rule match.",
                                  "enum": [
                                    "Allow",
                                    "Block",
                                    "Log",
                                    "Redirect"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ActionType"
                                  }
                                },
                                "defaultState": {
                                  "description": "Describes if the managed rule is in enabled or disabled state.",
                                  "enum": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ManagedRuleEnabledState"
                                  }
                                },
                                "description": {
                                  "description": "Describes the functionality of the managed rule.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "ruleId": {
                                  "description": "Identifier for the managed rule.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "ruleSetId": {
                      "description": "Id of the managed rule set.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ruleSetType": {
                      "description": "Type of the managed rule set.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ruleSetVersion": {
                      "description": "Version of the managed rule set type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleSetDefinition"
          },
          {
            "oldValue": {
              "description": "List of managed rule set definitions available for use in a policy.",
              "properties": {
                "nextLink": {
                  "description": "URL to retrieve next set of managed rule set definitions.",
                  "type": "string"
                },
                "value": {
                  "description": "List of managed rule set definitions.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Common resource representation.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "Describes the a managed rule set definition.",
                    "properties": {
                      "properties": {
                        "description": "Properties for a managed rule set definition.",
                        "properties": {
                          "provisioningState": {
                            "description": "Provisioning state of the managed rule set.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "ruleGroups": {
                            "description": "Rule groups of the managed rule set.",
                            "items": {
                              "description": "Describes a managed rule group.",
                              "properties": {
                                "description": {
                                  "description": "Description of the managed rule group.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "ruleGroupName": {
                                  "description": "Name of the managed rule group.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "rules": {
                                  "description": "List of rules within the managed rule group.",
                                  "items": {
                                    "description": "Describes a managed rule definition.",
                                    "properties": {
                                      "defaultAction": {
                                        "description": "Defines the action to take on rule match.",
                                        "enum": [
                                          "Allow",
                                          "Block",
                                          "Log",
                                          "Redirect"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ActionType"
                                        }
                                      },
                                      "defaultState": {
                                        "description": "Describes if the managed rule is in enabled or disabled state.",
                                        "enum": [
                                          "Disabled",
                                          "Enabled"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ManagedRuleEnabledState"
                                        }
                                      },
                                      "description": {
                                        "description": "Describes the functionality of the managed rule.",
                                        "readOnly": true,
                                        "type": "string"
                                      },
                                      "ruleId": {
                                        "description": "Identifier for the managed rule.",
                                        "readOnly": true,
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "type": "array"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "ruleSetId": {
                            "description": "Id of the managed rule set.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "ruleSetType": {
                            "description": "Type of the managed rule set.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "ruleSetVersion": {
                            "description": "Version of the managed rule set type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleSetDefinitionList"
          },
          {
            "oldValue": {
              "description": "Properties for a managed rule set definition.",
              "properties": {
                "provisioningState": {
                  "description": "Provisioning state of the managed rule set.",
                  "readOnly": true,
                  "type": "string"
                },
                "ruleGroups": {
                  "description": "Rule groups of the managed rule set.",
                  "items": {
                    "description": "Describes a managed rule group.",
                    "properties": {
                      "description": {
                        "description": "Description of the managed rule group.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "ruleGroupName": {
                        "description": "Name of the managed rule group.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "rules": {
                        "description": "List of rules within the managed rule group.",
                        "items": {
                          "description": "Describes a managed rule definition.",
                          "properties": {
                            "defaultAction": {
                              "description": "Defines the action to take on rule match.",
                              "enum": [
                                "Allow",
                                "Block",
                                "Log",
                                "Redirect"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ActionType"
                              }
                            },
                            "defaultState": {
                              "description": "Describes if the managed rule is in enabled or disabled state.",
                              "enum": [
                                "Disabled",
                                "Enabled"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleEnabledState"
                              }
                            },
                            "description": {
                              "description": "Describes the functionality of the managed rule.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "ruleId": {
                              "description": "Identifier for the managed rule.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "array"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "ruleSetId": {
                  "description": "Id of the managed rule set.",
                  "readOnly": true,
                  "type": "string"
                },
                "ruleSetType": {
                  "description": "Type of the managed rule set.",
                  "readOnly": true,
                  "type": "string"
                },
                "ruleSetVersion": {
                  "description": "Version of the managed rule set type.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleSetDefinitionProperties"
          },
          {
            "oldValue": {
              "description": "Defines the list of managed rule sets for the policy.",
              "properties": {
                "managedRuleSets": {
                  "description": "List of rule sets.",
                  "items": {
                    "description": "Defines a managed rule set.",
                    "properties": {
                      "exclusions": {
                        "description": "Describes the exclusions that are applied to all rules in the set.",
                        "items": {
                          "description": "Exclude variables from managed rule evaluation.",
                          "properties": {
                            "matchVariable": {
                              "description": "The variable type to be excluded.",
                              "enum": [
                                "RequestHeaderNames",
                                "RequestCookieNames",
                                "QueryStringArgNames",
                                "RequestBodyPostArgNames"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionMatchVariable"
                              }
                            },
                            "selector": {
                              "description": "Selector value for which elements in the collection this exclusion applies to.",
                              "type": "string"
                            },
                            "selectorMatchOperator": {
                              "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                              "enum": [
                                "Equals",
                                "Contains",
                                "StartsWith",
                                "EndsWith",
                                "EqualsAny"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedRuleExclusionSelectorMatchOperator"
                              }
                            }
                          },
                          "required": [
                            "matchVariable",
                            "selectorMatchOperator",
                            "selector"
                          ]
                        },
                        "type": "array"
                      },
                      "ruleGroupOverrides": {
                        "description": "Defines the rule group overrides to apply to the rule set.",
                        "items": {
                          "description": "Defines a managed rule group override setting.",
                          "properties": {
                            "exclusions": {
                              "description": "Describes the exclusions that are applied to all rules in the group.",
                              "items": {
                                "description": "Exclude variables from managed rule evaluation.",
                                "properties": {
                                  "matchVariable": {
                                    "description": "The variable type to be excluded.",
                                    "enum": [
                                      "RequestHeaderNames",
                                      "RequestCookieNames",
                                      "QueryStringArgNames",
                                      "RequestBodyPostArgNames"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedRuleExclusionMatchVariable"
                                    }
                                  },
                                  "selector": {
                                    "description": "Selector value for which elements in the collection this exclusion applies to.",
                                    "type": "string"
                                  },
                                  "selectorMatchOperator": {
                                    "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                    "enum": [
                                      "Equals",
                                      "Contains",
                                      "StartsWith",
                                      "EndsWith",
                                      "EqualsAny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedRuleExclusionSelectorMatchOperator"
                                    }
                                  }
                                },
                                "required": [
                                  "matchVariable",
                                  "selectorMatchOperator",
                                  "selector"
                                ]
                              },
                              "type": "array"
                            },
                            "ruleGroupName": {
                              "description": "Describes the managed rule group to override.",
                              "type": "string"
                            },
                            "rules": {
                              "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                              "items": {
                                "description": "Defines a managed rule group override setting.",
                                "properties": {
                                  "action": {
                                    "description": "Defines the action to take on rule match.",
                                    "enum": [
                                      "Allow",
                                      "Block",
                                      "Log",
                                      "Redirect"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ActionType"
                                    }
                                  },
                                  "enabledState": {
                                    "description": "Describes if the managed rule is in enabled or disabled state.",
                                    "enum": [
                                      "Disabled",
                                      "Enabled"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedRuleEnabledState"
                                    }
                                  },
                                  "exclusions": {
                                    "description": "Describes the exclusions that are applied to this specific rule.",
                                    "items": {
                                      "description": "Exclude variables from managed rule evaluation.",
                                      "properties": {
                                        "matchVariable": {
                                          "description": "The variable type to be excluded.",
                                          "enum": [
                                            "RequestHeaderNames",
                                            "RequestCookieNames",
                                            "QueryStringArgNames",
                                            "RequestBodyPostArgNames"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ManagedRuleExclusionMatchVariable"
                                          }
                                        },
                                        "selector": {
                                          "description": "Selector value for which elements in the collection this exclusion applies to.",
                                          "type": "string"
                                        },
                                        "selectorMatchOperator": {
                                          "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                          "enum": [
                                            "Equals",
                                            "Contains",
                                            "StartsWith",
                                            "EndsWith",
                                            "EqualsAny"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ManagedRuleExclusionSelectorMatchOperator"
                                          }
                                        }
                                      },
                                      "required": [
                                        "matchVariable",
                                        "selectorMatchOperator",
                                        "selector"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "ruleId": {
                                    "description": "Identifier for the managed rule.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "ruleId"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "ruleGroupName"
                          ]
                        },
                        "type": "array"
                      },
                      "ruleSetType": {
                        "description": "Defines the rule set type to use.",
                        "type": "string"
                      },
                      "ruleSetVersion": {
                        "description": "Defines the version of the rule set to use.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ruleSetType",
                      "ruleSetVersion"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ManagedRuleSetList"
          },
          {
            "oldValue": {
              "description": "Define a match condition.",
              "properties": {
                "matchValue": {
                  "description": "List of possible match values.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "matchVariable": {
                  "description": "Request variable to compare with.",
                  "enum": [
                    "RemoteAddr",
                    "RequestMethod",
                    "QueryString",
                    "PostArgs",
                    "RequestUri",
                    "RequestHeader",
                    "RequestBody",
                    "Cookies",
                    "SocketAddr"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "MatchVariable"
                  }
                },
                "negateCondition": {
                  "description": "Describes if the result of this condition should be negated.",
                  "type": "boolean"
                },
                "operator": {
                  "description": "Comparison type to use for matching with the variable value.",
                  "enum": [
                    "Any",
                    "IPMatch",
                    "GeoMatch",
                    "Equal",
                    "Contains",
                    "LessThan",
                    "GreaterThan",
                    "LessThanOrEqual",
                    "GreaterThanOrEqual",
                    "BeginsWith",
                    "EndsWith",
                    "RegEx"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Operator"
                  }
                },
                "selector": {
                  "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                  "type": "string"
                },
                "transforms": {
                  "description": "List of transforms.",
                  "items": {
                    "description": "Describes what transforms applied before matching.",
                    "enum": [
                      "Lowercase",
                      "Uppercase",
                      "Trim",
                      "UrlDecode",
                      "UrlEncode",
                      "RemoveNulls"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "TransformType"
                    }
                  },
                  "type": "array"
                }
              },
              "required": [
                "matchVariable",
                "operator",
                "matchValue"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MatchCondition"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the server side resource status",
              "enum": [
                "Creating",
                "Enabling",
                "Enabled",
                "Disabling",
                "Disabled",
                "Deleting"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "NetworkExperimentResourceState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/NetworkExperimentResourceState"
          },
          {
            "oldValue": {
              "description": "Defines top-level WebApplicationFirewallPolicy configuration settings.",
              "properties": {
                "customBlockResponseBody": {
                  "description": "If the action type is block, customer can override the response body. The body must be specified in base64 encoding.",
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
                  "type": "string"
                },
                "customBlockResponseStatusCode": {
                  "description": "If the action type is block, customer can override the response status code.",
                  "type": "integer"
                },
                "enabledState": {
                  "description": "Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.",
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PolicyEnabledState"
                  }
                },
                "mode": {
                  "description": "Describes if it is in detection mode or prevention mode at policy level.",
                  "enum": [
                    "Prevention",
                    "Detection"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PolicyMode"
                  }
                },
                "redirectUrl": {
                  "description": "If action type is redirect, this field represents redirect URL for the client.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PolicySettings"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines the properties of a preconfigured endpoint",
              "properties": {
                "name": {
                  "description": "The name of the endpoint",
                  "type": "string"
                },
                "properties": {
                  "description": "Defines the properties of a preconfigured endpoint",
                  "properties": {
                    "backend": {
                      "description": "The preconfigured endpoint backend",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the endpoint",
                      "type": "string"
                    },
                    "endpoint": {
                      "description": "The endpoint that is preconfigured",
                      "type": "string"
                    },
                    "endpointType": {
                      "description": "The type of endpoint",
                      "enum": [
                        "AFD",
                        "AzureRegion",
                        "CDN",
                        "ATM"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "endpointType"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PreconfiguredEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines a list of preconfigured endpoints.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of PreconfiguredEndpoints if there are any.",
                  "type": "string"
                },
                "value": {
                  "description": "List of PreconfiguredEndpoints supported by NetworkExperiment.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Common resource representation.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "Defines the properties of a preconfigured endpoint",
                    "properties": {
                      "name": {
                        "description": "The name of the endpoint",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Defines the properties of a preconfigured endpoint",
                        "properties": {
                          "backend": {
                            "description": "The preconfigured endpoint backend",
                            "type": "string"
                          },
                          "description": {
                            "description": "The description of the endpoint",
                            "type": "string"
                          },
                          "endpoint": {
                            "description": "The endpoint that is preconfigured",
                            "type": "string"
                          },
                          "endpointType": {
                            "description": "The type of endpoint",
                            "enum": [
                              "AFD",
                              "AzureRegion",
                              "CDN",
                              "ATM"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "endpointType"
                            }
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PreconfiguredEndpointList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of a preconfigured endpoint",
              "properties": {
                "backend": {
                  "description": "The preconfigured endpoint backend",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the endpoint",
                  "type": "string"
                },
                "endpoint": {
                  "description": "The endpoint that is preconfigured",
                  "type": "string"
                },
                "endpointType": {
                  "description": "The type of endpoint",
                  "enum": [
                    "AFD",
                    "AzureRegion",
                    "CDN",
                    "ATM"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "endpointType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/PreconfiguredEndpointProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines an Network Experiment Profile and lists of Experiments",
              "properties": {
                "etag": {
                  "description": "Gets a unique read-only string that changes whenever the resource is updated.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Profile",
                  "type": "string"
                },
                "properties": {
                  "description": "Defines the properties of an experiment",
                  "properties": {
                    "enabledState": {
                      "description": "The state of the Experiment",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "state"
                      }
                    },
                    "resourceState": {
                      "description": "Defines the server side resource status",
                      "enum": [
                        "Creating",
                        "Enabling",
                        "Enabled",
                        "Disabling",
                        "Disabled",
                        "Deleting"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "NetworkExperimentResourceState"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Profile"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines a list of Profiles. It contains a list of Profile objects and a URL link to get the next set of results.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of Profile objects if there are any.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Profiles within a resource group.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Common resource representation.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "Defines an Network Experiment Profile and lists of Experiments",
                    "properties": {
                      "etag": {
                        "description": "Gets a unique read-only string that changes whenever the resource is updated.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Profile",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Defines the properties of an experiment",
                        "properties": {
                          "enabledState": {
                            "description": "The state of the Experiment",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "state"
                            }
                          },
                          "resourceState": {
                            "description": "Defines the server side resource status",
                            "enum": [
                              "Creating",
                              "Enabling",
                              "Enabled",
                              "Disabling",
                              "Disabled",
                              "Deleting"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "NetworkExperimentResourceState"
                            }
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ProfileList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of an experiment",
              "properties": {
                "enabledState": {
                  "description": "The state of the Experiment",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "state"
                  }
                },
                "resourceState": {
                  "description": "Defines the server side resource status",
                  "enum": [
                    "Creating",
                    "Enabling",
                    "Enabled",
                    "Disabling",
                    "Disabled",
                    "Deleting"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "NetworkExperimentResourceState"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ProfileProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines modifiable attributes of a Profile",
              "properties": {
                "properties": {
                  "description": "Defines the properties of an experiment",
                  "properties": {
                    "enabledState": {
                      "description": "The enabled state of the Profile",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "state"
                      }
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ProfileUpdateModel"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of an experiment",
              "properties": {
                "enabledState": {
                  "description": "The enabled state of the Profile",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "state"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ProfileUpdateProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines the Timeseries",
              "properties": {
                "properties": {
                  "description": "Defines the properties of a timeseries",
                  "properties": {
                    "aggregationInterval": {
                      "description": "The aggregation interval of the Timeseries",
                      "enum": [
                        "Hourly",
                        "Daily"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "aggregationInterval"
                      }
                    },
                    "country": {
                      "description": "The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html",
                      "type": "string"
                    },
                    "endDateTimeUTC": {
                      "description": "The end DateTime of the Timeseries in UTC",
                      "type": "string"
                    },
                    "endpoint": {
                      "description": "The endpoint associated with the Timeseries data point",
                      "type": "string"
                    },
                    "startDateTimeUTC": {
                      "description": "The start DateTime of the Timeseries in UTC",
                      "type": "string"
                    },
                    "timeseriesData": {
                      "description": "The set of data points for the timeseries",
                      "items": {
                        "description": "Defines a timeseries datapoint used in a timeseries",
                        "properties": {
                          "dateTimeUTC": {
                            "description": "The DateTime of the Timeseries data point in UTC",
                            "type": "string"
                          },
                          "value": {
                            "description": "The Value of the Timeseries data point",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "timeseriesType": {
                      "description": "The type of Timeseries",
                      "enum": [
                        "MeasurementCounts",
                        "LatencyP50",
                        "LatencyP75",
                        "LatencyP95"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "timeseriesType"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Timeseries"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines a timeseries datapoint used in a timeseries",
              "properties": {
                "dateTimeUTC": {
                  "description": "The DateTime of the Timeseries data point in UTC",
                  "type": "string"
                },
                "value": {
                  "description": "The Value of the Timeseries data point",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/TimeseriesDataPoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Defines the properties of a timeseries",
              "properties": {
                "aggregationInterval": {
                  "description": "The aggregation interval of the Timeseries",
                  "enum": [
                    "Hourly",
                    "Daily"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "aggregationInterval"
                  }
                },
                "country": {
                  "description": "The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html",
                  "type": "string"
                },
                "endDateTimeUTC": {
                  "description": "The end DateTime of the Timeseries in UTC",
                  "type": "string"
                },
                "endpoint": {
                  "description": "The endpoint associated with the Timeseries data point",
                  "type": "string"
                },
                "startDateTimeUTC": {
                  "description": "The start DateTime of the Timeseries in UTC",
                  "type": "string"
                },
                "timeseriesData": {
                  "description": "The set of data points for the timeseries",
                  "items": {
                    "description": "Defines a timeseries datapoint used in a timeseries",
                    "properties": {
                      "dateTimeUTC": {
                        "description": "The DateTime of the Timeseries data point in UTC",
                        "type": "string"
                      },
                      "value": {
                        "description": "The Value of the Timeseries data point",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "timeseriesType": {
                  "description": "The type of Timeseries",
                  "enum": [
                    "MeasurementCounts",
                    "LatencyP50",
                    "LatencyP75",
                    "LatencyP95"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "timeseriesType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/TimeseriesProperties"
          },
          {
            "oldValue": {
              "description": "Describes what transforms applied before matching.",
              "enum": [
                "Lowercase",
                "Uppercase",
                "Trim",
                "UrlDecode",
                "UrlEncode",
                "RemoveNulls"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "TransformType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TransformType"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "Common resource representation.",
                  "properties": {
                    "id": {
                      "description": "Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Defines web application firewall policy.",
              "properties": {
                "etag": {
                  "description": "Gets a unique read-only string that changes whenever the resource is updated.",
                  "type": "string"
                },
                "properties": {
                  "description": "Defines web application firewall policy properties.",
                  "properties": {
                    "customRules": {
                      "description": "Defines contents of custom rules",
                      "properties": {
                        "rules": {
                          "description": "List of rules",
                          "items": {
                            "description": "Defines contents of a web application rule",
                            "properties": {
                              "action": {
                                "description": "Defines the action to take on rule match.",
                                "enum": [
                                  "Allow",
                                  "Block",
                                  "Log",
                                  "Redirect"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ActionType"
                                }
                              },
                              "enabledState": {
                                "description": "Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "CustomRuleEnabledState"
                                }
                              },
                              "matchConditions": {
                                "description": "List of match conditions.",
                                "items": {
                                  "description": "Define a match condition.",
                                  "properties": {
                                    "matchValue": {
                                      "description": "List of possible match values.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "matchVariable": {
                                      "description": "Request variable to compare with.",
                                      "enum": [
                                        "RemoteAddr",
                                        "RequestMethod",
                                        "QueryString",
                                        "PostArgs",
                                        "RequestUri",
                                        "RequestHeader",
                                        "RequestBody",
                                        "Cookies",
                                        "SocketAddr"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "MatchVariable"
                                      }
                                    },
                                    "negateCondition": {
                                      "description": "Describes if the result of this condition should be negated.",
                                      "type": "boolean"
                                    },
                                    "operator": {
                                      "description": "Comparison type to use for matching with the variable value.",
                                      "enum": [
                                        "Any",
                                        "IPMatch",
                                        "GeoMatch",
                                        "Equal",
                                        "Contains",
                                        "LessThan",
                                        "GreaterThan",
                                        "LessThanOrEqual",
                                        "GreaterThanOrEqual",
                                        "BeginsWith",
                                        "EndsWith",
                                        "RegEx"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "Operator"
                                      }
                                    },
                                    "selector": {
                                      "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                                      "type": "string"
                                    },
                                    "transforms": {
                                      "description": "List of transforms.",
                                      "items": {
                                        "description": "Describes what transforms applied before matching.",
                                        "enum": [
                                          "Lowercase",
                                          "Uppercase",
                                          "Trim",
                                          "UrlDecode",
                                          "UrlEncode",
                                          "RemoveNulls"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "TransformType"
                                        }
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "matchVariable",
                                    "operator",
                                    "matchValue"
                                  ]
                                },
                                "type": "array"
                              },
                              "name": {
                                "description": "Describes the name of the rule.",
                                "maxLength": 128,
                                "type": "string"
                              },
                              "priority": {
                                "description": "Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
                                "type": "integer"
                              },
                              "rateLimitDurationInMinutes": {
                                "description": "Time window for resetting the rate limit count. Default is 1 minute.",
                                "maximum": 5,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "rateLimitThreshold": {
                                "description": "Number of allowed requests per client within the time window.",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "ruleType": {
                                "description": "Describes type of rule.",
                                "enum": [
                                  "MatchRule",
                                  "RateLimitRule"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "RuleType"
                                }
                              }
                            },
                            "required": [
                              "priority",
                              "ruleType",
                              "matchConditions",
                              "action"
                            ]
                          },
                          "type": "array"
                        }
                      }
                    },
                    "frontendEndpointLinks": {
                      "description": "Describes Frontend Endpoints associated with this Web Application Firewall policy.",
                      "items": {
                        "description": "Defines the Resource ID for a Frontend Endpoint.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "managedRules": {
                      "description": "Defines the list of managed rule sets for the policy.",
                      "properties": {
                        "managedRuleSets": {
                          "description": "List of rule sets.",
                          "items": {
                            "description": "Defines a managed rule set.",
                            "properties": {
                              "exclusions": {
                                "description": "Describes the exclusions that are applied to all rules in the set.",
                                "items": {
                                  "description": "Exclude variables from managed rule evaluation.",
                                  "properties": {
                                    "matchVariable": {
                                      "description": "The variable type to be excluded.",
                                      "enum": [
                                        "RequestHeaderNames",
                                        "RequestCookieNames",
                                        "QueryStringArgNames",
                                        "RequestBodyPostArgNames"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ManagedRuleExclusionMatchVariable"
                                      }
                                    },
                                    "selector": {
                                      "description": "Selector value for which elements in the collection this exclusion applies to.",
                                      "type": "string"
                                    },
                                    "selectorMatchOperator": {
                                      "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                      "enum": [
                                        "Equals",
                                        "Contains",
                                        "StartsWith",
                                        "EndsWith",
                                        "EqualsAny"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ManagedRuleExclusionSelectorMatchOperator"
                                      }
                                    }
                                  },
                                  "required": [
                                    "matchVariable",
                                    "selectorMatchOperator",
                                    "selector"
                                  ]
                                },
                                "type": "array"
                              },
                              "ruleGroupOverrides": {
                                "description": "Defines the rule group overrides to apply to the rule set.",
                                "items": {
                                  "description": "Defines a managed rule group override setting.",
                                  "properties": {
                                    "exclusions": {
                                      "description": "Describes the exclusions that are applied to all rules in the group.",
                                      "items": {
                                        "description": "Exclude variables from managed rule evaluation.",
                                        "properties": {
                                          "matchVariable": {
                                            "description": "The variable type to be excluded.",
                                            "enum": [
                                              "RequestHeaderNames",
                                              "RequestCookieNames",
                                              "QueryStringArgNames",
                                              "RequestBodyPostArgNames"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ManagedRuleExclusionMatchVariable"
                                            }
                                          },
                                          "selector": {
                                            "description": "Selector value for which elements in the collection this exclusion applies to.",
                                            "type": "string"
                                          },
                                          "selectorMatchOperator": {
                                            "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                            "enum": [
                                              "Equals",
                                              "Contains",
                                              "StartsWith",
                                              "EndsWith",
                                              "EqualsAny"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ManagedRuleExclusionSelectorMatchOperator"
                                            }
                                          }
                                        },
                                        "required": [
                                          "matchVariable",
                                          "selectorMatchOperator",
                                          "selector"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "ruleGroupName": {
                                      "description": "Describes the managed rule group to override.",
                                      "type": "string"
                                    },
                                    "rules": {
                                      "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                                      "items": {
                                        "description": "Defines a managed rule group override setting.",
                                        "properties": {
                                          "action": {
                                            "description": "Defines the action to take on rule match.",
                                            "enum": [
                                              "Allow",
                                              "Block",
                                              "Log",
                                              "Redirect"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ActionType"
                                            }
                                          },
                                          "enabledState": {
                                            "description": "Describes if the managed rule is in enabled or disabled state.",
                                            "enum": [
                                              "Disabled",
                                              "Enabled"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ManagedRuleEnabledState"
                                            }
                                          },
                                          "exclusions": {
                                            "description": "Describes the exclusions that are applied to this specific rule.",
                                            "items": {
                                              "description": "Exclude variables from managed rule evaluation.",
                                              "properties": {
                                                "matchVariable": {
                                                  "description": "The variable type to be excluded.",
                                                  "enum": [
                                                    "RequestHeaderNames",
                                                    "RequestCookieNames",
                                                    "QueryStringArgNames",
                                                    "RequestBodyPostArgNames"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ManagedRuleExclusionMatchVariable"
                                                  }
                                                },
                                                "selector": {
                                                  "description": "Selector value for which elements in the collection this exclusion applies to.",
                                                  "type": "string"
                                                },
                                                "selectorMatchOperator": {
                                                  "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                                  "enum": [
                                                    "Equals",
                                                    "Contains",
                                                    "StartsWith",
                                                    "EndsWith",
                                                    "EqualsAny"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ManagedRuleExclusionSelectorMatchOperator"
                                                  }
                                                }
                                              },
                                              "required": [
                                                "matchVariable",
                                                "selectorMatchOperator",
                                                "selector"
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "ruleId": {
                                            "description": "Identifier for the managed rule.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "ruleId"
                                        ]
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "ruleGroupName"
                                  ]
                                },
                                "type": "array"
                              },
                              "ruleSetType": {
                                "description": "Defines the rule set type to use.",
                                "type": "string"
                              },
                              "ruleSetVersion": {
                                "description": "Defines the version of the rule set to use.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "ruleSetType",
                              "ruleSetVersion"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "policySettings": {
                      "description": "Defines top-level WebApplicationFirewallPolicy configuration settings.",
                      "properties": {
                        "customBlockResponseBody": {
                          "description": "If the action type is block, customer can override the response body. The body must be specified in base64 encoding.",
                          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
                          "type": "string"
                        },
                        "customBlockResponseStatusCode": {
                          "description": "If the action type is block, customer can override the response status code.",
                          "type": "integer"
                        },
                        "enabledState": {
                          "description": "Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.",
                          "enum": [
                            "Disabled",
                            "Enabled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "PolicyEnabledState"
                          }
                        },
                        "mode": {
                          "description": "Describes if it is in detection mode or prevention mode at policy level.",
                          "enum": [
                            "Prevention",
                            "Detection"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "PolicyMode"
                          }
                        },
                        "redirectUrl": {
                          "description": "If action type is redirect, this field represents redirect URL for the client.",
                          "type": "string"
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the policy.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceState": {
                      "enum": [
                        "Creating",
                        "Enabling",
                        "Enabled",
                        "Disabling",
                        "Disabled",
                        "Deleting"
                      ],
                      "readOnly": true,
                      "title": "Resource status of the policy.",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PolicyResourceState"
                      }
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WebApplicationFirewallPolicy"
          },
          {
            "oldValue": {
              "description": "Defines a list of WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of WebApplicationFirewallPolicy objects if there are any.",
                  "type": "string"
                },
                "value": {
                  "description": "List of WebApplicationFirewallPolicies within a resource group.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Common resource representation.",
                        "properties": {
                          "id": {
                            "description": "Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "Defines web application firewall policy.",
                    "properties": {
                      "etag": {
                        "description": "Gets a unique read-only string that changes whenever the resource is updated.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Defines web application firewall policy properties.",
                        "properties": {
                          "customRules": {
                            "description": "Defines contents of custom rules",
                            "properties": {
                              "rules": {
                                "description": "List of rules",
                                "items": {
                                  "description": "Defines contents of a web application rule",
                                  "properties": {
                                    "action": {
                                      "description": "Defines the action to take on rule match.",
                                      "enum": [
                                        "Allow",
                                        "Block",
                                        "Log",
                                        "Redirect"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ActionType"
                                      }
                                    },
                                    "enabledState": {
                                      "description": "Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
                                      "enum": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "CustomRuleEnabledState"
                                      }
                                    },
                                    "matchConditions": {
                                      "description": "List of match conditions.",
                                      "items": {
                                        "description": "Define a match condition.",
                                        "properties": {
                                          "matchValue": {
                                            "description": "List of possible match values.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "matchVariable": {
                                            "description": "Request variable to compare with.",
                                            "enum": [
                                              "RemoteAddr",
                                              "RequestMethod",
                                              "QueryString",
                                              "PostArgs",
                                              "RequestUri",
                                              "RequestHeader",
                                              "RequestBody",
                                              "Cookies",
                                              "SocketAddr"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "MatchVariable"
                                            }
                                          },
                                          "negateCondition": {
                                            "description": "Describes if the result of this condition should be negated.",
                                            "type": "boolean"
                                          },
                                          "operator": {
                                            "description": "Comparison type to use for matching with the variable value.",
                                            "enum": [
                                              "Any",
                                              "IPMatch",
                                              "GeoMatch",
                                              "Equal",
                                              "Contains",
                                              "LessThan",
                                              "GreaterThan",
                                              "LessThanOrEqual",
                                              "GreaterThanOrEqual",
                                              "BeginsWith",
                                              "EndsWith",
                                              "RegEx"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "Operator"
                                            }
                                          },
                                          "selector": {
                                            "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                                            "type": "string"
                                          },
                                          "transforms": {
                                            "description": "List of transforms.",
                                            "items": {
                                              "description": "Describes what transforms applied before matching.",
                                              "enum": [
                                                "Lowercase",
                                                "Uppercase",
                                                "Trim",
                                                "UrlDecode",
                                                "UrlEncode",
                                                "RemoveNulls"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "TransformType"
                                              }
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "matchVariable",
                                          "operator",
                                          "matchValue"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "name": {
                                      "description": "Describes the name of the rule.",
                                      "maxLength": 128,
                                      "type": "string"
                                    },
                                    "priority": {
                                      "description": "Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
                                      "type": "integer"
                                    },
                                    "rateLimitDurationInMinutes": {
                                      "description": "Time window for resetting the rate limit count. Default is 1 minute.",
                                      "maximum": 5,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "rateLimitThreshold": {
                                      "description": "Number of allowed requests per client within the time window.",
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "ruleType": {
                                      "description": "Describes type of rule.",
                                      "enum": [
                                        "MatchRule",
                                        "RateLimitRule"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "RuleType"
                                      }
                                    }
                                  },
                                  "required": [
                                    "priority",
                                    "ruleType",
                                    "matchConditions",
                                    "action"
                                  ]
                                },
                                "type": "array"
                              }
                            }
                          },
                          "frontendEndpointLinks": {
                            "description": "Describes Frontend Endpoints associated with this Web Application Firewall policy.",
                            "items": {
                              "description": "Defines the Resource ID for a Frontend Endpoint.",
                              "properties": {
                                "id": {
                                  "description": "Resource ID.",
                                  "type": "string"
                                }
                              },
                              "readOnly": true,
                              "type": "object"
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "managedRules": {
                            "description": "Defines the list of managed rule sets for the policy.",
                            "properties": {
                              "managedRuleSets": {
                                "description": "List of rule sets.",
                                "items": {
                                  "description": "Defines a managed rule set.",
                                  "properties": {
                                    "exclusions": {
                                      "description": "Describes the exclusions that are applied to all rules in the set.",
                                      "items": {
                                        "description": "Exclude variables from managed rule evaluation.",
                                        "properties": {
                                          "matchVariable": {
                                            "description": "The variable type to be excluded.",
                                            "enum": [
                                              "RequestHeaderNames",
                                              "RequestCookieNames",
                                              "QueryStringArgNames",
                                              "RequestBodyPostArgNames"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ManagedRuleExclusionMatchVariable"
                                            }
                                          },
                                          "selector": {
                                            "description": "Selector value for which elements in the collection this exclusion applies to.",
                                            "type": "string"
                                          },
                                          "selectorMatchOperator": {
                                            "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                            "enum": [
                                              "Equals",
                                              "Contains",
                                              "StartsWith",
                                              "EndsWith",
                                              "EqualsAny"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ManagedRuleExclusionSelectorMatchOperator"
                                            }
                                          }
                                        },
                                        "required": [
                                          "matchVariable",
                                          "selectorMatchOperator",
                                          "selector"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "ruleGroupOverrides": {
                                      "description": "Defines the rule group overrides to apply to the rule set.",
                                      "items": {
                                        "description": "Defines a managed rule group override setting.",
                                        "properties": {
                                          "exclusions": {
                                            "description": "Describes the exclusions that are applied to all rules in the group.",
                                            "items": {
                                              "description": "Exclude variables from managed rule evaluation.",
                                              "properties": {
                                                "matchVariable": {
                                                  "description": "The variable type to be excluded.",
                                                  "enum": [
                                                    "RequestHeaderNames",
                                                    "RequestCookieNames",
                                                    "QueryStringArgNames",
                                                    "RequestBodyPostArgNames"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ManagedRuleExclusionMatchVariable"
                                                  }
                                                },
                                                "selector": {
                                                  "description": "Selector value for which elements in the collection this exclusion applies to.",
                                                  "type": "string"
                                                },
                                                "selectorMatchOperator": {
                                                  "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                                  "enum": [
                                                    "Equals",
                                                    "Contains",
                                                    "StartsWith",
                                                    "EndsWith",
                                                    "EqualsAny"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ManagedRuleExclusionSelectorMatchOperator"
                                                  }
                                                }
                                              },
                                              "required": [
                                                "matchVariable",
                                                "selectorMatchOperator",
                                                "selector"
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "ruleGroupName": {
                                            "description": "Describes the managed rule group to override.",
                                            "type": "string"
                                          },
                                          "rules": {
                                            "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                                            "items": {
                                              "description": "Defines a managed rule group override setting.",
                                              "properties": {
                                                "action": {
                                                  "description": "Defines the action to take on rule match.",
                                                  "enum": [
                                                    "Allow",
                                                    "Block",
                                                    "Log",
                                                    "Redirect"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ActionType"
                                                  }
                                                },
                                                "enabledState": {
                                                  "description": "Describes if the managed rule is in enabled or disabled state.",
                                                  "enum": [
                                                    "Disabled",
                                                    "Enabled"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ManagedRuleEnabledState"
                                                  }
                                                },
                                                "exclusions": {
                                                  "description": "Describes the exclusions that are applied to this specific rule.",
                                                  "items": {
                                                    "description": "Exclude variables from managed rule evaluation.",
                                                    "properties": {
                                                      "matchVariable": {
                                                        "description": "The variable type to be excluded.",
                                                        "enum": [
                                                          "RequestHeaderNames",
                                                          "RequestCookieNames",
                                                          "QueryStringArgNames",
                                                          "RequestBodyPostArgNames"
                                                        ],
                                                        "type": "string",
                                                        "x-ms-enum": {
                                                          "modelAsString": true,
                                                          "name": "ManagedRuleExclusionMatchVariable"
                                                        }
                                                      },
                                                      "selector": {
                                                        "description": "Selector value for which elements in the collection this exclusion applies to.",
                                                        "type": "string"
                                                      },
                                                      "selectorMatchOperator": {
                                                        "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                                        "enum": [
                                                          "Equals",
                                                          "Contains",
                                                          "StartsWith",
                                                          "EndsWith",
                                                          "EqualsAny"
                                                        ],
                                                        "type": "string",
                                                        "x-ms-enum": {
                                                          "modelAsString": true,
                                                          "name": "ManagedRuleExclusionSelectorMatchOperator"
                                                        }
                                                      }
                                                    },
                                                    "required": [
                                                      "matchVariable",
                                                      "selectorMatchOperator",
                                                      "selector"
                                                    ]
                                                  },
                                                  "type": "array"
                                                },
                                                "ruleId": {
                                                  "description": "Identifier for the managed rule.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "ruleId"
                                              ]
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "ruleGroupName"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "ruleSetType": {
                                      "description": "Defines the rule set type to use.",
                                      "type": "string"
                                    },
                                    "ruleSetVersion": {
                                      "description": "Defines the version of the rule set to use.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "ruleSetType",
                                    "ruleSetVersion"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            }
                          },
                          "policySettings": {
                            "description": "Defines top-level WebApplicationFirewallPolicy configuration settings.",
                            "properties": {
                              "customBlockResponseBody": {
                                "description": "If the action type is block, customer can override the response body. The body must be specified in base64 encoding.",
                                "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
                                "type": "string"
                              },
                              "customBlockResponseStatusCode": {
                                "description": "If the action type is block, customer can override the response status code.",
                                "type": "integer"
                              },
                              "enabledState": {
                                "description": "Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PolicyEnabledState"
                                }
                              },
                              "mode": {
                                "description": "Describes if it is in detection mode or prevention mode at policy level.",
                                "enum": [
                                  "Prevention",
                                  "Detection"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PolicyMode"
                                }
                              },
                              "redirectUrl": {
                                "description": "If action type is redirect, this field represents redirect URL for the client.",
                                "type": "string"
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the policy.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceState": {
                            "enum": [
                              "Creating",
                              "Enabling",
                              "Enabled",
                              "Disabling",
                              "Disabled",
                              "Deleting"
                            ],
                            "readOnly": true,
                            "title": "Resource status of the policy.",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PolicyResourceState"
                            }
                          }
                        }
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WebApplicationFirewallPolicyList"
          },
          {
            "oldValue": {
              "description": "Defines web application firewall policy properties.",
              "properties": {
                "customRules": {
                  "description": "Defines contents of custom rules",
                  "properties": {
                    "rules": {
                      "description": "List of rules",
                      "items": {
                        "description": "Defines contents of a web application rule",
                        "properties": {
                          "action": {
                            "description": "Defines the action to take on rule match.",
                            "enum": [
                              "Allow",
                              "Block",
                              "Log",
                              "Redirect"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ActionType"
                            }
                          },
                          "enabledState": {
                            "description": "Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
                            "enum": [
                              "Disabled",
                              "Enabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "CustomRuleEnabledState"
                            }
                          },
                          "matchConditions": {
                            "description": "List of match conditions.",
                            "items": {
                              "description": "Define a match condition.",
                              "properties": {
                                "matchValue": {
                                  "description": "List of possible match values.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "matchVariable": {
                                  "description": "Request variable to compare with.",
                                  "enum": [
                                    "RemoteAddr",
                                    "RequestMethod",
                                    "QueryString",
                                    "PostArgs",
                                    "RequestUri",
                                    "RequestHeader",
                                    "RequestBody",
                                    "Cookies",
                                    "SocketAddr"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "MatchVariable"
                                  }
                                },
                                "negateCondition": {
                                  "description": "Describes if the result of this condition should be negated.",
                                  "type": "boolean"
                                },
                                "operator": {
                                  "description": "Comparison type to use for matching with the variable value.",
                                  "enum": [
                                    "Any",
                                    "IPMatch",
                                    "GeoMatch",
                                    "Equal",
                                    "Contains",
                                    "LessThan",
                                    "GreaterThan",
                                    "LessThanOrEqual",
                                    "GreaterThanOrEqual",
                                    "BeginsWith",
                                    "EndsWith",
                                    "RegEx"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "Operator"
                                  }
                                },
                                "selector": {
                                  "description": "Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
                                  "type": "string"
                                },
                                "transforms": {
                                  "description": "List of transforms.",
                                  "items": {
                                    "description": "Describes what transforms applied before matching.",
                                    "enum": [
                                      "Lowercase",
                                      "Uppercase",
                                      "Trim",
                                      "UrlDecode",
                                      "UrlEncode",
                                      "RemoveNulls"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "TransformType"
                                    }
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "matchVariable",
                                "operator",
                                "matchValue"
                              ]
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Describes the name of the rule.",
                            "maxLength": 128,
                            "type": "string"
                          },
                          "priority": {
                            "description": "Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
                            "type": "integer"
                          },
                          "rateLimitDurationInMinutes": {
                            "description": "Time window for resetting the rate limit count. Default is 1 minute.",
                            "maximum": 5,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "rateLimitThreshold": {
                            "description": "Number of allowed requests per client within the time window.",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "ruleType": {
                            "description": "Describes type of rule.",
                            "enum": [
                              "MatchRule",
                              "RateLimitRule"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "RuleType"
                            }
                          }
                        },
                        "required": [
                          "priority",
                          "ruleType",
                          "matchConditions",
                          "action"
                        ]
                      },
                      "type": "array"
                    }
                  }
                },
                "frontendEndpointLinks": {
                  "description": "Describes Frontend Endpoints associated with this Web Application Firewall policy.",
                  "items": {
                    "description": "Defines the Resource ID for a Frontend Endpoint.",
                    "properties": {
                      "id": {
                        "description": "Resource ID.",
                        "type": "string"
                      }
                    },
                    "readOnly": true,
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "managedRules": {
                  "description": "Defines the list of managed rule sets for the policy.",
                  "properties": {
                    "managedRuleSets": {
                      "description": "List of rule sets.",
                      "items": {
                        "description": "Defines a managed rule set.",
                        "properties": {
                          "exclusions": {
                            "description": "Describes the exclusions that are applied to all rules in the set.",
                            "items": {
                              "description": "Exclude variables from managed rule evaluation.",
                              "properties": {
                                "matchVariable": {
                                  "description": "The variable type to be excluded.",
                                  "enum": [
                                    "RequestHeaderNames",
                                    "RequestCookieNames",
                                    "QueryStringArgNames",
                                    "RequestBodyPostArgNames"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ManagedRuleExclusionMatchVariable"
                                  }
                                },
                                "selector": {
                                  "description": "Selector value for which elements in the collection this exclusion applies to.",
                                  "type": "string"
                                },
                                "selectorMatchOperator": {
                                  "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                  "enum": [
                                    "Equals",
                                    "Contains",
                                    "StartsWith",
                                    "EndsWith",
                                    "EqualsAny"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ManagedRuleExclusionSelectorMatchOperator"
                                  }
                                }
                              },
                              "required": [
                                "matchVariable",
                                "selectorMatchOperator",
                                "selector"
                              ]
                            },
                            "type": "array"
                          },
                          "ruleGroupOverrides": {
                            "description": "Defines the rule group overrides to apply to the rule set.",
                            "items": {
                              "description": "Defines a managed rule group override setting.",
                              "properties": {
                                "exclusions": {
                                  "description": "Describes the exclusions that are applied to all rules in the group.",
                                  "items": {
                                    "description": "Exclude variables from managed rule evaluation.",
                                    "properties": {
                                      "matchVariable": {
                                        "description": "The variable type to be excluded.",
                                        "enum": [
                                          "RequestHeaderNames",
                                          "RequestCookieNames",
                                          "QueryStringArgNames",
                                          "RequestBodyPostArgNames"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ManagedRuleExclusionMatchVariable"
                                        }
                                      },
                                      "selector": {
                                        "description": "Selector value for which elements in the collection this exclusion applies to.",
                                        "type": "string"
                                      },
                                      "selectorMatchOperator": {
                                        "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                        "enum": [
                                          "Equals",
                                          "Contains",
                                          "StartsWith",
                                          "EndsWith",
                                          "EqualsAny"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ManagedRuleExclusionSelectorMatchOperator"
                                        }
                                      }
                                    },
                                    "required": [
                                      "matchVariable",
                                      "selectorMatchOperator",
                                      "selector"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "ruleGroupName": {
                                  "description": "Describes the managed rule group to override.",
                                  "type": "string"
                                },
                                "rules": {
                                  "description": "List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
                                  "items": {
                                    "description": "Defines a managed rule group override setting.",
                                    "properties": {
                                      "action": {
                                        "description": "Defines the action to take on rule match.",
                                        "enum": [
                                          "Allow",
                                          "Block",
                                          "Log",
                                          "Redirect"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ActionType"
                                        }
                                      },
                                      "enabledState": {
                                        "description": "Describes if the managed rule is in enabled or disabled state.",
                                        "enum": [
                                          "Disabled",
                                          "Enabled"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ManagedRuleEnabledState"
                                        }
                                      },
                                      "exclusions": {
                                        "description": "Describes the exclusions that are applied to this specific rule.",
                                        "items": {
                                          "description": "Exclude variables from managed rule evaluation.",
                                          "properties": {
                                            "matchVariable": {
                                              "description": "The variable type to be excluded.",
                                              "enum": [
                                                "RequestHeaderNames",
                                                "RequestCookieNames",
                                                "QueryStringArgNames",
                                                "RequestBodyPostArgNames"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ManagedRuleExclusionMatchVariable"
                                              }
                                            },
                                            "selector": {
                                              "description": "Selector value for which elements in the collection this exclusion applies to.",
                                              "type": "string"
                                            },
                                            "selectorMatchOperator": {
                                              "description": "Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
                                              "enum": [
                                                "Equals",
                                                "Contains",
                                                "StartsWith",
                                                "EndsWith",
                                                "EqualsAny"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ManagedRuleExclusionSelectorMatchOperator"
                                              }
                                            }
                                          },
                                          "required": [
                                            "matchVariable",
                                            "selectorMatchOperator",
                                            "selector"
                                          ]
                                        },
                                        "type": "array"
                                      },
                                      "ruleId": {
                                        "description": "Identifier for the managed rule.",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "ruleId"
                                    ]
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "ruleGroupName"
                              ]
                            },
                            "type": "array"
                          },
                          "ruleSetType": {
                            "description": "Defines the rule set type to use.",
                            "type": "string"
                          },
                          "ruleSetVersion": {
                            "description": "Defines the version of the rule set to use.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "ruleSetType",
                          "ruleSetVersion"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "policySettings": {
                  "description": "Defines top-level WebApplicationFirewallPolicy configuration settings.",
                  "properties": {
                    "customBlockResponseBody": {
                      "description": "If the action type is block, customer can override the response body. The body must be specified in base64 encoding.",
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
                      "type": "string"
                    },
                    "customBlockResponseStatusCode": {
                      "description": "If the action type is block, customer can override the response status code.",
                      "type": "integer"
                    },
                    "enabledState": {
                      "description": "Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.",
                      "enum": [
                        "Disabled",
                        "Enabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PolicyEnabledState"
                      }
                    },
                    "mode": {
                      "description": "Describes if it is in detection mode or prevention mode at policy level.",
                      "enum": [
                        "Prevention",
                        "Detection"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PolicyMode"
                      }
                    },
                    "redirectUrl": {
                      "description": "If action type is redirect, this field represents redirect URL for the client.",
                      "type": "string"
                    }
                  }
                },
                "provisioningState": {
                  "description": "Provisioning state of the policy.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceState": {
                  "enum": [
                    "Creating",
                    "Enabling",
                    "Enabled",
                    "Disabling",
                    "Disabled",
                    "Deleting"
                  ],
                  "readOnly": true,
                  "title": "Resource status of the policy.",
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PolicyResourceState"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WebApplicationFirewallPolicyProperties"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "The Experiment identifier associated with the Experiment",
              "in": "path",
              "name": "experimentName",
              "pattern": "^[a-zA-Z0-9_\\-\\(\\)\\.]*[^\\.]$",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ExperimentNameParameter"
          },
          {
            "oldValue": {
              "description": "The name of the Web Application Firewall Policy.",
              "in": "path",
              "maxLength": 128,
              "name": "policyName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PolicyNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Profile identifier associated with the Tenant and Partner",
              "in": "path",
              "name": "profileName",
              "pattern": "^[a-zA-Z0-9_\\-\\(\\)\\.]*[^\\.]$",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ProfileNameParameter"
          }
        ]
      }
    },
    "info": {
      "title": {
        "from": "WebApplicationFirewallManagement",
        "to": "NetworkExperiments"
      },
      "description": {
        "from": "APIs to manage web application firewall rules.",
        "to": "These are the Network Experiment APIs.\n"
      },
      "version": {
        "from": "2019-10-01",
        "to": "2019-11-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/PreconfiguredEndpoints",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/NetworkExperimentProfiles",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallManagedRuleSets",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies"
      ]
    },
    "tags": {
      "added": [
        "NetworkExperimentProfiles",
        "Experiments",
        "PreconfiguredEndpoints",
        "Reports"
      ]
    }
  },
  "tools_a": {
    "Policies_List": "FunctionDef(\n  name='Policies_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the protection policies within a resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Policies_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the protection policies within a resource group.'))])],\n  type_params=[])",
    "Policies_Get": "FunctionDef(\n  name='Policies_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='policyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Retrieve protection policy with specified name within a resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/'),\n          FormattedValue(\n            value=Name(id='policyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='policyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: policyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Policies_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Retrieve protection policy with specified name within a resource group.'))])],\n  type_params=[])",
    "Policies_CreateOrUpdate": "FunctionDef(\n  name='Policies_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='policyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update policy with specified rule set name within a resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/'),\n          FormattedValue(\n            value=Name(id='policyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='policyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: policyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Policies_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update policy with specified rule set name within a resource group.'))])],\n  type_params=[])",
    "Policies_Delete": "FunctionDef(\n  name='Policies_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='policyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes Policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/'),\n          FormattedValue(\n            value=Name(id='policyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='policyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: policyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Policies_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes Policy'))])],\n  type_params=[])",
    "ManagedRuleSets_List": "FunctionDef(\n  name='ManagedRuleSets_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all available managed rule sets.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/FrontDoorWebApplicationFirewallManagedRuleSets')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ManagedRuleSets_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all available managed rule sets.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "NetworkExperimentProfiles_List": "FunctionDef(\n  name='NetworkExperimentProfiles_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/providers/Microsoft.Network/NetworkExperimentProfiles')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of Network Experiment Profiles under a subscription'))])],\n  type_params=[])",
    "NetworkExperimentProfiles_ListByResourceGroup": "FunctionDef(\n  name='NetworkExperimentProfiles_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of Network Experiment Profiles within a resource group under a subscription'))])],\n  type_params=[])",
    "NetworkExperimentProfiles_Get": "FunctionDef(\n  name='NetworkExperimentProfiles_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an NetworkExperiment Profile by ProfileName'))])],\n  type_params=[])",
    "NetworkExperimentProfiles_CreateOrUpdate": "FunctionDef(\n  name='NetworkExperimentProfiles_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates an NetworkExperiment Profile'))])],\n  type_params=[])",
    "NetworkExperimentProfiles_Update": "FunctionDef(\n  name='NetworkExperimentProfiles_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Updates an NetworkExperimentProfiles')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates an NetworkExperimentProfiles by NetworkExperimentProfile name: Updates an NetworkExperimentProfiles'))])],\n  type_params=[])",
    "NetworkExperimentProfiles_Delete": "FunctionDef(\n  name='NetworkExperimentProfiles_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetworkExperimentProfiles_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an NetworkExperiment Profile by ProfileName'))])],\n  type_params=[])",
    "PreconfiguredEndpoints_List": "FunctionDef(\n  name='PreconfiguredEndpoints_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/PreconfiguredEndpoints')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/PreconfiguredEndpoints')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PreconfiguredEndpoints_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of Preconfigured Endpoints'))])],\n  type_params=[])",
    "Experiments_ListByProfile": "FunctionDef(\n  name='Experiments_ListByProfile',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Experiments_ListByProfile')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of Experiments'))])],\n  type_params=[])",
    "Experiments_Get": "FunctionDef(\n  name='Experiments_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Experiments_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an Experiment by ExperimentName'))])],\n  type_params=[])",
    "Experiments_CreateOrUpdate": "FunctionDef(\n  name='Experiments_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Experiments_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an Experiment'))])],\n  type_params=[])",
    "Experiments_Update": "FunctionDef(\n  name='Experiments_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Updates an Experiment')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Experiments_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates an Experiment by Experiment id: Updates an Experiment'))])],\n  type_params=[])",
    "Experiments_Delete": "FunctionDef(\n  name='Experiments_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Experiments_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an Experiment'))])],\n  type_params=[])",
    "Reports_GetLatencyScorecards": "FunctionDef(\n  name='Reports_GetLatencyScorecards',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='endDateTimeUTC',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='country',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='aggregationInterval',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/LatencyScorecard')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='endDateTimeUTC', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='endDateTimeUTC'),\n              ctx=Store())],\n          value=Name(id='endDateTimeUTC', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='country', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='country'),\n              ctx=Store())],\n          value=Name(id='country', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='aggregationInterval', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='aggregationInterval'),\n              ctx=Store())],\n          value=Name(id='aggregationInterval', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reports_GetLatencyScorecards')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a Latency Scorecard for a given Experiment'))])],\n  type_params=[])",
    "Reports_GetTimeseries": "FunctionDef(\n  name='Reports_GetTimeseries',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='profileName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='experimentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='startDateTimeUTC',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='endDateTimeUTC',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='aggregationInterval',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='timeseriesType',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='endpoint',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='country',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Network/NetworkExperimentProfiles/'),\n          FormattedValue(\n            value=Name(id='profileName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Experiments/'),\n          FormattedValue(\n            value=Name(id='experimentName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/Timeseries')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='profileName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: profileName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='experimentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: experimentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='startDateTimeUTC', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='startDateTimeUTC'),\n              ctx=Store())],\n          value=Name(id='startDateTimeUTC', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='endDateTimeUTC', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='endDateTimeUTC'),\n              ctx=Store())],\n          value=Name(id='endDateTimeUTC', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='aggregationInterval', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='aggregationInterval'),\n              ctx=Store())],\n          value=Name(id='aggregationInterval', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='timeseriesType', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='timeseriesType'),\n              ctx=Store())],\n          value=Name(id='timeseriesType', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='endpoint', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='endpoint'),\n              ctx=Store())],\n          value=Name(id='endpoint', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='country', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='country'),\n              ctx=Store())],\n          value=Name(id='country', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reports_GetTimeseries')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a Timeseries for a given Experiment'))])],\n  type_params=[])"
  }
}