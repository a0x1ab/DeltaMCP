{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AppliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/CalculateExchangeOperationResultResponse/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/CalculateExchangeRequest/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/CalculateExchangeRequestProperties/properties/reservationsToPurchase/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/CalculateExchangeResponseProperties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation order being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "reservationToReturn": {
                      "description": "Reservation to return",
                      "properties": {
                        "quantity": {
                          "description": "Quantity to be returned. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "reservationId": {
                          "description": "Fully qualified identifier of the Reservation being returned",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "scope": {
                      "description": "The scope of the refund, e.g. Reservation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CalculateRefundRequest"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "reservationToReturn": {
                  "description": "Reservation to return",
                  "properties": {
                    "quantity": {
                      "description": "Quantity to be returned. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reservationId": {
                      "description": "Fully qualified identifier of the Reservation being returned",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "scope": {
                  "description": "The scope of the refund, e.g. Reservation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CalculateRefundRequestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "billingInformation": {
                      "description": "billing information",
                      "properties": {
                        "billingCurrencyProratedAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyRemainingCommitmentAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyTotalPaidAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "completedTransactions": {
                          "description": "The number of completed transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        },
                        "totalTransactions": {
                          "description": "The number of total transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "billingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Refund policy result",
                      "properties": {
                        "properties": {
                          "description": "Refund policy result property",
                          "properties": {
                            "consumedRefundsTotal": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "maxRefundLimit": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "policyErrors": {
                              "description": "Refund Policy errors",
                              "items": {
                                "description": "error details",
                                "properties": {
                                  "code": {
                                    "enum": [
                                      "NotSpecified",
                                      "InternalServerError",
                                      "ServerTimeout",
                                      "AuthorizationFailed",
                                      "BadRequest",
                                      "ClientCertificateThumbprintNotSet",
                                      "InvalidRequestContent",
                                      "OperationFailed",
                                      "HttpMethodNotSupported",
                                      "InvalidRequestUri",
                                      "MissingTenantId",
                                      "InvalidTenantId",
                                      "InvalidReservationOrderId",
                                      "InvalidReservationId",
                                      "ReservationIdNotInReservationOrder",
                                      "ReservationOrderNotFound",
                                      "InvalidSubscriptionId",
                                      "InvalidAccessToken",
                                      "InvalidLocationId",
                                      "UnauthenticatedRequestsThrottled",
                                      "InvalidHealthCheckType",
                                      "Forbidden",
                                      "BillingScopeIdCannotBeChanged",
                                      "AppliedScopesNotAssociatedWithCommerceAccount",
                                      "PatchValuesSameAsExisting",
                                      "RoleAssignmentCreationFailed",
                                      "ReservationOrderCreationFailed",
                                      "ReservationOrderNotEnabled",
                                      "CapacityUpdateScopesFailed",
                                      "UnsupportedReservationTerm",
                                      "ReservationOrderIdAlreadyExists",
                                      "RiskCheckFailed",
                                      "CreateQuoteFailed",
                                      "ActivateQuoteFailed",
                                      "NonsupportedAccountId",
                                      "PaymentInstrumentNotFound",
                                      "MissingAppliedScopesForSingle",
                                      "NoValidReservationsToReRate",
                                      "ReRateOnlyAllowedForEA",
                                      "OperationCannotBePerformedInCurrentState",
                                      "InvalidSingleAppliedScopesCount",
                                      "InvalidFulfillmentRequestParameters",
                                      "NotSupportedCountry",
                                      "InvalidRefundQuantity",
                                      "PurchaseError",
                                      "BillingCustomerInputError",
                                      "BillingPaymentInstrumentSoftError",
                                      "BillingPaymentInstrumentHardError",
                                      "BillingTransientError",
                                      "BillingError",
                                      "FulfillmentConfigurationError",
                                      "FulfillmentOutOfStockError",
                                      "FulfillmentTransientError",
                                      "FulfillmentError",
                                      "CalculatePriceFailed",
                                      "AppliedScopesSameAsExisting",
                                      "SelfServiceRefundNotSupported",
                                      "RefundLimitExceeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ErrorResponseCode"
                                    }
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": []
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pricingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "quantity": {
                      "description": "Quantity to be returned",
                      "format": "int32",
                      "type": "integer"
                    },
                    "sessionId": {
                      "description": "Refund session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CalculateRefundResponse"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "DisplayProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/DisplayProvisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "SelfServiceRefundNotSupported",
            "op": "add",
            "from": "",
            "path": "/Error/properties/error/properties/code/enum/-"
          },
          {
            "oldValue": null,
            "value": "RefundLimitExceeded",
            "op": "add",
            "from": "",
            "path": "/Error/properties/error/properties/code/enum/-"
          },
          {
            "oldValue": null,
            "value": "SelfServiceRefundNotSupported",
            "op": "add",
            "from": "",
            "path": "/ErrorResponseCode/enum/-"
          },
          {
            "oldValue": null,
            "value": "RefundLimitExceeded",
            "op": "add",
            "from": "",
            "path": "/ErrorResponseCode/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ExchangeOperationResultResponse/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ExchangeResponseProperties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "SelfServiceRefundNotSupported",
            "op": "add",
            "from": "",
            "path": "/ExtendedErrorInfo/properties/code/enum/-"
          },
          {
            "oldValue": null,
            "value": "RefundLimitExceeded",
            "op": "add",
            "from": "",
            "path": "/ExtendedErrorInfo/properties/code/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "Location"
            },
            "op": "add",
            "from": "",
            "path": "/Location/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/Patch/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/PatchProperties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ProvisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/PurchaseRequest/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/PurchaseRequestProperties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "description": "billing information",
              "properties": {
                "billingCurrencyProratedAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyRemainingCommitmentAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyTotalPaidAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "completedTransactions": {
                  "description": "The number of completed transactions in this reservation's payment",
                  "format": "int32",
                  "type": "integer"
                },
                "totalTransactions": {
                  "description": "The number of total transactions in this reservation's payment",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundBillingInformation"
          },
          {
            "oldValue": null,
            "value": {
              "description": "error details",
              "properties": {
                "code": {
                  "enum": [
                    "NotSpecified",
                    "InternalServerError",
                    "ServerTimeout",
                    "AuthorizationFailed",
                    "BadRequest",
                    "ClientCertificateThumbprintNotSet",
                    "InvalidRequestContent",
                    "OperationFailed",
                    "HttpMethodNotSupported",
                    "InvalidRequestUri",
                    "MissingTenantId",
                    "InvalidTenantId",
                    "InvalidReservationOrderId",
                    "InvalidReservationId",
                    "ReservationIdNotInReservationOrder",
                    "ReservationOrderNotFound",
                    "InvalidSubscriptionId",
                    "InvalidAccessToken",
                    "InvalidLocationId",
                    "UnauthenticatedRequestsThrottled",
                    "InvalidHealthCheckType",
                    "Forbidden",
                    "BillingScopeIdCannotBeChanged",
                    "AppliedScopesNotAssociatedWithCommerceAccount",
                    "PatchValuesSameAsExisting",
                    "RoleAssignmentCreationFailed",
                    "ReservationOrderCreationFailed",
                    "ReservationOrderNotEnabled",
                    "CapacityUpdateScopesFailed",
                    "UnsupportedReservationTerm",
                    "ReservationOrderIdAlreadyExists",
                    "RiskCheckFailed",
                    "CreateQuoteFailed",
                    "ActivateQuoteFailed",
                    "NonsupportedAccountId",
                    "PaymentInstrumentNotFound",
                    "MissingAppliedScopesForSingle",
                    "NoValidReservationsToReRate",
                    "ReRateOnlyAllowedForEA",
                    "OperationCannotBePerformedInCurrentState",
                    "InvalidSingleAppliedScopesCount",
                    "InvalidFulfillmentRequestParameters",
                    "NotSupportedCountry",
                    "InvalidRefundQuantity",
                    "PurchaseError",
                    "BillingCustomerInputError",
                    "BillingPaymentInstrumentSoftError",
                    "BillingPaymentInstrumentHardError",
                    "BillingTransientError",
                    "BillingError",
                    "FulfillmentConfigurationError",
                    "FulfillmentOutOfStockError",
                    "FulfillmentTransientError",
                    "FulfillmentError",
                    "CalculatePriceFailed",
                    "AppliedScopesSameAsExisting",
                    "SelfServiceRefundNotSupported",
                    "RefundLimitExceeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ErrorResponseCode"
                  }
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundPolicyError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Refund policy result",
              "properties": {
                "properties": {
                  "description": "Refund policy result property",
                  "properties": {
                    "consumedRefundsTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "maxRefundLimit": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyErrors": {
                      "description": "Refund Policy errors",
                      "items": {
                        "description": "error details",
                        "properties": {
                          "code": {
                            "enum": [
                              "NotSpecified",
                              "InternalServerError",
                              "ServerTimeout",
                              "AuthorizationFailed",
                              "BadRequest",
                              "ClientCertificateThumbprintNotSet",
                              "InvalidRequestContent",
                              "OperationFailed",
                              "HttpMethodNotSupported",
                              "InvalidRequestUri",
                              "MissingTenantId",
                              "InvalidTenantId",
                              "InvalidReservationOrderId",
                              "InvalidReservationId",
                              "ReservationIdNotInReservationOrder",
                              "ReservationOrderNotFound",
                              "InvalidSubscriptionId",
                              "InvalidAccessToken",
                              "InvalidLocationId",
                              "UnauthenticatedRequestsThrottled",
                              "InvalidHealthCheckType",
                              "Forbidden",
                              "BillingScopeIdCannotBeChanged",
                              "AppliedScopesNotAssociatedWithCommerceAccount",
                              "PatchValuesSameAsExisting",
                              "RoleAssignmentCreationFailed",
                              "ReservationOrderCreationFailed",
                              "ReservationOrderNotEnabled",
                              "CapacityUpdateScopesFailed",
                              "UnsupportedReservationTerm",
                              "ReservationOrderIdAlreadyExists",
                              "RiskCheckFailed",
                              "CreateQuoteFailed",
                              "ActivateQuoteFailed",
                              "NonsupportedAccountId",
                              "PaymentInstrumentNotFound",
                              "MissingAppliedScopesForSingle",
                              "NoValidReservationsToReRate",
                              "ReRateOnlyAllowedForEA",
                              "OperationCannotBePerformedInCurrentState",
                              "InvalidSingleAppliedScopesCount",
                              "InvalidFulfillmentRequestParameters",
                              "NotSupportedCountry",
                              "InvalidRefundQuantity",
                              "PurchaseError",
                              "BillingCustomerInputError",
                              "BillingPaymentInstrumentSoftError",
                              "BillingPaymentInstrumentHardError",
                              "BillingTransientError",
                              "BillingError",
                              "FulfillmentConfigurationError",
                              "FulfillmentOutOfStockError",
                              "FulfillmentTransientError",
                              "FulfillmentError",
                              "CalculatePriceFailed",
                              "AppliedScopesSameAsExisting",
                              "SelfServiceRefundNotSupported",
                              "RefundLimitExceeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ErrorResponseCode"
                            }
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundPolicyResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Refund policy result property",
              "properties": {
                "consumedRefundsTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "maxRefundLimit": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyErrors": {
                  "description": "Refund Policy errors",
                  "items": {
                    "description": "error details",
                    "properties": {
                      "code": {
                        "enum": [
                          "NotSpecified",
                          "InternalServerError",
                          "ServerTimeout",
                          "AuthorizationFailed",
                          "BadRequest",
                          "ClientCertificateThumbprintNotSet",
                          "InvalidRequestContent",
                          "OperationFailed",
                          "HttpMethodNotSupported",
                          "InvalidRequestUri",
                          "MissingTenantId",
                          "InvalidTenantId",
                          "InvalidReservationOrderId",
                          "InvalidReservationId",
                          "ReservationIdNotInReservationOrder",
                          "ReservationOrderNotFound",
                          "InvalidSubscriptionId",
                          "InvalidAccessToken",
                          "InvalidLocationId",
                          "UnauthenticatedRequestsThrottled",
                          "InvalidHealthCheckType",
                          "Forbidden",
                          "BillingScopeIdCannotBeChanged",
                          "AppliedScopesNotAssociatedWithCommerceAccount",
                          "PatchValuesSameAsExisting",
                          "RoleAssignmentCreationFailed",
                          "ReservationOrderCreationFailed",
                          "ReservationOrderNotEnabled",
                          "CapacityUpdateScopesFailed",
                          "UnsupportedReservationTerm",
                          "ReservationOrderIdAlreadyExists",
                          "RiskCheckFailed",
                          "CreateQuoteFailed",
                          "ActivateQuoteFailed",
                          "NonsupportedAccountId",
                          "PaymentInstrumentNotFound",
                          "MissingAppliedScopesForSingle",
                          "NoValidReservationsToReRate",
                          "ReRateOnlyAllowedForEA",
                          "OperationCannotBePerformedInCurrentState",
                          "InvalidSingleAppliedScopesCount",
                          "InvalidFulfillmentRequestParameters",
                          "NotSupportedCountry",
                          "InvalidRefundQuantity",
                          "PurchaseError",
                          "BillingCustomerInputError",
                          "BillingPaymentInstrumentSoftError",
                          "BillingPaymentInstrumentHardError",
                          "BillingTransientError",
                          "BillingError",
                          "FulfillmentConfigurationError",
                          "FulfillmentOutOfStockError",
                          "FulfillmentTransientError",
                          "FulfillmentError",
                          "CalculatePriceFailed",
                          "AppliedScopesSameAsExisting",
                          "SelfServiceRefundNotSupported",
                          "RefundLimitExceeded"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ErrorResponseCode"
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundPolicyResultProperty"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "properties": {
                  "properties": {
                    "reservationToReturn": {
                      "description": "Reservation to return",
                      "properties": {
                        "quantity": {
                          "description": "Quantity to be returned. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "reservationId": {
                          "description": "Fully qualified identifier of the Reservation being returned",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "returnReason": {
                      "description": "The reason of returning the reservation",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope of the refund, e.g. Reservation",
                      "type": "string"
                    },
                    "sessionId": {
                      "description": "SessionId that was returned by CalculateRefund API.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundRequest"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "reservationToReturn": {
                  "description": "Reservation to return",
                  "properties": {
                    "quantity": {
                      "description": "Quantity to be returned. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reservationId": {
                      "description": "Fully qualified identifier of the Reservation being returned",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "returnReason": {
                  "description": "The reason of returning the reservation",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope of the refund, e.g. Reservation",
                  "type": "string"
                },
                "sessionId": {
                  "description": "SessionId that was returned by CalculateRefund API.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundRequestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "billingInformation": {
                      "description": "billing information",
                      "properties": {
                        "billingCurrencyProratedAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyRemainingCommitmentAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyTotalPaidAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "completedTransactions": {
                          "description": "The number of completed transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        },
                        "totalTransactions": {
                          "description": "The number of total transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "billingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Refund policy result",
                      "properties": {
                        "properties": {
                          "description": "Refund policy result property",
                          "properties": {
                            "consumedRefundsTotal": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "maxRefundLimit": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "policyErrors": {
                              "description": "Refund Policy errors",
                              "items": {
                                "description": "error details",
                                "properties": {
                                  "code": {
                                    "enum": [
                                      "NotSpecified",
                                      "InternalServerError",
                                      "ServerTimeout",
                                      "AuthorizationFailed",
                                      "BadRequest",
                                      "ClientCertificateThumbprintNotSet",
                                      "InvalidRequestContent",
                                      "OperationFailed",
                                      "HttpMethodNotSupported",
                                      "InvalidRequestUri",
                                      "MissingTenantId",
                                      "InvalidTenantId",
                                      "InvalidReservationOrderId",
                                      "InvalidReservationId",
                                      "ReservationIdNotInReservationOrder",
                                      "ReservationOrderNotFound",
                                      "InvalidSubscriptionId",
                                      "InvalidAccessToken",
                                      "InvalidLocationId",
                                      "UnauthenticatedRequestsThrottled",
                                      "InvalidHealthCheckType",
                                      "Forbidden",
                                      "BillingScopeIdCannotBeChanged",
                                      "AppliedScopesNotAssociatedWithCommerceAccount",
                                      "PatchValuesSameAsExisting",
                                      "RoleAssignmentCreationFailed",
                                      "ReservationOrderCreationFailed",
                                      "ReservationOrderNotEnabled",
                                      "CapacityUpdateScopesFailed",
                                      "UnsupportedReservationTerm",
                                      "ReservationOrderIdAlreadyExists",
                                      "RiskCheckFailed",
                                      "CreateQuoteFailed",
                                      "ActivateQuoteFailed",
                                      "NonsupportedAccountId",
                                      "PaymentInstrumentNotFound",
                                      "MissingAppliedScopesForSingle",
                                      "NoValidReservationsToReRate",
                                      "ReRateOnlyAllowedForEA",
                                      "OperationCannotBePerformedInCurrentState",
                                      "InvalidSingleAppliedScopesCount",
                                      "InvalidFulfillmentRequestParameters",
                                      "NotSupportedCountry",
                                      "InvalidRefundQuantity",
                                      "PurchaseError",
                                      "BillingCustomerInputError",
                                      "BillingPaymentInstrumentSoftError",
                                      "BillingPaymentInstrumentHardError",
                                      "BillingTransientError",
                                      "BillingError",
                                      "FulfillmentConfigurationError",
                                      "FulfillmentOutOfStockError",
                                      "FulfillmentTransientError",
                                      "FulfillmentError",
                                      "CalculatePriceFailed",
                                      "AppliedScopesSameAsExisting",
                                      "SelfServiceRefundNotSupported",
                                      "RefundLimitExceeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ErrorResponseCode"
                                    }
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": []
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pricingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "quantity": {
                      "description": "Quantity to be returned",
                      "format": "int32",
                      "type": "integer"
                    },
                    "sessionId": {
                      "description": "Refund session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundResponse"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "billingInformation": {
                  "description": "billing information",
                  "properties": {
                    "billingCurrencyProratedAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyRemainingCommitmentAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyTotalPaidAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "completedTransactions": {
                      "description": "The number of completed transactions in this reservation's payment",
                      "format": "int32",
                      "type": "integer"
                    },
                    "totalTransactions": {
                      "description": "The number of total transactions in this reservation's payment",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "billingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyResult": {
                  "description": "Refund policy result",
                  "properties": {
                    "properties": {
                      "description": "Refund policy result property",
                      "properties": {
                        "consumedRefundsTotal": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "maxRefundLimit": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "policyErrors": {
                          "description": "Refund Policy errors",
                          "items": {
                            "description": "error details",
                            "properties": {
                              "code": {
                                "enum": [
                                  "NotSpecified",
                                  "InternalServerError",
                                  "ServerTimeout",
                                  "AuthorizationFailed",
                                  "BadRequest",
                                  "ClientCertificateThumbprintNotSet",
                                  "InvalidRequestContent",
                                  "OperationFailed",
                                  "HttpMethodNotSupported",
                                  "InvalidRequestUri",
                                  "MissingTenantId",
                                  "InvalidTenantId",
                                  "InvalidReservationOrderId",
                                  "InvalidReservationId",
                                  "ReservationIdNotInReservationOrder",
                                  "ReservationOrderNotFound",
                                  "InvalidSubscriptionId",
                                  "InvalidAccessToken",
                                  "InvalidLocationId",
                                  "UnauthenticatedRequestsThrottled",
                                  "InvalidHealthCheckType",
                                  "Forbidden",
                                  "BillingScopeIdCannotBeChanged",
                                  "AppliedScopesNotAssociatedWithCommerceAccount",
                                  "PatchValuesSameAsExisting",
                                  "RoleAssignmentCreationFailed",
                                  "ReservationOrderCreationFailed",
                                  "ReservationOrderNotEnabled",
                                  "CapacityUpdateScopesFailed",
                                  "UnsupportedReservationTerm",
                                  "ReservationOrderIdAlreadyExists",
                                  "RiskCheckFailed",
                                  "CreateQuoteFailed",
                                  "ActivateQuoteFailed",
                                  "NonsupportedAccountId",
                                  "PaymentInstrumentNotFound",
                                  "MissingAppliedScopesForSingle",
                                  "NoValidReservationsToReRate",
                                  "ReRateOnlyAllowedForEA",
                                  "OperationCannotBePerformedInCurrentState",
                                  "InvalidSingleAppliedScopesCount",
                                  "InvalidFulfillmentRequestParameters",
                                  "NotSupportedCountry",
                                  "InvalidRefundQuantity",
                                  "PurchaseError",
                                  "BillingCustomerInputError",
                                  "BillingPaymentInstrumentSoftError",
                                  "BillingPaymentInstrumentHardError",
                                  "BillingTransientError",
                                  "BillingError",
                                  "FulfillmentConfigurationError",
                                  "FulfillmentOutOfStockError",
                                  "FulfillmentTransientError",
                                  "FulfillmentError",
                                  "CalculatePriceFailed",
                                  "AppliedScopesSameAsExisting",
                                  "SelfServiceRefundNotSupported",
                                  "RefundLimitExceeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ErrorResponseCode"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array",
                          "x-ms-identifiers": []
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "pricingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "quantity": {
                  "description": "Quantity to be returned",
                  "format": "int32",
                  "type": "integer"
                },
                "sessionId": {
                  "description": "Refund session identifier",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RefundResponseProperties"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/RenewPropertiesResponse/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationList/properties/value/items/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderList/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderProperties/properties/reservations/items/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationOrderResponse/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationResponse/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationSwapProperties"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationToPurchaseCalculateExchange/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationToPurchaseExchange/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsListResult/properties/value/items/properties/properties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/appliedScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "This is the DateTime when the reservation benefit started.",
              "format": "date-time",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/benefitStartTime"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ProvisioningState"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/provisioningState/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationsProperties/properties/swapProperties"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/ReservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "UserFriendlyAppliedScopeType"
            },
            "op": "add",
            "from": "",
            "path": "/UserFriendlyAppliedScopeType/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "UserFriendlyRenewState"
            },
            "op": "add",
            "from": "",
            "path": "/UserFriendlyRenewState/x-ms-enum"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/CalculateExchangeRequestParameter/schema/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Information needed for calculating refund of a reservation.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "id": {
                    "description": "Fully qualified identifier of the reservation order being returned",
                    "type": "string"
                  },
                  "properties": {
                    "properties": {
                      "reservationToReturn": {
                        "description": "Reservation to return",
                        "properties": {
                          "quantity": {
                            "description": "Quantity to be returned. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified identifier of the Reservation being returned",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "scope": {
                        "description": "The scope of the refund, e.g. Reservation",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/CalculateRefundRequestParameter"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/PatchParameter/schema/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": "VirtualMachineSoftware",
            "op": "add",
            "from": "",
            "path": "/PurchaseParameter/schema/properties/properties/properties/reservedResourceType/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Information needed for returning reservation.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "reservationToReturn": {
                        "description": "Reservation to return",
                        "properties": {
                          "quantity": {
                            "description": "Quantity to be returned. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified identifier of the Reservation being returned",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "returnReason": {
                        "description": "The reason of returning the reservation",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The scope of the refund, e.g. Reservation",
                        "type": "string"
                      },
                      "sessionId": {
                        "description": "SessionId that was returned by CalculateRefund API.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/RefundRequestParameter"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2021-07-01",
        "to": "2022-03-01"
      }
    },
    "paths": {
      "added": [
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/calculateRefund",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/unarchive",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/archive",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/return"
      ],
      "modified": {
        "/providers/Microsoft.Capacity/calculateExchange": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CalculateExchange/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2021-07-01",
                        "value": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CalculateExchange/responses/202/headers/Azure-AsyncOperation"
                      },
                      {
                        "oldValue": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2021-07-01",
                        "value": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CalculateExchange/responses/202/headers/Location"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "reservationsToPurchase": {
                                      "items": {
                                        "properties": {
                                          "modified": {
                                            "properties": {
                                              "properties": {
                                                "modified": {
                                                  "reservedResourceType": {
                                                    "enum": {
                                                      "added": [
                                                        "VirtualMachineSoftware"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/calculatePrice": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Purchase/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "reservedResourceType": {
                                      "enum": {
                                        "added": [
                                          "VirtualMachineSoftware"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/exchange": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Exchange/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2021-07-01",
                        "value": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Exchange/responses/202/headers/Azure-AsyncOperation"
                      },
                      {
                        "oldValue": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2021-07-01",
                        "value": "https://management.azure.com/Microsoft.Capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188?api-version=2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Exchange/responses/202/headers/Location"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservationsToPurchase/items/properties/properties/properties/properties/properties/reservedResourceType/enum/-"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/operations": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/GetOperations/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ReservationOrderList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-29T21:20:23.8134834Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationOrderList/responses/200/body/value/0/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-30T12:55:40.2799114Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationOrderList/responses/200/body/value/1/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-30T03:49:19.0252126Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationOrderList/responses/200/body/value/2/properties/benefitStartTime"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/GetReservation/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-30T03:49:19.0252126Z",
                        "op": "add",
                        "from": "",
                        "path": "/GetReservation/responses/200/body/properties/benefitStartTime"
                      },
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/GetReservationWithExpandPayments/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "2019-08-30T03:51:49Z",
                        "op": "add",
                        "from": "",
                        "path": "/GetReservationWithExpandPayments/responses/200/body/properties/benefitStartTime"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Purchase/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "reservedResourceType": {
                                      "enum": {
                                        "added": [
                                          "VirtualMachineSoftware"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "202": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservations/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ChangeDirectory/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Merge/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ReservationList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-09-22T01:00:30.9253826Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationList/responses/200/body/value/0/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-09-22T22:46:32.7632798Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationList/responses/200/body/value/1/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-09-22T22:46:32.7632798Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationList/responses/200/body/value/2/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-09-22T22:46:32.7632798Z",
                        "op": "add",
                        "from": "",
                        "path": "/ReservationList/responses/200/body/value/3/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "etag": 2,
                          "id": "/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/5se63214-3382-40da-ed79-787f823e34bc",
                          "location": "eastus",
                          "name": "276e7ae4-84d0-4da6-ab4b-d6b94f3557da/5se63214-3382-40da-ed79-787f823e34bc",
                          "properties": {
                            "appliedScopeType": "Single",
                            "appliedScopes": [
                              "/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3"
                            ],
                            "benefitStartTime": "2017-09-22T22:40:32.7632798Z",
                            "billingPlan": "Monthly",
                            "billingScopeId": "/subscriptions/19376483-64b8-49e4-a931-d5248828720a",
                            "displayName": "cabri_test",
                            "effectiveDateTime": "2017-09-22T22:46:32.7632798Z",
                            "expiryDate": "2018-09-22",
                            "instanceFlexibility": "On",
                            "lastUpdatedDateTime": "2017-09-22T22:46:32.7632798Z",
                            "provisioningState": "Succeeded",
                            "quantity": 3,
                            "renew": false,
                            "reservedResourceType": "VirtualMachines",
                            "skuDescription": "D1 v2",
                            "swapProperties": {
                              "swapDestination": "/providers/microsoft.capacity/reservationOrders/63027ae3-389a-4716-ad77-04f42ce93c06/reservations/4jf50113-3382-40da-ed79-787f823e34bc"
                            }
                          },
                          "sku": {
                            "name": "Standard_D1_v2"
                          },
                          "type": "Microsoft.Capacity/reservationOrders/reservations"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/ReservationList/responses/200/body/value/-"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/GetReservation/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-09-22T22:46:32.7632798Z",
                        "op": "add",
                        "from": "",
                        "path": "/GetReservation/responses/200/body/properties/benefitStartTime"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "swapSource": "/providers/microsoft.capacity/reservationOrders/63037ae3-385a-4716-ad77-02f42ce93c06/reservations/5c6383f5-3f2c-4159-ae74-j72i1c1a49bc"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/GetReservation/responses/200/body/properties/swapProperties"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/PatchReservation/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "renewProperties": {
                                      "properties": {
                                        "modified": {
                                          "purchaseProperties": {
                                            "properties": {
                                              "modified": {
                                                "properties": {
                                                  "properties": {
                                                    "modified": {
                                                      "reservedResourceType": {
                                                        "enum": {
                                                          "added": [
                                                            "VirtualMachineSoftware"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/AvailableScopes/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ReservationRevisions/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "swapDestination": "/providers/microsoft.capacity/reservationOrders/afadf486-3432-4254-b297-4db8ef055f38/reservations/317efb41-b3ef-3706-8447-c2c045ab3ef5"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/ReservationRevisions/responses/200/body/value/2/properties/swapProperties"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Split/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Capacity/reservations": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Catalog/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/appliedScopeProperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/benefitStartTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ProvisioningState"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/renewProperties/properties/purchaseProperties/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "VirtualMachineSoftware",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/reservedResourceType/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/swapProperties"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/AppliedReservationList/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-07-01",
                        "value": "2022-03-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Catalog/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "added": {
                    "query": [
                      "publisherId",
                      "offerId",
                      "planId"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "SelfServiceRefundNotSupported",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "RefundLimitExceeded",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/properties/code/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Reservation_AvailableScopes": "FunctionDef(\n  name='Reservation_AvailableScopes',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get Available Scopes for `Reservation`. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/availableScopes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_AvailableScopes')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get Available Scopes for `Reservation`.: Get Available Scopes for `Reservation`.\\n'))])],\n  type_params=[])",
    "Reservation_Split": "FunctionDef(\n  name='Reservation_Split',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Split a `Reservation` into two `Reservation`s with specified quantity distribution.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/split')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Split')),\n        keyword(\n          arg='description',\n          value=Constant(value='Split the `Reservation`.: Split a `Reservation` into two `Reservation`s with specified quantity distribution.'))])],\n  type_params=[])",
    "Reservation_Merge": "FunctionDef(\n  name='Reservation_Merge',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/merge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Merge')),\n        keyword(\n          arg='description',\n          value=Constant(value='Merges two `Reservation`s.: Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.'))])],\n  type_params=[])",
    "Reservation_ListRevisions": "FunctionDef(\n  name='Reservation_ListRevisions',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the revisions for the `Reservation`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revisions')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_ListRevisions')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` revisions.: List of all the revisions for the `Reservation`.'))])],\n  type_params=[])",
    "CalculateExchange_Post": "FunctionDef(\n  name='CalculateExchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Calculates price for exchanging `Reservations` if there are no policy errors. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/calculateExchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='CalculateExchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Calculates the refund amounts and price of the new purchases.: Calculates price for exchanging `Reservations` if there are no policy errors.\\n'))])],\n  type_params=[])",
    "Exchange_Post": "FunctionDef(\n  name='Exchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Returns one or more `Reservations` in exchange for one or more `Reservation` purchases. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/exchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Exchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Exchange Reservation(s): Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.\\n'))])],\n  type_params=[])",
    "ReservationOrder_ChangeDirectory": "FunctionDef(\n  name='ReservationOrder_ChangeDirectory',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/changeDirectory')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_ChangeDirectory')),\n        keyword(\n          arg='description',\n          value=Constant(value='Change directory of `ReservationOrder`.: Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Reservation_AvailableScopes": "FunctionDef(\n  name='Reservation_AvailableScopes',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get Available Scopes for `Reservation`. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/availableScopes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_AvailableScopes')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get Available Scopes for `Reservation`.: Get Available Scopes for `Reservation`.\\n'))])],\n  type_params=[])",
    "Reservation_Split": "FunctionDef(\n  name='Reservation_Split',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Split a `Reservation` into two `Reservation`s with specified quantity distribution.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/split')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Split')),\n        keyword(\n          arg='description',\n          value=Constant(value='Split the `Reservation`.: Split a `Reservation` into two `Reservation`s with specified quantity distribution.'))])],\n  type_params=[])",
    "Reservation_Merge": "FunctionDef(\n  name='Reservation_Merge',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/merge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Merge')),\n        keyword(\n          arg='description',\n          value=Constant(value='Merges two `Reservation`s.: Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.'))])],\n  type_params=[])",
    "Reservation_ListRevisions": "FunctionDef(\n  name='Reservation_ListRevisions',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the revisions for the `Reservation`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revisions')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_ListRevisions')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` revisions.: List of all the revisions for the `Reservation`.'))])],\n  type_params=[])",
    "CalculateExchange_Post": "FunctionDef(\n  name='CalculateExchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Calculates price for exchanging `Reservations` if there are no policy errors. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/calculateExchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='CalculateExchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Calculates the refund amounts and price of the new purchases.: Calculates price for exchanging `Reservations` if there are no policy errors.\\n'))])],\n  type_params=[])",
    "Exchange_Post": "FunctionDef(\n  name='Exchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Returns one or more `Reservations` in exchange for one or more `Reservation` purchases. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/exchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Exchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Exchange Reservation(s): Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.\\n'))])],\n  type_params=[])",
    "ReservationOrder_ChangeDirectory": "FunctionDef(\n  name='ReservationOrder_ChangeDirectory',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/changeDirectory')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_ChangeDirectory')),\n        keyword(\n          arg='description',\n          value=Constant(value='Change directory of `ReservationOrder`.: Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id'))])],\n  type_params=[])"
  }
}