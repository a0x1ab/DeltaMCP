{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/AccessPolicyEntry/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/Permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": "enabled",
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/publicNetworkAccess"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultAccessPolicyProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": "enabled",
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/publicNetworkAccess"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": "enabled",
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/publicNetworkAccess"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/publicNetworkAccess"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/publicNetworkAccess"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
          },
          {
            "oldValue": "create",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
          },
          {
            "oldValue": "import",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
          },
          {
            "oldValue": "update",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
          },
          {
            "oldValue": "managecontacts",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
          },
          {
            "oldValue": "getissuers",
            "value": "managecontacts",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
          },
          {
            "oldValue": "listissuers",
            "value": "getissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
          },
          {
            "oldValue": "setissuers",
            "value": "listissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
          },
          {
            "oldValue": "deleteissuers",
            "value": "setissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
          },
          {
            "oldValue": "manageissuers",
            "value": "deleteissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
          },
          {
            "oldValue": "recover",
            "value": "manageissuers",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
          },
          {
            "oldValue": null,
            "value": "restore",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
          },
          {
            "oldValue": "encrypt",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
          },
          {
            "oldValue": "decrypt",
            "value": "encrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
          },
          {
            "oldValue": "wrapKey",
            "value": "decrypt",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
          },
          {
            "oldValue": "unwrapKey",
            "value": "wrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
          },
          {
            "oldValue": "sign",
            "value": "unwrapKey",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
          },
          {
            "oldValue": "verify",
            "value": "sign",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
          },
          {
            "oldValue": "get",
            "value": "verify",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
          },
          {
            "oldValue": "create",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
          },
          {
            "oldValue": "update",
            "value": "create",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
          },
          {
            "oldValue": "import",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
          },
          {
            "oldValue": "delete",
            "value": "import",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
          },
          {
            "oldValue": "release",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
          },
          {
            "oldValue": null,
            "value": "rotate",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "getrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "setrotationpolicy",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": null,
            "value": "release",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
          },
          {
            "oldValue": "set",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
          },
          {
            "oldValue": "delete",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
          },
          {
            "oldValue": "backup",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
          },
          {
            "oldValue": null,
            "value": "purge",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
          },
          {
            "oldValue": "get",
            "value": "all",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
          },
          {
            "oldValue": "list",
            "value": "get",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
          },
          {
            "oldValue": "delete",
            "value": "list",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
          },
          {
            "oldValue": "set",
            "value": "delete",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
          },
          {
            "oldValue": "update",
            "value": "set",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
          },
          {
            "oldValue": "regeneratekey",
            "value": "update",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
          },
          {
            "oldValue": "recover",
            "value": "regeneratekey",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
          },
          {
            "oldValue": "purge",
            "value": "recover",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
          },
          {
            "oldValue": "backup",
            "value": "purge",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
          },
          {
            "oldValue": "restore",
            "value": "backup",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
          },
          {
            "oldValue": "setsas",
            "value": "restore",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
          },
          {
            "oldValue": "listsas",
            "value": "setsas",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
          },
          {
            "oldValue": "getsas",
            "value": "listsas",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
          },
          {
            "oldValue": "deletesas",
            "value": "getsas",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
          },
          {
            "oldValue": null,
            "value": "deletesas",
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
          },
          {
            "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/enableRbacAuthorization/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": "enabled",
              "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/publicNetworkAccess"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2021-04-01-preview",
        "to": "2021-06-01-preview"
      }
    },
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Validate a vault name/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List deleted vaults in the specified subscription/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/deletedVaults?api-version=2021-04-01-preview&%24skiptoken=HY3RaoMwAEX%2fRcbeYhJrnRXKYNWOuqpME0sfNcYui0Yxade19N8ne7hcDlzOvVuKX81eKKmt4G4dooLQwgqsL2NGHUDYV6o68Z4rY1e388RtNvRQn2vNJjEaMSgNvcbneMUcsKg8BFwft8DndQ0w9hu2QOiFLRs4TsNFNHzSMBFsGvTQGvuD%2f5bVuTOw4R03vPkH%2fVqNAlzm5SxfOwh7ACOA8POTlvPjILlaU1ke8jImOc23JCppQVfZnna0DXc4ISc3vSVuRo5zJE6%2bj25C3vwk2v2kEV2mMn7PyOc1DbtNGkonnzuLym1G400uI5QRZj0efw%3d%3d",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/deletedVaults?api-version=2021-06-01-preview&%24skiptoken=HY3RaoMwAEX%2fRcbeYhJrnRXKYNWOuqpME0sfNcYui0Yxade19N8ne7hcDlzOvVuKX81eKKmt4G4dooLQwgqsL2NGHUDYV6o68Z4rY1e388RtNvRQn2vNJjEaMSgNvcbneMUcsKg8BFwft8DndQ0w9hu2QOiFLRs4TsNFNHzSMBFsGvTQGvuD%2f5bVuTOw4R03vPkH%2fVqNAlzm5SxfOwh7ACOA8POTlvPjILlaU1ke8jImOc23JCppQVfZnna0DXc4ISc3vSVuRo5zJE6%2bj25C3vwk2v2kEV2mMn7PyOc1DbtNGkonnzuLym1G400uI5QRZj0efw%3d%3d",
                        "op": "replace",
                        "from": "",
                        "path": "/List deleted vaults in the specified subscription/responses/200/body/nextLink"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Retrieve a deleted vault/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Purge a deleted vault/parameters/api-version"
                      },
                      {
                        "oldValue": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Purge a deleted vault/responses/404"
                      }
                    ]
                  }
                },
                "responses": {
                  "deleted": [
                    "404"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified subscription/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resources?api-version=22021-04-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resources?api-version=22021-06-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified subscription/responses/200/body/nextLink"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2021-04-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2021-06-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/nextLink"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Delete a vault/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Retrieve a vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Retrieve a vault/responses/200/body/properties/publicNetworkAccess"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Update an existing vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/parameters/parameters/properties/publicNetworkAccess"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/200/body/properties/publicNetworkAccess"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/201/body/properties/publicNetworkAccess"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "publicNetworkAccess"
                                  ],
                                  "modified": {
                                    "accessPolicies": {
                                      "items": {
                                        "properties": {
                                          "modified": {
                                            "permissions": {
                                              "properties": {
                                                "modified": {
                                                  "certificates": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "keys": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all",
                                                          "rotate",
                                                          "getrotationpolicy",
                                                          "setrotationpolicy"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "secrets": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "storage": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "enableRbacAuthorization": {
                                      "description": {
                                        "from": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
                                        "to": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/parameters/parameters/properties/publicNetworkAccess"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/publicNetworkAccess"
                      },
                      {
                        "oldValue": null,
                        "value": "Enabled",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/201/body/properties/publicNetworkAccess"
                      },
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create or update a vault with network acls/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "publicNetworkAccess"
                                  ],
                                  "modified": {
                                    "accessPolicies": {
                                      "items": {
                                        "properties": {
                                          "modified": {
                                            "permissions": {
                                              "properties": {
                                                "modified": {
                                                  "certificates": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "keys": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all",
                                                          "rotate",
                                                          "getrotationpolicy",
                                                          "setrotationpolicy"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "secrets": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "storage": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "enableRbacAuthorization": {
                                      "description": {
                                        "from": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                        "to": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            },
                            {
                              "oldValue": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "value": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "enabled",
                                "description": "Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/publicNetworkAccess"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}": {
          "operations": {
            "modified": {
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/parameters/api-version"
                      },
                      {
                        "oldValue": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/responses/404"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "accessPolicies": {
                                      "items": {
                                        "properties": {
                                          "modified": {
                                            "permissions": {
                                              "properties": {
                                                "modified": {
                                                  "certificates": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "keys": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all",
                                                          "rotate",
                                                          "getrotationpolicy",
                                                          "setrotationpolicy"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "secrets": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "storage": {
                                                    "items": {
                                                      "enum": {
                                                        "added": [
                                                          "all"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "deleted": [
                    "404"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/2"
                            },
                            {
                              "oldValue": "create",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/3"
                            },
                            {
                              "oldValue": "import",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/4"
                            },
                            {
                              "oldValue": "update",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/5"
                            },
                            {
                              "oldValue": "managecontacts",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/6"
                            },
                            {
                              "oldValue": "getissuers",
                              "value": "managecontacts",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/7"
                            },
                            {
                              "oldValue": "listissuers",
                              "value": "getissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/8"
                            },
                            {
                              "oldValue": "setissuers",
                              "value": "listissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/9"
                            },
                            {
                              "oldValue": "deleteissuers",
                              "value": "setissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/10"
                            },
                            {
                              "oldValue": "manageissuers",
                              "value": "deleteissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/11"
                            },
                            {
                              "oldValue": "recover",
                              "value": "manageissuers",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/12"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/13"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/14"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/15"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "encrypt",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/0"
                            },
                            {
                              "oldValue": "decrypt",
                              "value": "encrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/1"
                            },
                            {
                              "oldValue": "wrapKey",
                              "value": "decrypt",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/2"
                            },
                            {
                              "oldValue": "unwrapKey",
                              "value": "wrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/3"
                            },
                            {
                              "oldValue": "sign",
                              "value": "unwrapKey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/4"
                            },
                            {
                              "oldValue": "verify",
                              "value": "sign",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/5"
                            },
                            {
                              "oldValue": "get",
                              "value": "verify",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/6"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/7"
                            },
                            {
                              "oldValue": "create",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/8"
                            },
                            {
                              "oldValue": "update",
                              "value": "create",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/9"
                            },
                            {
                              "oldValue": "import",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/10"
                            },
                            {
                              "oldValue": "delete",
                              "value": "import",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/11"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/12"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/13"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/14"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/15"
                            },
                            {
                              "oldValue": "release",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/16"
                            },
                            {
                              "oldValue": null,
                              "value": "rotate",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "getrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "setrotationpolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "release",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/keys/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/1"
                            },
                            {
                              "oldValue": "set",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/2"
                            },
                            {
                              "oldValue": "delete",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/3"
                            },
                            {
                              "oldValue": "backup",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/4"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/7"
                            },
                            {
                              "oldValue": null,
                              "value": "purge",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/secrets/items/enum/-"
                            },
                            {
                              "oldValue": "get",
                              "value": "all",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/0"
                            },
                            {
                              "oldValue": "list",
                              "value": "get",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/1"
                            },
                            {
                              "oldValue": "delete",
                              "value": "list",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/2"
                            },
                            {
                              "oldValue": "set",
                              "value": "delete",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/3"
                            },
                            {
                              "oldValue": "update",
                              "value": "set",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/4"
                            },
                            {
                              "oldValue": "regeneratekey",
                              "value": "update",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/5"
                            },
                            {
                              "oldValue": "recover",
                              "value": "regeneratekey",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/6"
                            },
                            {
                              "oldValue": "purge",
                              "value": "recover",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/7"
                            },
                            {
                              "oldValue": "backup",
                              "value": "purge",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/8"
                            },
                            {
                              "oldValue": "restore",
                              "value": "backup",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/9"
                            },
                            {
                              "oldValue": "setsas",
                              "value": "restore",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/10"
                            },
                            {
                              "oldValue": "listsas",
                              "value": "setsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/11"
                            },
                            {
                              "oldValue": "getsas",
                              "value": "listsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/12"
                            },
                            {
                              "oldValue": "deletesas",
                              "value": "getsas",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/13"
                            },
                            {
                              "oldValue": null,
                              "value": "deletesas",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/items/properties/permissions/properties/storage/items/enum/-"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-04-01-preview",
                        "value": "2021-06-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/KeyVaultListPrivateEndpointConnection/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resources": {
          "operations": {
            "modified": {
              "GET": {
                "parameters": {
                  "modified": {
                    "query": {
                      "$filter": {
                        "extensions": {
                          "added": [
                            "x-ms-enum"
                          ]
                        }
                      },
                      "api-version": {
                        "extensions": {
                          "added": [
                            "x-ms-enum"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Update": "FunctionDef(\n  name='Vaults_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_UpdateAccessPolicy": "FunctionDef(\n  name='Vaults_UpdateAccessPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationKind',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update access policies in a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessPolicies/'),\n          FormattedValue(\n            value=Name(id='operationKind', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationKind', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationKind')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_UpdateAccessPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update access policies in a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_ListBySubscription": "FunctionDef(\n  name='Vaults_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_ListDeleted": "FunctionDef(\n  name='Vaults_ListDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets information about the deleted vaults in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/deletedVaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets information about the deleted vaults in a subscription.'))])],\n  type_params=[])",
    "Vaults_GetDeleted": "FunctionDef(\n  name='Vaults_GetDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_GetDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_PurgeDeleted": "FunctionDef(\n  name='Vaults_PurgeDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/purge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_PurgeDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_CheckNameAvailability": "FunctionDef(\n  name='Vaults_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the vault name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the vault name is valid and is not already in use.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Get": "FunctionDef(\n  name='PrivateEndpointConnections_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Put": "FunctionDef(\n  name='PrivateEndpointConnections_Put',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Put')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Delete": "FunctionDef(\n  name='PrivateEndpointConnections_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_ListByResource": "FunctionDef(\n  name='PrivateEndpointConnections_ListByResource',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the private endpoint connections associated with the vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_ListByResource')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the private endpoint connections associated with the vault.'))])],\n  type_params=[])",
    "PrivateLinkResources_ListByVault": "FunctionDef(\n  name='PrivateLinkResources_ListByVault',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the private link resources supported for the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateLinkResources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateLinkResources_ListByVault')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the private link resources supported for the key vault.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Update": "FunctionDef(\n  name='Vaults_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_UpdateAccessPolicy": "FunctionDef(\n  name='Vaults_UpdateAccessPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationKind',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update access policies in a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessPolicies/'),\n          FormattedValue(\n            value=Name(id='operationKind', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationKind', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationKind')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_UpdateAccessPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update access policies in a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_ListBySubscription": "FunctionDef(\n  name='Vaults_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_ListDeleted": "FunctionDef(\n  name='Vaults_ListDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets information about the deleted vaults in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/deletedVaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets information about the deleted vaults in a subscription.'))])],\n  type_params=[])",
    "Vaults_GetDeleted": "FunctionDef(\n  name='Vaults_GetDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_GetDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_PurgeDeleted": "FunctionDef(\n  name='Vaults_PurgeDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/purge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_PurgeDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_CheckNameAvailability": "FunctionDef(\n  name='Vaults_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the vault name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the vault name is valid and is not already in use.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Get": "FunctionDef(\n  name='PrivateEndpointConnections_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Put": "FunctionDef(\n  name='PrivateEndpointConnections_Put',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Put')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Delete": "FunctionDef(\n  name='PrivateEndpointConnections_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_ListByResource": "FunctionDef(\n  name='PrivateEndpointConnections_ListByResource',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the private endpoint connections associated with the vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_ListByResource')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the private endpoint connections associated with the vault.'))])],\n  type_params=[])",
    "PrivateLinkResources_ListByVault": "FunctionDef(\n  name='PrivateLinkResources_ListByVault',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the private link resources supported for the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateLinkResources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateLinkResources_ListByVault')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the private link resources supported for the key vault.'))])],\n  type_params=[])"
  }
}