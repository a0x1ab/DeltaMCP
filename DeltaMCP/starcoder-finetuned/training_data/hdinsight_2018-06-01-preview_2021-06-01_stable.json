{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": [
              "meter"
            ],
            "op": "add",
            "from": "",
            "path": "/BillingResources/properties/billingMeters/x-ms-identifiers"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/BillingResources/properties/diskBillingMeters/items/properties/tier/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": [
              "diskRpMeter"
            ],
            "op": "add",
            "from": "",
            "path": "/BillingResources/properties/diskBillingMeters/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "meter"
            ],
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/billingResources/items/properties/billingMeters/x-ms-identifiers"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/BillingResponseListResult/properties/billingResources/items/properties/diskBillingMeters/items/properties/tier/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": [
              "diskRpMeter"
            ],
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/billingResources/items/properties/diskBillingMeters/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/billingResources/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/vmSizeFilters/items/properties/computeIsolationSupported"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/vmSizeFilters/items/properties/espApplied"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/BillingResponseListResult/properties/vmSizeFilters/items/properties/osType/items/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/vmSizeFilters/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/BillingResponseListResult/properties/vmSizeProperties/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores used in the subscription.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/coresUsed"
          },
          {
            "oldValue": {
              "description": "The number of cores used in the subscription.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/cores_used"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores that the subscription allowed.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/maxCoresAllowed"
          },
          {
            "oldValue": {
              "description": "The number of cores that the subscription allowed.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/max_cores_allowed"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/coresAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/coresUsed"
          },
          {
            "oldValue": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/cores_available"
          },
          {
            "oldValue": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/cores_used"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The region name.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/regionName"
          },
          {
            "oldValue": {
              "description": "The region name.",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/properties/region_name"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "regionName"
            ],
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/properties/regionalQuotas/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/quota/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/regions/additionalProperties/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/versions/additionalProperties/properties/available/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "friendlyName"
            ],
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/versions/additionalProperties/properties/available/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/properties/versions/additionalProperties/type"
          },
          {
            "oldValue": {
              "description": "The virtual machine size compatibility filters.",
              "items": {
                "description": "The virtual machine type compatibility filter.",
                "properties": {
                  "ClusterFlavors": {
                    "description": "The list of cluster types available.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "ClusterVersions": {
                    "description": "The list of cluster versions.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "ComputeIsolationSupported": {
                    "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
                    "type": "string"
                  },
                  "ESPApplied": {
                    "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
                    "type": "string"
                  },
                  "FilterMode": {
                    "description": "The mode for the filter.",
                    "type": "string"
                  },
                  "NodeTypes": {
                    "description": "The list of node types.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "OsType": {
                    "description": "The list of OS types.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "Regions": {
                    "description": "The list of regions.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "VMSizes": {
                    "description": "The list of virtual machine sizes.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "readOnly": true
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/vmsize_filters"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "description": "The virtual machine sizes capability.",
                "properties": {
                  "available": {
                    "description": "The list of virtual machine size capabilities.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "readOnly": true
              },
              "description": "The virtual machine sizes.",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CapabilitiesResult/properties/vmsizes"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/CapabilitiesResult/type"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/identity/properties/type/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": "The User Assigned Identity",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/identity/properties/userAssignedIdentities/additionalProperties/description"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/identity/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/clusterDefinition/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeIsolationProperties/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/capacity/type"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/recurrence/properties/schedule/items/properties/days/items/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/recurrence/properties/schedule/items/properties/timeAndCapacity/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/recurrence/properties/schedule/items/type"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/recurrence/properties/schedule/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/properties/recurrence/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/autoscale/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/dataDisksGroups/items/type"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/dataDisksGroups/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/hardwareProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/osProfile/properties/linuxOperatingSystemProfile/properties/sshProfile/properties/publicKeys/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "certificateData"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/osProfile/properties/linuxOperatingSystemProfile/properties/sshProfile/properties/publicKeys/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/osProfile/properties/linuxOperatingSystemProfile/properties/sshProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/osProfile/properties/linuxOperatingSystemProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/osProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/scriptActions/items/type"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/scriptActions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/properties/virtualNetworkProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/properties/roles/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/computeProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/diskEncryptionProperties/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/encryptionInTransitProperties/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/kafkaRestProperties/properties/clientGroupInfo/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/kafkaRestProperties/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/networkProperties/type"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/osType/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The private link configurations.",
              "items": {
                "description": "The private link configuration.",
                "properties": {
                  "id": {
                    "description": "The private link configuration id.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of private link configuration.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "The private link configuration properties.",
                    "properties": {
                      "groupId": {
                        "description": "The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.",
                        "type": "string"
                      },
                      "ipConfigurations": {
                        "description": "The IP configurations for the private link service.",
                        "items": {
                          "description": "The ip configurations for the private link service.",
                          "properties": {
                            "id": {
                              "description": "The private link IP configuration id.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of private link IP configuration.",
                              "type": "string"
                            },
                            "properties": {
                              "description": "The private link ip configuration properties.",
                              "properties": {
                                "primary": {
                                  "description": "Indicates whether this IP configuration is primary for the corresponding NIC.",
                                  "type": "boolean"
                                },
                                "privateIPAddress": {
                                  "description": "The IP address.",
                                  "type": "string"
                                },
                                "privateIPAllocationMethod": {
                                  "description": "The method that private IP address is allocated.",
                                  "enum": [
                                    "dynamic",
                                    "static"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "PrivateIPAllocationMethod"
                                  }
                                },
                                "provisioningState": {
                                  "description": "The private link configuration provisioning state, which only appears in the response.",
                                  "enum": [
                                    "InProgress",
                                    "Failed",
                                    "Succeeded",
                                    "Canceled",
                                    "Deleting"
                                  ],
                                  "readOnly": true,
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "PrivateLinkConfigurationProvisioningState"
                                  }
                                },
                                "subnet": {
                                  "description": "The azure resource id.",
                                  "properties": {
                                    "id": {
                                      "description": "The azure resource id.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of the private link IP configuration.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "provisioningState": {
                        "description": "The private link configuration provisioning state, which only appears in the response.",
                        "enum": [
                          "InProgress",
                          "Failed",
                          "Succeeded",
                          "Canceled",
                          "Deleting"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PrivateLinkConfigurationProvisioningState"
                        }
                      }
                    },
                    "required": [
                      "groupId",
                      "ipConfigurations"
                    ],
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of the private link configuration.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "properties"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/privateLinkConfigurations"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/securityProfile/properties/directoryType/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/securityProfile/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/storageProfile/properties/storageaccounts/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/storageProfile/properties/storageaccounts/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/storageProfile/type"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/properties/tier/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/properties/type"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The availability zones.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/properties/zones"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/allOf/0/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/ClusterCreateRequestValidationParameters/type"
          },
          {
            "oldValue": null,
            "value": [
              "resourceId"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateValidationResult/properties/aaddsResourcesDetails/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "code"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateValidationResult/properties/validationErrors/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "code"
            ],
            "op": "add",
            "from": "",
            "path": "/ClusterCreateValidationResult/properties/validationWarnings/x-ms-identifiers"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/DiskBillingMeters/properties/tier/x-ms-enum/modelAsString"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/LocalizedName/type"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores used in the subscription.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/coresUsed"
          },
          {
            "oldValue": {
              "description": "The number of cores used in the subscription.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QuotaCapability/properties/cores_used"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores that the subscription allowed.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/maxCoresAllowed"
          },
          {
            "oldValue": {
              "description": "The number of cores that the subscription allowed.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QuotaCapability/properties/max_cores_allowed"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/coresAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/coresUsed"
          },
          {
            "oldValue": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/cores_available"
          },
          {
            "oldValue": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/cores_used"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The region name.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/regionName"
          },
          {
            "oldValue": {
              "description": "The region name.",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/properties/region_name"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "regionName"
            ],
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/properties/regionalQuotas/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/QuotaCapability/type"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/coresAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/coresUsed"
          },
          {
            "oldValue": {
              "description": "The number of cores available in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/cores_available"
          },
          {
            "oldValue": {
              "description": "The number of cores used in the region.",
              "format": "int64",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/cores_used"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The region name.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/regionName"
          },
          {
            "oldValue": {
              "description": "The region name.",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RegionalQuotaCapability/properties/region_name"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/RegionalQuotaCapability/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/RegionsCapability/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/Usage/properties/name/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/Usage/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/UsagesListResult/properties/value/items/properties/name/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/UsagesListResult/properties/value/items/type"
          },
          {
            "oldValue": null,
            "value": [],
            "op": "add",
            "from": "",
            "path": "/UsagesListResult/properties/value/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/UsagesListResult/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/VersionSpec/type"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/VersionsCapability/properties/available/items/type"
          },
          {
            "oldValue": null,
            "value": [
              "friendlyName"
            ],
            "op": "add",
            "from": "",
            "path": "/VersionsCapability/properties/available/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": "object",
            "op": "add",
            "from": "",
            "path": "/VersionsCapability/type"
          },
          {
            "oldValue": {
              "description": "The virtual machine type compatibility filter.",
              "properties": {
                "ClusterFlavors": {
                  "description": "The list of cluster types available.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ClusterVersions": {
                  "description": "The list of cluster versions.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ComputeIsolationSupported": {
                  "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
                  "type": "string"
                },
                "ESPApplied": {
                  "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
                  "type": "string"
                },
                "FilterMode": {
                  "description": "The mode for the filter.",
                  "type": "string"
                },
                "NodeTypes": {
                  "description": "The list of node types.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "OsType": {
                  "description": "The list of OS types.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "Regions": {
                  "description": "The list of regions.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "VMSizes": {
                  "description": "The list of virtual machine sizes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "readOnly": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VmSizeCompatibilityFilter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VmSizeCompatibilityFilterV2/properties/computeIsolationSupported"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VmSizeCompatibilityFilterV2/properties/espApplied"
          },
          {
            "oldValue": false,
            "value": true,
            "op": "replace",
            "from": "",
            "path": "/VmSizeCompatibilityFilterV2/properties/osType/items/x-ms-enum/modelAsString"
          },
          {
            "oldValue": {
              "description": "The virtual machine sizes capability.",
              "properties": {
                "available": {
                  "description": "The list of virtual machine size capabilities.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "readOnly": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VmSizesCapability"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2018-06-01-preview",
        "to": "2021-06-01"
      }
    },
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/azureasyncoperations/{operationId}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Gets the azure async operation status./parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/error/type"
                            },
                            {
                              "oldValue": false,
                              "value": true,
                              "op": "replace",
                              "from": "",
                              "path": "/properties/status/x-ms-enum/modelAsString"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/type"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/billingSpecs": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get the subscription billingSpecs for the specified location/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                "meter"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/billingResources/items/properties/billingMeters/x-ms-identifiers"
                            },
                            {
                              "oldValue": false,
                              "value": true,
                              "op": "replace",
                              "from": "",
                              "path": "/properties/billingResources/items/properties/diskBillingMeters/items/properties/tier/x-ms-enum/modelAsString"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "diskRpMeter"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/billingResources/items/properties/diskBillingMeters/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [],
                              "op": "add",
                              "from": "",
                              "path": "/properties/billingResources/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/vmSizeFilters/items/properties/computeIsolationSupported"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/vmSizeFilters/items/properties/espApplied"
                            },
                            {
                              "oldValue": false,
                              "value": true,
                              "op": "replace",
                              "from": "",
                              "path": "/properties/vmSizeFilters/items/properties/osType/items/x-ms-enum/modelAsString"
                            },
                            {
                              "oldValue": null,
                              "value": [],
                              "op": "add",
                              "from": "",
                              "path": "/properties/vmSizeFilters/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "name"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/vmSizeProperties/x-ms-identifiers"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/capabilities": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/coresUsed"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": 3000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/maxCoresAllowed"
                      },
                      {
                        "oldValue": 3000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/max_cores_allowed"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Australia East",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/regionName"
                      },
                      {
                        "oldValue": "Australia East",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/0/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Australia Southeast",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/regionName"
                      },
                      {
                        "oldValue": "Australia Southeast",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/1/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Brazil South",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/regionName"
                      },
                      {
                        "oldValue": "Brazil South",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/2/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Canada Central",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/regionName"
                      },
                      {
                        "oldValue": "Canada Central",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/3/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Canada East",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/regionName"
                      },
                      {
                        "oldValue": "Canada East",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/4/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Central India",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/regionName"
                      },
                      {
                        "oldValue": "Central India",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/5/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 24,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/cores_available"
                      },
                      {
                        "oldValue": 24,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Central US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/regionName"
                      },
                      {
                        "oldValue": "Central US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/6/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Central US EUAP",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/regionName"
                      },
                      {
                        "oldValue": "Central US EUAP",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/7/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 24,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/cores_available"
                      },
                      {
                        "oldValue": 24,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "East Asia",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/regionName"
                      },
                      {
                        "oldValue": "East Asia",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/8/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 24,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/cores_available"
                      },
                      {
                        "oldValue": 24,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "East US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/regionName"
                      },
                      {
                        "oldValue": "East US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/9/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "East US 2",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/regionName"
                      },
                      {
                        "oldValue": "East US 2",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/10/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Japan East",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/regionName"
                      },
                      {
                        "oldValue": "Japan East",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/11/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Japan West",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/regionName"
                      },
                      {
                        "oldValue": "Japan West",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/12/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "North Central US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/regionName"
                      },
                      {
                        "oldValue": "North Central US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/13/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "North Europe",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/regionName"
                      },
                      {
                        "oldValue": "North Europe",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/14/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "South Central US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/regionName"
                      },
                      {
                        "oldValue": "South Central US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/15/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "Southeast Asia",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/regionName"
                      },
                      {
                        "oldValue": "Southeast Asia",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/16/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "West Central US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/regionName"
                      },
                      {
                        "oldValue": "West Central US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/17/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "West Europe",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/regionName"
                      },
                      {
                        "oldValue": "West Europe",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/18/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 132,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/cores_available"
                      },
                      {
                        "oldValue": 132,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "West US",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/regionName"
                      },
                      {
                        "oldValue": "West US",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/19/region_name"
                      },
                      {
                        "oldValue": null,
                        "value": 1000,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/coresAvailable"
                      },
                      {
                        "oldValue": null,
                        "value": 0,
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/coresUsed"
                      },
                      {
                        "oldValue": 1000,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/cores_available"
                      },
                      {
                        "oldValue": 0,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/cores_used"
                      },
                      {
                        "oldValue": null,
                        "value": "West US 2",
                        "op": "add",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/regionName"
                      },
                      {
                        "oldValue": "West US 2",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/quota/regionalQuotas/20/region_name"
                      },
                      {
                        "oldValue": [
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A5"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A5"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A5"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A5"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A5"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A6"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A6"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A6"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A6"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A7"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A7"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A7"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "A7"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "EXTRALARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "EXTRALARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "WorkerNodeRole",
                              "EdgeNodeRole",
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "EXTRALARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "EXTRALARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "LARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "LARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "LARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "LARGE"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "MEDIUM"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "MEDIUM"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "MEDIUM"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "SMALL"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "SMALL"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "SMALL"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "SMALL"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D12"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D13"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D13"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D13"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D13"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D13_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D13_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D13_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D14"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole",
                              "EdgeNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D3"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D4"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Sandbox"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D5_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "Hadoop",
                              "Spark"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D5_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "Brazil South",
                              "Japan West"
                            ],
                            "VMSizes": [
                              "STANDARD_D5_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "1.6",
                              "2.1",
                              "3.0"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "*"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D5_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "InteractiveHive"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Exclude",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "*"
                            ],
                            "VMSizes": [
                              "STANDARD_D5_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D1_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D11_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D12_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D13_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D13_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D14_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D2_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D3_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "*"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "HeadNodeRole",
                              "WorkerNodeRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          },
                          {
                            "ClusterFlavors": [
                              "HBase",
                              "Storm"
                            ],
                            "ClusterVersions": [
                              "*"
                            ],
                            "FilterMode": "Include",
                            "NodeTypes": [
                              "ZookeeperRole"
                            ],
                            "Regions": [
                              "Central India"
                            ],
                            "VMSizes": [
                              "STANDARD_D4_V2"
                            ]
                          }
                        ],
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/vmsize_filters"
                      },
                      {
                        "oldValue": {
                          "iaas": {
                            "available": [
                              "A5",
                              "A6",
                              "A7",
                              "EXTRALARGE",
                              "LARGE",
                              "MEDIUM",
                              "SMALL",
                              "STANDARD_D1",
                              "STANDARD_D1_V2",
                              "STANDARD_D11",
                              "STANDARD_D11_V2",
                              "STANDARD_D12",
                              "STANDARD_D12_V2",
                              "STANDARD_D13",
                              "STANDARD_D13_V2",
                              "STANDARD_D14",
                              "STANDARD_D14_V2",
                              "STANDARD_D2",
                              "STANDARD_D2_V2",
                              "STANDARD_D3",
                              "STANDARD_D3_V2",
                              "STANDARD_D4",
                              "STANDARD_D4_V2",
                              "STANDARD_D5_V2"
                            ]
                          },
                          "paas": {
                            "available": [
                              "A5",
                              "A6",
                              "A7",
                              "EXTRALARGE",
                              "LARGE",
                              "MEDIUM",
                              "SMALL",
                              "STANDARD_D1",
                              "STANDARD_D1_V2",
                              "STANDARD_D11",
                              "STANDARD_D11_V2",
                              "STANDARD_D12",
                              "STANDARD_D12_V2",
                              "STANDARD_D13",
                              "STANDARD_D13_V2",
                              "STANDARD_D14",
                              "STANDARD_D14_V2",
                              "STANDARD_D2",
                              "STANDARD_D2_V2",
                              "STANDARD_D3",
                              "STANDARD_D3_V2",
                              "STANDARD_D4",
                              "STANDARD_D4_V2",
                              "STANDARD_D5_V2"
                            ]
                          }
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Get the subscription capabilities for specific location/responses/200/body/vmsizes"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The number of cores used in the subscription.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/coresUsed"
                            },
                            {
                              "oldValue": {
                                "description": "The number of cores used in the subscription.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/quota/properties/cores_used"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The number of cores that the subscription allowed.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/maxCoresAllowed"
                            },
                            {
                              "oldValue": {
                                "description": "The number of cores that the subscription allowed.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/quota/properties/max_cores_allowed"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The number of cores available in the region.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/coresAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The number of cores used in the region.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/coresUsed"
                            },
                            {
                              "oldValue": {
                                "description": "The number of cores available in the region.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/cores_available"
                            },
                            {
                              "oldValue": {
                                "description": "The number of cores used in the region.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/cores_used"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The region name.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/regionName"
                            },
                            {
                              "oldValue": {
                                "description": "The region name.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/properties/region_name"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/items/type"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "regionName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/properties/regionalQuotas/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/quota/type"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/regions/additionalProperties/type"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/versions/additionalProperties/properties/available/items/type"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "friendlyName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/versions/additionalProperties/properties/available/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/versions/additionalProperties/type"
                            },
                            {
                              "oldValue": {
                                "description": "The virtual machine size compatibility filters.",
                                "items": {
                                  "description": "The virtual machine type compatibility filter.",
                                  "properties": {
                                    "ClusterFlavors": {
                                      "description": "The list of cluster types available.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "ClusterVersions": {
                                      "description": "The list of cluster versions.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "ComputeIsolationSupported": {
                                      "description": "Whether support compute isolation. 'true' means only for ComputeIsolationEnabled, 'false' means only for regular cluster.",
                                      "type": "string"
                                    },
                                    "ESPApplied": {
                                      "description": "Whether apply for ESP cluster. 'true' means only for ESP, 'false' means only for non-ESP, null or empty string or others mean for both.",
                                      "type": "string"
                                    },
                                    "FilterMode": {
                                      "description": "The mode for the filter.",
                                      "type": "string"
                                    },
                                    "NodeTypes": {
                                      "description": "The list of node types.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "OsType": {
                                      "description": "The list of OS types.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "Regions": {
                                      "description": "The list of regions.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "VMSizes": {
                                      "description": "The list of virtual machine sizes.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "readOnly": true
                                },
                                "type": "array"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/vmsize_filters"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "description": "The virtual machine sizes capability.",
                                  "properties": {
                                    "available": {
                                      "description": "The list of virtual machine size capabilities.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "readOnly": true
                                },
                                "description": "The virtual machine sizes.",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/vmsizes"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/type"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/checkNameAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get the subscription usages for specific location/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get the subscription usages for specific location/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/name/type"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/type"
                            },
                            {
                              "oldValue": null,
                              "value": [],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": "object",
                              "op": "add",
                              "from": "",
                              "path": "/type"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-06-01-preview",
                        "value": "2021-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get the subscription usages for specific location/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "allOf": {
                            "modified": [
                              {
                                "base": {
                                  "index": 0
                                },
                                "revision": {
                                  "index": 0
                                },
                                "diff": {
                                  "type": {
                                    "added": [
                                      "object"
                                    ]
                                  },
                                  "properties": {
                                    "added": [
                                      "zones"
                                    ],
                                    "modified": {
                                      "identity": {
                                        "type": {
                                          "added": [
                                            "object"
                                          ]
                                        },
                                        "properties": {
                                          "modified": {
                                            "type": {
                                              "extensions": {
                                                "modified": {
                                                  "x-ms-enum": [
                                                    {
                                                      "oldValue": false,
                                                      "value": true,
                                                      "op": "replace",
                                                      "from": "",
                                                      "path": "/modelAsString"
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "userAssignedIdentities": {
                                              "additionalProperties": {
                                                "description": {
                                                  "from": "",
                                                  "to": "The User Assigned Identity"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "properties": {
                                        "type": {
                                          "added": [
                                            "object"
                                          ]
                                        },
                                        "properties": {
                                          "added": [
                                            "privateLinkConfigurations"
                                          ],
                                          "modified": {
                                            "clusterDefinition": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              }
                                            },
                                            "computeIsolationProperties": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              }
                                            },
                                            "computeProfile": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              },
                                              "properties": {
                                                "modified": {
                                                  "roles": {
                                                    "extensions": {
                                                      "added": [
                                                        "x-ms-identifiers"
                                                      ]
                                                    },
                                                    "items": {
                                                      "type": {
                                                        "added": [
                                                          "object"
                                                        ]
                                                      },
                                                      "properties": {
                                                        "modified": {
                                                          "autoscale": {
                                                            "type": {
                                                              "added": [
                                                                "object"
                                                              ]
                                                            },
                                                            "properties": {
                                                              "modified": {
                                                                "capacity": {
                                                                  "type": {
                                                                    "added": [
                                                                      "object"
                                                                    ]
                                                                  }
                                                                },
                                                                "recurrence": {
                                                                  "type": {
                                                                    "added": [
                                                                      "object"
                                                                    ]
                                                                  },
                                                                  "properties": {
                                                                    "modified": {
                                                                      "schedule": {
                                                                        "extensions": {
                                                                          "added": [
                                                                            "x-ms-identifiers"
                                                                          ]
                                                                        },
                                                                        "items": {
                                                                          "type": {
                                                                            "added": [
                                                                              "object"
                                                                            ]
                                                                          },
                                                                          "properties": {
                                                                            "modified": {
                                                                              "days": {
                                                                                "items": {
                                                                                  "extensions": {
                                                                                    "modified": {
                                                                                      "x-ms-enum": [
                                                                                        {
                                                                                          "oldValue": false,
                                                                                          "value": true,
                                                                                          "op": "replace",
                                                                                          "from": "",
                                                                                          "path": "/modelAsString"
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  }
                                                                                }
                                                                              },
                                                                              "timeAndCapacity": {
                                                                                "type": {
                                                                                  "added": [
                                                                                    "object"
                                                                                  ]
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "dataDisksGroups": {
                                                            "extensions": {
                                                              "added": [
                                                                "x-ms-identifiers"
                                                              ]
                                                            },
                                                            "items": {
                                                              "type": {
                                                                "added": [
                                                                  "object"
                                                                ]
                                                              }
                                                            }
                                                          },
                                                          "hardwareProfile": {
                                                            "type": {
                                                              "added": [
                                                                "object"
                                                              ]
                                                            }
                                                          },
                                                          "osProfile": {
                                                            "type": {
                                                              "added": [
                                                                "object"
                                                              ]
                                                            },
                                                            "properties": {
                                                              "modified": {
                                                                "linuxOperatingSystemProfile": {
                                                                  "type": {
                                                                    "added": [
                                                                      "object"
                                                                    ]
                                                                  },
                                                                  "properties": {
                                                                    "modified": {
                                                                      "sshProfile": {
                                                                        "type": {
                                                                          "added": [
                                                                            "object"
                                                                          ]
                                                                        },
                                                                        "properties": {
                                                                          "modified": {
                                                                            "publicKeys": {
                                                                              "extensions": {
                                                                                "added": [
                                                                                  "x-ms-identifiers"
                                                                                ]
                                                                              },
                                                                              "items": {
                                                                                "type": {
                                                                                  "added": [
                                                                                    "object"
                                                                                  ]
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "scriptActions": {
                                                            "extensions": {
                                                              "added": [
                                                                "x-ms-identifiers"
                                                              ]
                                                            },
                                                            "items": {
                                                              "type": {
                                                                "added": [
                                                                  "object"
                                                                ]
                                                              }
                                                            }
                                                          },
                                                          "virtualNetworkProfile": {
                                                            "type": {
                                                              "added": [
                                                                "object"
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "diskEncryptionProperties": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              }
                                            },
                                            "encryptionInTransitProperties": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              }
                                            },
                                            "kafkaRestProperties": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              },
                                              "properties": {
                                                "modified": {
                                                  "clientGroupInfo": {
                                                    "type": {
                                                      "added": [
                                                        "object"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkProperties": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              }
                                            },
                                            "osType": {
                                              "extensions": {
                                                "modified": {
                                                  "x-ms-enum": [
                                                    {
                                                      "oldValue": false,
                                                      "value": true,
                                                      "op": "replace",
                                                      "from": "",
                                                      "path": "/modelAsString"
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "securityProfile": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              },
                                              "properties": {
                                                "modified": {
                                                  "directoryType": {
                                                    "extensions": {
                                                      "modified": {
                                                        "x-ms-enum": [
                                                          {
                                                            "oldValue": false,
                                                            "value": true,
                                                            "op": "replace",
                                                            "from": "",
                                                            "path": "/modelAsString"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "storageProfile": {
                                              "type": {
                                                "added": [
                                                  "object"
                                                ]
                                              },
                                              "properties": {
                                                "modified": {
                                                  "storageaccounts": {
                                                    "extensions": {
                                                      "added": [
                                                        "x-ms-identifiers"
                                                      ]
                                                    },
                                                    "items": {
                                                      "type": {
                                                        "added": [
                                                          "object"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "tier": {
                                              "extensions": {
                                                "modified": {
                                                  "x-ms-enum": [
                                                    {
                                                      "oldValue": false,
                                                      "value": true,
                                                      "op": "replace",
                                                      "from": "",
                                                      "path": "/modelAsString"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "type": {
                            "added": [
                              "object"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                "resourceId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/aaddsResourcesDetails/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "code"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/validationErrors/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "code"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/validationWarnings/x-ms-identifiers"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Locations_GetCapabilities": "FunctionDef(\n  name='Locations_GetCapabilities',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the capabilities for the specified location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capabilities')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_GetCapabilities')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the capabilities for the specified location.'))])],\n  type_params=[])",
    "Locations_ListUsages": "FunctionDef(\n  name='Locations_ListUsages',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usages for the specified location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/usages')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ListUsages')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usages for the specified location.'))])],\n  type_params=[])",
    "Locations_ListBillingSpecs": "FunctionDef(\n  name='Locations_ListBillingSpecs',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the billingSpecs for the specified subscription and location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/billingSpecs')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ListBillingSpecs')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the billingSpecs for the specified subscription and location.'))])],\n  type_params=[])",
    "Locations_GetAzureAsyncOperationStatus": "FunctionDef(\n  name='Locations_GetAzureAsyncOperationStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the async operation status.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/azureasyncoperations/'),\n          FormattedValue(\n            value=Name(id='operationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_GetAzureAsyncOperationStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the async operation status.'))])],\n  type_params=[])",
    "Locations_CheckNameAvailability": "FunctionDef(\n  name='Locations_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check the cluster name is available or not.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check the cluster name is available or not.'))])],\n  type_params=[])",
    "Locations_ValidateClusterCreateRequest": "FunctionDef(\n  name='Locations_ValidateClusterCreateRequest',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Validate the cluster create request spec is valid or not.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/validateCreateRequest')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ValidateClusterCreateRequest')),\n        keyword(\n          arg='description',\n          value=Constant(value='Validate the cluster create request spec is valid or not.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Locations_GetCapabilities": "FunctionDef(\n  name='Locations_GetCapabilities',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the capabilities for the specified location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capabilities')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_GetCapabilities')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the capabilities for the specified location.'))])],\n  type_params=[])",
    "Locations_ListUsages": "FunctionDef(\n  name='Locations_ListUsages',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usages for the specified location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/usages')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ListUsages')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usages for the specified location.'))])],\n  type_params=[])",
    "Locations_ListBillingSpecs": "FunctionDef(\n  name='Locations_ListBillingSpecs',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the billingSpecs for the specified subscription and location.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/billingSpecs')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ListBillingSpecs')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the billingSpecs for the specified subscription and location.'))])],\n  type_params=[])",
    "Locations_GetAzureAsyncOperationStatus": "FunctionDef(\n  name='Locations_GetAzureAsyncOperationStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the async operation status.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/azureasyncoperations/'),\n          FormattedValue(\n            value=Name(id='operationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_GetAzureAsyncOperationStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the async operation status.'))])],\n  type_params=[])",
    "Locations_CheckNameAvailability": "FunctionDef(\n  name='Locations_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check the cluster name is available or not.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check the cluster name is available or not.'))])],\n  type_params=[])",
    "Locations_ValidateClusterCreateRequest": "FunctionDef(\n  name='Locations_ValidateClusterCreateRequest',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Validate the cluster create request spec is valid or not.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.HDInsight/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/validateCreateRequest')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Locations_ValidateClusterCreateRequest')),\n        keyword(\n          arg='description',\n          value=Constant(value='Validate the cluster create request spec is valid or not.'))])],\n  type_params=[])"
  }
}