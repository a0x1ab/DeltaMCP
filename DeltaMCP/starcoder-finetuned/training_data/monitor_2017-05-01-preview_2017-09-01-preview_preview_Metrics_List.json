{
  "oasdiff": {
    "paths": {
      "added": {
        "/{resourceUri}/providers/Microsoft.Insights/metrics": {
          "operations": {
            "added": {
              "get": {
                "tags": [
                  "Metrics"
                ],
                "operationId": "Metrics_List",
                "description": "**Lists the metric values for a resource**.",
                "parameters": [
                  {
                    "$ref": "#/parameters/ResourceUriParameter"
                  },
                  {
                    "$ref": "#/parameters/TimespanParameter"
                  },
                  {
                    "$ref": "#/parameters/IntervalParameter"
                  },
                  {
                    "$ref": "#/parameters/MetricParameter"
                  },
                  {
                    "$ref": "#/parameters/AggregationsParameter"
                  },
                  {
                    "$ref": "#/parameters/TopParameter"
                  },
                  {
                    "$ref": "#/parameters/OrderByParameter"
                  },
                  {
                    "name": "$filter",
                    "in": "query",
                    "type": "string",
                    "description": "The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.",
                    "required": false
                  },
                  {
                    "$ref": "#/parameters/ResultTypeParameter"
                  },
                  {
                    "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "default": {
                    "description": "Error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ErrorResponse"
                    }
                  },
                  "200": {
                    "description": "Successful request to get the list of metric values.",
                    "schema": {
                      "$ref": "#/definitions/Response"
                    },
                    "examples": {
                      "application/json": {
                        "cost": 0,
                        "timespan": "2017-08-10T21:44:34Z/2017-08-10T22:44:34Z",
                        "interval": "PT1M",
                        "value": [
                          {
                            "id": "/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/Microsoft.Insights/metrics/CpuTime",
                            "type": "Microsoft.Insights/metrics",
                            "name": {
                              "value": "CpuTime",
                              "localizedValue": "CPU Time"
                            },
                            "unit": "Seconds",
                            "timeseries": [
                              {
                                "metadatavalues": [],
                                "data": [
                                  {
                                    "timeStamp": "2017-08-10T21:44:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:45:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:46:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:47:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:48:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:49:00Z",
                                    "total": 0.0
                                  },
                                  {
                                    "timeStamp": "2017-08-10T21:50:00Z",
                                    "total": 0.0
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "x-ms-odata": "#/definitions/MetadataValue",
                "x-ms-examples": {
                  "Get Metric for data": {
                    "$ref": "./examples/GetMetric.json"
                  },
                  "Get Metric for metadata": {
                    "$ref": "./examples/GetMetricMetadata.json"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {},
  "tools_b": {
    "Metrics_List": "FunctionDef(name='Metrics_List', args=arguments(posonlyargs=[], args=[arg(arg='resourceUri', annotation=Name(id='str', ctx=Load())), arg(arg='timespan', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='interval', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='metric', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='aggregation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_top', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_orderby', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_filter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='resultType', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='**Lists the metric values for a resource**.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='resourceUri', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Insights/metrics')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceUri', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceUri')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='timespan', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='timespan'), ctx=Store())], value=Name(id='timespan', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='interval', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='interval'), ctx=Store())], value=Name(id='interval', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='metric', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='metric'), ctx=Store())], value=Name(id='metric', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='aggregation', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='aggregation'), ctx=Store())], value=Name(id='aggregation', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$top'), ctx=Store())], value=Name(id='_top', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_orderby', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$orderby'), ctx=Store())], value=Name(id='_orderby', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_filter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$filter'), ctx=Store())], value=Name(id='_filter', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='resultType', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='resultType'), ctx=Store())], value=Name(id='resultType', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Metrics_List')), keyword(arg='description', value=Constant(value='**Lists the metric values for a resource**.'))])])"
  }
}