{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the activity.",
              "properties": {
                "id": {
                  "description": "Gets or sets the id of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Gets the name of the activity.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of the activity.",
                  "properties": {
                    "creationTime": {
                      "description": "Gets or sets the creation time.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "definition": {
                      "description": "Gets or sets the user name of the activity.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Gets or sets the description.",
                      "type": "string"
                    },
                    "lastModifiedTime": {
                      "description": "Gets or sets the last modified time.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "outputTypes": {
                      "description": "Gets or sets the output types of the activity.",
                      "items": {
                        "description": "Definition of the activity output type.",
                        "properties": {
                          "name": {
                            "description": "Gets or sets the name of the activity output type.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Gets or sets the type of the activity output type.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "parameterSets": {
                      "description": "Gets or sets the parameter sets of the activity.",
                      "items": {
                        "description": "Definition of the activity parameter set.",
                        "properties": {
                          "name": {
                            "description": "Gets or sets the name of the activity parameter set.",
                            "type": "string"
                          },
                          "parameters": {
                            "description": "Gets or sets the parameters of the activity parameter set.",
                            "items": {
                              "description": "Definition of the activity parameter.",
                              "properties": {
                                "description": {
                                  "description": "Gets or sets the description of the activity parameter.",
                                  "type": "string"
                                },
                                "isDynamic": {
                                  "description": "Gets or sets a Boolean value that indicates true if the parameter is dynamic.",
                                  "type": "boolean"
                                },
                                "isMandatory": {
                                  "description": "Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Gets or sets the name of the activity parameter.",
                                  "type": "string"
                                },
                                "position": {
                                  "description": "Gets or sets the position of the activity parameter.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "type": {
                                  "description": "Gets or sets the type of the activity parameter.",
                                  "type": "string"
                                },
                                "validationSet": {
                                  "description": "Gets or sets the validation set of activity parameter.",
                                  "items": {
                                    "description": "Definition of the activity parameter validation set.",
                                    "properties": {
                                      "memberValue": {
                                        "description": "Gets or sets the name of the activity parameter validation set member.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "type": "array"
                                },
                                "valueFromPipeline": {
                                  "description": "Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.",
                                  "type": "boolean"
                                },
                                "valueFromPipelineByPropertyName": {
                                  "description": "Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ",
                                  "type": "boolean"
                                },
                                "valueFromRemainingArguments": {
                                  "description": "Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "type": "array"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Activity"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The response model for the list activity operation.",
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the next link.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of activities.",
                  "items": {
                    "description": "Definition of the activity.",
                    "properties": {
                      "id": {
                        "description": "Gets or sets the id of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Gets the name of the activity.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties of the activity.",
                        "properties": {
                          "creationTime": {
                            "description": "Gets or sets the creation time.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "definition": {
                            "description": "Gets or sets the user name of the activity.",
                            "type": "string"
                          },
                          "description": {
                            "description": "Gets or sets the description.",
                            "type": "string"
                          },
                          "lastModifiedTime": {
                            "description": "Gets or sets the last modified time.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "outputTypes": {
                            "description": "Gets or sets the output types of the activity.",
                            "items": {
                              "description": "Definition of the activity output type.",
                              "properties": {
                                "name": {
                                  "description": "Gets or sets the name of the activity output type.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Gets or sets the type of the activity output type.",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "parameterSets": {
                            "description": "Gets or sets the parameter sets of the activity.",
                            "items": {
                              "description": "Definition of the activity parameter set.",
                              "properties": {
                                "name": {
                                  "description": "Gets or sets the name of the activity parameter set.",
                                  "type": "string"
                                },
                                "parameters": {
                                  "description": "Gets or sets the parameters of the activity parameter set.",
                                  "items": {
                                    "description": "Definition of the activity parameter.",
                                    "properties": {
                                      "description": {
                                        "description": "Gets or sets the description of the activity parameter.",
                                        "type": "string"
                                      },
                                      "isDynamic": {
                                        "description": "Gets or sets a Boolean value that indicates true if the parameter is dynamic.",
                                        "type": "boolean"
                                      },
                                      "isMandatory": {
                                        "description": "Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.",
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "description": "Gets or sets the name of the activity parameter.",
                                        "type": "string"
                                      },
                                      "position": {
                                        "description": "Gets or sets the position of the activity parameter.",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "type": {
                                        "description": "Gets or sets the type of the activity parameter.",
                                        "type": "string"
                                      },
                                      "validationSet": {
                                        "description": "Gets or sets the validation set of activity parameter.",
                                        "items": {
                                          "description": "Definition of the activity parameter validation set.",
                                          "properties": {
                                            "memberValue": {
                                              "description": "Gets or sets the name of the activity parameter validation set member.",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "type": "array"
                                      },
                                      "valueFromPipeline": {
                                        "description": "Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.",
                                        "type": "boolean"
                                      },
                                      "valueFromPipelineByPropertyName": {
                                        "description": "Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ",
                                        "type": "boolean"
                                      },
                                      "valueFromRemainingArguments": {
                                        "description": "Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.",
                                        "type": "boolean"
                                      }
                                    }
                                  },
                                  "type": "array"
                                }
                              }
                            },
                            "type": "array"
                          }
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the activity output type.",
              "properties": {
                "name": {
                  "description": "Gets or sets the name of the activity output type.",
                  "type": "string"
                },
                "type": {
                  "description": "Gets or sets the type of the activity output type.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityOutputType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the activity parameter.",
              "properties": {
                "description": {
                  "description": "Gets or sets the description of the activity parameter.",
                  "type": "string"
                },
                "isDynamic": {
                  "description": "Gets or sets a Boolean value that indicates true if the parameter is dynamic.",
                  "type": "boolean"
                },
                "isMandatory": {
                  "description": "Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.",
                  "type": "boolean"
                },
                "name": {
                  "description": "Gets or sets the name of the activity parameter.",
                  "type": "string"
                },
                "position": {
                  "description": "Gets or sets the position of the activity parameter.",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Gets or sets the type of the activity parameter.",
                  "type": "string"
                },
                "validationSet": {
                  "description": "Gets or sets the validation set of activity parameter.",
                  "items": {
                    "description": "Definition of the activity parameter validation set.",
                    "properties": {
                      "memberValue": {
                        "description": "Gets or sets the name of the activity parameter validation set member.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "valueFromPipeline": {
                  "description": "Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.",
                  "type": "boolean"
                },
                "valueFromPipelineByPropertyName": {
                  "description": "Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ",
                  "type": "boolean"
                },
                "valueFromRemainingArguments": {
                  "description": "Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.",
                  "type": "boolean"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the activity parameter set.",
              "properties": {
                "name": {
                  "description": "Gets or sets the name of the activity parameter set.",
                  "type": "string"
                },
                "parameters": {
                  "description": "Gets or sets the parameters of the activity parameter set.",
                  "items": {
                    "description": "Definition of the activity parameter.",
                    "properties": {
                      "description": {
                        "description": "Gets or sets the description of the activity parameter.",
                        "type": "string"
                      },
                      "isDynamic": {
                        "description": "Gets or sets a Boolean value that indicates true if the parameter is dynamic.",
                        "type": "boolean"
                      },
                      "isMandatory": {
                        "description": "Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Gets or sets the name of the activity parameter.",
                        "type": "string"
                      },
                      "position": {
                        "description": "Gets or sets the position of the activity parameter.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "type": {
                        "description": "Gets or sets the type of the activity parameter.",
                        "type": "string"
                      },
                      "validationSet": {
                        "description": "Gets or sets the validation set of activity parameter.",
                        "items": {
                          "description": "Definition of the activity parameter validation set.",
                          "properties": {
                            "memberValue": {
                              "description": "Gets or sets the name of the activity parameter validation set member.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "valueFromPipeline": {
                        "description": "Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.",
                        "type": "boolean"
                      },
                      "valueFromPipelineByPropertyName": {
                        "description": "Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ",
                        "type": "boolean"
                      },
                      "valueFromRemainingArguments": {
                        "description": "Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.",
                        "type": "boolean"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityParameterSet"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the activity parameter validation set.",
              "properties": {
                "memberValue": {
                  "description": "Gets or sets the name of the activity parameter validation set member.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityParameterValidationSet"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of the activity.",
              "properties": {
                "creationTime": {
                  "description": "Gets or sets the creation time.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "definition": {
                  "description": "Gets or sets the user name of the activity.",
                  "type": "string"
                },
                "description": {
                  "description": "Gets or sets the description.",
                  "type": "string"
                },
                "lastModifiedTime": {
                  "description": "Gets or sets the last modified time.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "outputTypes": {
                  "description": "Gets or sets the output types of the activity.",
                  "items": {
                    "description": "Definition of the activity output type.",
                    "properties": {
                      "name": {
                        "description": "Gets or sets the name of the activity output type.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Gets or sets the type of the activity output type.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "parameterSets": {
                  "description": "Gets or sets the parameter sets of the activity.",
                  "items": {
                    "description": "Definition of the activity parameter set.",
                    "properties": {
                      "name": {
                        "description": "Gets or sets the name of the activity parameter set.",
                        "type": "string"
                      },
                      "parameters": {
                        "description": "Gets or sets the parameters of the activity parameter set.",
                        "items": {
                          "description": "Definition of the activity parameter.",
                          "properties": {
                            "description": {
                              "description": "Gets or sets the description of the activity parameter.",
                              "type": "string"
                            },
                            "isDynamic": {
                              "description": "Gets or sets a Boolean value that indicates true if the parameter is dynamic.",
                              "type": "boolean"
                            },
                            "isMandatory": {
                              "description": "Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.",
                              "type": "boolean"
                            },
                            "name": {
                              "description": "Gets or sets the name of the activity parameter.",
                              "type": "string"
                            },
                            "position": {
                              "description": "Gets or sets the position of the activity parameter.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "type": {
                              "description": "Gets or sets the type of the activity parameter.",
                              "type": "string"
                            },
                            "validationSet": {
                              "description": "Gets or sets the validation set of activity parameter.",
                              "items": {
                                "description": "Definition of the activity parameter validation set.",
                                "properties": {
                                  "memberValue": {
                                    "description": "Gets or sets the name of the activity parameter validation set member.",
                                    "type": "string"
                                  }
                                }
                              },
                              "type": "array"
                            },
                            "valueFromPipeline": {
                              "description": "Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.",
                              "type": "boolean"
                            },
                            "valueFromPipelineByPropertyName": {
                              "description": "Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ",
                              "type": "boolean"
                            },
                            "valueFromRemainingArguments": {
                              "description": "Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.",
                              "type": "boolean"
                            }
                          }
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActivityProperties"
          },
          {
            "oldValue": {
              "description": "Definition of the agent registration information type.",
              "properties": {
                "dscMetaConfiguration": {
                  "description": "Gets or sets the dsc meta configuration.",
                  "type": "string"
                },
                "endpoint": {
                  "description": "Gets or sets the dsc server endpoint.",
                  "type": "string"
                },
                "id": {
                  "description": "Gets or sets the id.",
                  "type": "string"
                },
                "keys": {
                  "description": "Definition of the agent registration keys.",
                  "properties": {
                    "primary": {
                      "description": "Gets or sets the primary key.",
                      "type": "string"
                    },
                    "secondary": {
                      "description": "Gets or sets the secondary key.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AgentRegistration"
          },
          {
            "oldValue": {
              "description": "Definition of the agent registration keys.",
              "properties": {
                "primary": {
                  "description": "Gets or sets the primary key.",
                  "type": "string"
                },
                "secondary": {
                  "description": "Gets or sets the secondary key.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AgentRegistrationKeys"
          },
          {
            "oldValue": {
              "description": "The parameters supplied to the regenerate keys operation.",
              "properties": {
                "keyName": {
                  "description": "Gets or sets the agent registration key name - primary or secondary.",
                  "enum": [
                    "primary",
                    "secondary"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AgentRegistrationKeyName"
                  }
                }
              },
              "required": [
                "keyName"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AgentRegistrationRegenerateKeyParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the runbook property type.",
              "properties": {
                "algorithm": {
                  "description": "Gets or sets the content hash algorithm used to hash the content.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets expected hash value of the content.",
                  "type": "string"
                }
              },
              "required": [
                "algorithm",
                "value"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/ContentHash"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the content link.",
              "properties": {
                "contentHash": {
                  "description": "Definition of the runbook property type.",
                  "properties": {
                    "algorithm": {
                      "description": "Gets or sets the content hash algorithm used to hash the content.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Gets or sets expected hash value of the content.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "algorithm",
                    "value"
                  ]
                },
                "uri": {
                  "description": "Gets or sets the uri of the runbook content.",
                  "type": "string"
                },
                "version": {
                  "description": "Gets or sets the version of the content.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ContentLink"
          },
          {
            "oldValue": {
              "description": "Definition of the DSC Meta Configuration.",
              "properties": {
                "actionAfterReboot": {
                  "description": "Gets or sets the ActionAfterReboot value of the meta configuration.",
                  "type": "string"
                },
                "allowModuleOverwrite": {
                  "description": "Gets or sets the AllowModuleOverwrite value of the meta configuration.",
                  "type": "boolean"
                },
                "certificateId": {
                  "description": "Gets or sets the CertificateId value of the meta configuration.",
                  "type": "string"
                },
                "configurationMode": {
                  "description": "Gets or sets the ConfigurationMode value of the meta configuration.",
                  "type": "string"
                },
                "configurationModeFrequencyMins": {
                  "description": "Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.",
                  "format": "int32",
                  "type": "integer"
                },
                "rebootNodeIfNeeded": {
                  "description": "Gets or sets the RebootNodeIfNeeded value of the meta configuration.",
                  "type": "boolean"
                },
                "refreshFrequencyMins": {
                  "description": "Gets or sets the RefreshFrequencyMins value of the meta configuration.",
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscMetaConfiguration"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "The core properties of ARM resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource Id for the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "ARM proxy resource.",
                  "properties": {},
                  "type": "object"
                }
              ],
              "description": "Definition of a DscNode",
              "properties": {
                "properties": {
                  "description": "The properties of a DscNode",
                  "properties": {
                    "accountId": {
                      "description": "Gets or sets the account id of the node.",
                      "type": "string"
                    },
                    "etag": {
                      "description": "Gets or sets the etag of the resource.",
                      "type": "string"
                    },
                    "extensionHandler": {
                      "description": "Gets or sets the list of extensionHandler properties for a Node.",
                      "items": {
                        "description": "The dsc extensionHandler property associated with the node",
                        "properties": {
                          "name": {
                            "description": "Gets or sets the name of the extension handler.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Gets or sets the version of the extension handler.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "ip": {
                      "description": "Gets or sets the ip of the node.",
                      "type": "string"
                    },
                    "lastSeen": {
                      "description": "Gets or sets the last seen time of the node.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "nodeConfiguration": {
                      "description": "The dsc node configuration property associated with the entity.",
                      "properties": {
                        "name": {
                          "description": "Gets or sets the name of the dsc node configuration.",
                          "type": "string"
                        }
                      }
                    },
                    "nodeId": {
                      "description": "Gets or sets the node id.",
                      "type": "string"
                    },
                    "registrationTime": {
                      "description": "Gets or sets the registration time of the node.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "status": {
                      "description": "Gets or sets the status of the node.",
                      "type": "string"
                    },
                    "totalCount": {
                      "description": "Gets the total number of records matching filter criteria.",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNode"
          },
          {
            "oldValue": {
              "description": "The dsc node configuration property associated with the entity.",
              "properties": {
                "name": {
                  "description": "Gets or sets the name of the dsc node configuration.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeConfigurationAssociationProperty"
          },
          {
            "oldValue": {
              "description": "The dsc extensionHandler property associated with the node",
              "properties": {
                "name": {
                  "description": "Gets or sets the name of the extension handler.",
                  "type": "string"
                },
                "version": {
                  "description": "Gets or sets the version of the extension handler.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeExtensionHandlerAssociationProperty"
          },
          {
            "oldValue": {
              "description": "The response model for the list dsc nodes operation.",
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the next link.",
                  "type": "string"
                },
                "totalCount": {
                  "description": "Gets the total number of nodes matching filter criteria.",
                  "type": "integer"
                },
                "value": {
                  "description": "Gets or sets a list of dsc nodes.",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "description": "The core properties of ARM resources",
                            "properties": {
                              "id": {
                                "description": "Fully qualified resource Id for the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the resource.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "x-ms-azure-resource": true
                          }
                        ],
                        "description": "ARM proxy resource.",
                        "properties": {},
                        "type": "object"
                      }
                    ],
                    "description": "Definition of a DscNode",
                    "properties": {
                      "properties": {
                        "description": "The properties of a DscNode",
                        "properties": {
                          "accountId": {
                            "description": "Gets or sets the account id of the node.",
                            "type": "string"
                          },
                          "etag": {
                            "description": "Gets or sets the etag of the resource.",
                            "type": "string"
                          },
                          "extensionHandler": {
                            "description": "Gets or sets the list of extensionHandler properties for a Node.",
                            "items": {
                              "description": "The dsc extensionHandler property associated with the node",
                              "properties": {
                                "name": {
                                  "description": "Gets or sets the name of the extension handler.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Gets or sets the version of the extension handler.",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "ip": {
                            "description": "Gets or sets the ip of the node.",
                            "type": "string"
                          },
                          "lastSeen": {
                            "description": "Gets or sets the last seen time of the node.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "nodeConfiguration": {
                            "description": "The dsc node configuration property associated with the entity.",
                            "properties": {
                              "name": {
                                "description": "Gets or sets the name of the dsc node configuration.",
                                "type": "string"
                              }
                            }
                          },
                          "nodeId": {
                            "description": "Gets or sets the node id.",
                            "type": "string"
                          },
                          "registrationTime": {
                            "description": "Gets or sets the registration time of the node.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "status": {
                            "description": "Gets or sets the status of the node.",
                            "type": "string"
                          },
                          "totalCount": {
                            "description": "Gets the total number of records matching filter criteria.",
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeListResult"
          },
          {
            "oldValue": {
              "description": "The properties of a DscNode",
              "properties": {
                "accountId": {
                  "description": "Gets or sets the account id of the node.",
                  "type": "string"
                },
                "etag": {
                  "description": "Gets or sets the etag of the resource.",
                  "type": "string"
                },
                "extensionHandler": {
                  "description": "Gets or sets the list of extensionHandler properties for a Node.",
                  "items": {
                    "description": "The dsc extensionHandler property associated with the node",
                    "properties": {
                      "name": {
                        "description": "Gets or sets the name of the extension handler.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Gets or sets the version of the extension handler.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "ip": {
                  "description": "Gets or sets the ip of the node.",
                  "type": "string"
                },
                "lastSeen": {
                  "description": "Gets or sets the last seen time of the node.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "nodeConfiguration": {
                  "description": "The dsc node configuration property associated with the entity.",
                  "properties": {
                    "name": {
                      "description": "Gets or sets the name of the dsc node configuration.",
                      "type": "string"
                    }
                  }
                },
                "nodeId": {
                  "description": "Gets or sets the node id.",
                  "type": "string"
                },
                "registrationTime": {
                  "description": "Gets or sets the registration time of the node.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "status": {
                  "description": "Gets or sets the status of the node.",
                  "type": "string"
                },
                "totalCount": {
                  "description": "Gets the total number of records matching filter criteria.",
                  "type": "integer"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeProperties"
          },
          {
            "oldValue": {
              "description": "Definition of the dsc node report type.",
              "properties": {
                "configurationVersion": {
                  "description": "Gets or sets the configurationVersion of the node report.",
                  "type": "string"
                },
                "endTime": {
                  "description": "Gets or sets the end time of the node report.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": true
                },
                "errors": {
                  "description": "Gets or sets the errors for the node report.",
                  "items": {
                    "description": "Definition of the dsc node report error type.",
                    "properties": {
                      "errorCode": {
                        "description": "Gets or sets the error code.",
                        "type": "string"
                      },
                      "errorDetails": {
                        "description": "Gets or sets the error details.",
                        "type": "string"
                      },
                      "errorMessage": {
                        "description": "Gets or sets the error message.",
                        "type": "string"
                      },
                      "errorSource": {
                        "description": "Gets or sets the source of the error.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Gets or sets the locale of the error.",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "Gets or sets the resource ID which generated the error.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "hostName": {
                  "description": "Gets or sets the hostname of the node that sent the report.",
                  "type": "string"
                },
                "iPV4Addresses": {
                  "description": "Gets or sets the IPv4 address of the node that sent the report.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "iPV6Addresses": {
                  "description": "Gets or sets the IPv6 address of the node that sent the report.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Gets or sets the id.",
                  "type": "string"
                },
                "lastModifiedTime": {
                  "description": "Gets or sets the lastModifiedTime of the node report.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "metaConfiguration": {
                  "description": "Definition of the DSC Meta Configuration.",
                  "properties": {
                    "actionAfterReboot": {
                      "description": "Gets or sets the ActionAfterReboot value of the meta configuration.",
                      "type": "string"
                    },
                    "allowModuleOverwrite": {
                      "description": "Gets or sets the AllowModuleOverwrite value of the meta configuration.",
                      "type": "boolean"
                    },
                    "certificateId": {
                      "description": "Gets or sets the CertificateId value of the meta configuration.",
                      "type": "string"
                    },
                    "configurationMode": {
                      "description": "Gets or sets the ConfigurationMode value of the meta configuration.",
                      "type": "string"
                    },
                    "configurationModeFrequencyMins": {
                      "description": "Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "rebootNodeIfNeeded": {
                      "description": "Gets or sets the RebootNodeIfNeeded value of the meta configuration.",
                      "type": "boolean"
                    },
                    "refreshFrequencyMins": {
                      "description": "Gets or sets the RefreshFrequencyMins value of the meta configuration.",
                      "format": "int32",
                      "type": "integer"
                    }
                  }
                },
                "numberOfResources": {
                  "description": "Gets or sets the number of resource in the node report.",
                  "format": "int32",
                  "type": "integer"
                },
                "rawErrors": {
                  "description": "Gets or sets the unparsed errors for the node report.",
                  "type": "string"
                },
                "rebootRequested": {
                  "description": "Gets or sets the rebootRequested of the node report.",
                  "type": "string"
                },
                "refreshMode": {
                  "description": "Gets or sets the refreshMode of the node report.",
                  "type": "string"
                },
                "reportFormatVersion": {
                  "description": "Gets or sets the reportFormatVersion of the node report.",
                  "type": "string"
                },
                "reportId": {
                  "description": "Gets or sets the id of the node report.",
                  "type": "string"
                },
                "resources": {
                  "description": "Gets or sets the resource for the node report.",
                  "items": {
                    "description": "Definition of the DSC Report Resource.",
                    "properties": {
                      "dependsOn": {
                        "description": "Gets or sets the Resource Navigation values for resources the resource depends on.",
                        "items": {
                          "description": "Navigation for DSC Report Resource.",
                          "properties": {
                            "resourceId": {
                              "description": "Gets or sets the ID of the resource to navigate to.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "durationInSeconds": {
                        "description": "Gets or sets the duration in seconds for the resource.",
                        "format": "double",
                        "type": "number"
                      },
                      "error": {
                        "description": "Gets or sets the error of the resource.",
                        "type": "string"
                      },
                      "moduleName": {
                        "description": "Gets or sets the module name of the resource.",
                        "type": "string"
                      },
                      "moduleVersion": {
                        "description": "Gets or sets the module version of the resource.",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "Gets or sets the ID of the resource.",
                        "type": "string"
                      },
                      "resourceName": {
                        "description": "Gets or sets the name of the resource.",
                        "type": "string"
                      },
                      "sourceInfo": {
                        "description": "Gets or sets the source info of the resource.",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Gets or sets the start date of the resource.",
                        "format": "date-time",
                        "type": "string",
                        "x-nullable": false
                      },
                      "status": {
                        "description": "Gets or sets the status of the resource.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "startTime": {
                  "description": "Gets or sets the start time of the node report.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": true
                },
                "status": {
                  "description": "Gets or sets the status of the node report.",
                  "type": "string"
                },
                "type": {
                  "description": "Gets or sets the type of the node report.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeReport"
          },
          {
            "oldValue": {
              "description": "The response model for the list dsc nodes operation.",
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the next link.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of dsc node reports.",
                  "items": {
                    "description": "Definition of the dsc node report type.",
                    "properties": {
                      "configurationVersion": {
                        "description": "Gets or sets the configurationVersion of the node report.",
                        "type": "string"
                      },
                      "endTime": {
                        "description": "Gets or sets the end time of the node report.",
                        "format": "date-time",
                        "type": "string",
                        "x-nullable": true
                      },
                      "errors": {
                        "description": "Gets or sets the errors for the node report.",
                        "items": {
                          "description": "Definition of the dsc node report error type.",
                          "properties": {
                            "errorCode": {
                              "description": "Gets or sets the error code.",
                              "type": "string"
                            },
                            "errorDetails": {
                              "description": "Gets or sets the error details.",
                              "type": "string"
                            },
                            "errorMessage": {
                              "description": "Gets or sets the error message.",
                              "type": "string"
                            },
                            "errorSource": {
                              "description": "Gets or sets the source of the error.",
                              "type": "string"
                            },
                            "locale": {
                              "description": "Gets or sets the locale of the error.",
                              "type": "string"
                            },
                            "resourceId": {
                              "description": "Gets or sets the resource ID which generated the error.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "hostName": {
                        "description": "Gets or sets the hostname of the node that sent the report.",
                        "type": "string"
                      },
                      "iPV4Addresses": {
                        "description": "Gets or sets the IPv4 address of the node that sent the report.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "iPV6Addresses": {
                        "description": "Gets or sets the IPv6 address of the node that sent the report.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "Gets or sets the id.",
                        "type": "string"
                      },
                      "lastModifiedTime": {
                        "description": "Gets or sets the lastModifiedTime of the node report.",
                        "format": "date-time",
                        "type": "string",
                        "x-nullable": false
                      },
                      "metaConfiguration": {
                        "description": "Definition of the DSC Meta Configuration.",
                        "properties": {
                          "actionAfterReboot": {
                            "description": "Gets or sets the ActionAfterReboot value of the meta configuration.",
                            "type": "string"
                          },
                          "allowModuleOverwrite": {
                            "description": "Gets or sets the AllowModuleOverwrite value of the meta configuration.",
                            "type": "boolean"
                          },
                          "certificateId": {
                            "description": "Gets or sets the CertificateId value of the meta configuration.",
                            "type": "string"
                          },
                          "configurationMode": {
                            "description": "Gets or sets the ConfigurationMode value of the meta configuration.",
                            "type": "string"
                          },
                          "configurationModeFrequencyMins": {
                            "description": "Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "rebootNodeIfNeeded": {
                            "description": "Gets or sets the RebootNodeIfNeeded value of the meta configuration.",
                            "type": "boolean"
                          },
                          "refreshFrequencyMins": {
                            "description": "Gets or sets the RefreshFrequencyMins value of the meta configuration.",
                            "format": "int32",
                            "type": "integer"
                          }
                        }
                      },
                      "numberOfResources": {
                        "description": "Gets or sets the number of resource in the node report.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "rawErrors": {
                        "description": "Gets or sets the unparsed errors for the node report.",
                        "type": "string"
                      },
                      "rebootRequested": {
                        "description": "Gets or sets the rebootRequested of the node report.",
                        "type": "string"
                      },
                      "refreshMode": {
                        "description": "Gets or sets the refreshMode of the node report.",
                        "type": "string"
                      },
                      "reportFormatVersion": {
                        "description": "Gets or sets the reportFormatVersion of the node report.",
                        "type": "string"
                      },
                      "reportId": {
                        "description": "Gets or sets the id of the node report.",
                        "type": "string"
                      },
                      "resources": {
                        "description": "Gets or sets the resource for the node report.",
                        "items": {
                          "description": "Definition of the DSC Report Resource.",
                          "properties": {
                            "dependsOn": {
                              "description": "Gets or sets the Resource Navigation values for resources the resource depends on.",
                              "items": {
                                "description": "Navigation for DSC Report Resource.",
                                "properties": {
                                  "resourceId": {
                                    "description": "Gets or sets the ID of the resource to navigate to.",
                                    "type": "string"
                                  }
                                }
                              },
                              "type": "array"
                            },
                            "durationInSeconds": {
                              "description": "Gets or sets the duration in seconds for the resource.",
                              "format": "double",
                              "type": "number"
                            },
                            "error": {
                              "description": "Gets or sets the error of the resource.",
                              "type": "string"
                            },
                            "moduleName": {
                              "description": "Gets or sets the module name of the resource.",
                              "type": "string"
                            },
                            "moduleVersion": {
                              "description": "Gets or sets the module version of the resource.",
                              "type": "string"
                            },
                            "resourceId": {
                              "description": "Gets or sets the ID of the resource.",
                              "type": "string"
                            },
                            "resourceName": {
                              "description": "Gets or sets the name of the resource.",
                              "type": "string"
                            },
                            "sourceInfo": {
                              "description": "Gets or sets the source info of the resource.",
                              "type": "string"
                            },
                            "startDate": {
                              "description": "Gets or sets the start date of the resource.",
                              "format": "date-time",
                              "type": "string",
                              "x-nullable": false
                            },
                            "status": {
                              "description": "Gets or sets the status of the resource.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "startTime": {
                        "description": "Gets or sets the start time of the node report.",
                        "format": "date-time",
                        "type": "string",
                        "x-nullable": true
                      },
                      "status": {
                        "description": "Gets or sets the status of the node report.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Gets or sets the type of the node report.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeReportListResult"
          },
          {
            "oldValue": {
              "description": "The parameters supplied to the update dsc node operation.",
              "properties": {
                "nodeId": {
                  "description": "Gets or sets the id of the dsc node.",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "nodeConfiguration": {
                      "description": "The dsc node configuration property associated with the entity.",
                      "properties": {
                        "name": {
                          "description": "Gets or sets the name of the dsc node configuration.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscNodeUpdateParameters"
          },
          {
            "oldValue": {
              "description": "Definition of the dsc node report error type.",
              "properties": {
                "errorCode": {
                  "description": "Gets or sets the error code.",
                  "type": "string"
                },
                "errorDetails": {
                  "description": "Gets or sets the error details.",
                  "type": "string"
                },
                "errorMessage": {
                  "description": "Gets or sets the error message.",
                  "type": "string"
                },
                "errorSource": {
                  "description": "Gets or sets the source of the error.",
                  "type": "string"
                },
                "locale": {
                  "description": "Gets or sets the locale of the error.",
                  "type": "string"
                },
                "resourceId": {
                  "description": "Gets or sets the resource ID which generated the error.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscReportError"
          },
          {
            "oldValue": {
              "description": "Definition of the DSC Report Resource.",
              "properties": {
                "dependsOn": {
                  "description": "Gets or sets the Resource Navigation values for resources the resource depends on.",
                  "items": {
                    "description": "Navigation for DSC Report Resource.",
                    "properties": {
                      "resourceId": {
                        "description": "Gets or sets the ID of the resource to navigate to.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "durationInSeconds": {
                  "description": "Gets or sets the duration in seconds for the resource.",
                  "format": "double",
                  "type": "number"
                },
                "error": {
                  "description": "Gets or sets the error of the resource.",
                  "type": "string"
                },
                "moduleName": {
                  "description": "Gets or sets the module name of the resource.",
                  "type": "string"
                },
                "moduleVersion": {
                  "description": "Gets or sets the module version of the resource.",
                  "type": "string"
                },
                "resourceId": {
                  "description": "Gets or sets the ID of the resource.",
                  "type": "string"
                },
                "resourceName": {
                  "description": "Gets or sets the name of the resource.",
                  "type": "string"
                },
                "sourceInfo": {
                  "description": "Gets or sets the source info of the resource.",
                  "type": "string"
                },
                "startDate": {
                  "description": "Gets or sets the start date of the resource.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "status": {
                  "description": "Gets or sets the status of the resource.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscReportResource"
          },
          {
            "oldValue": {
              "description": "Navigation for DSC Report Resource.",
              "properties": {
                "resourceId": {
                  "description": "Gets or sets the ID of the resource to navigate to.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DscReportResourceNavigation"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "The core properties of ARM resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource Id for the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for a ARM tracked top level resource",
                  "properties": {
                    "location": {
                      "description": "The Azure Region where the resource lives",
                      "type": "string",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object",
                      "x-ms-mutability": [
                        "read",
                        "create",
                        "update"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "description": "Definition of the module type.",
              "properties": {
                "etag": {
                  "description": "Gets or sets the etag of the resource.",
                  "type": "string"
                },
                "properties": {
                  "description": "Definition of the module property type.",
                  "properties": {
                    "activityCount": {
                      "description": "Gets or sets the activity count of the module.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "contentLink": {
                      "description": "Definition of the content link.",
                      "properties": {
                        "contentHash": {
                          "description": "Definition of the runbook property type.",
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the content hash algorithm used to hash the content.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets expected hash value of the content.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "algorithm",
                            "value"
                          ]
                        },
                        "uri": {
                          "description": "Gets or sets the uri of the runbook content.",
                          "type": "string"
                        },
                        "version": {
                          "description": "Gets or sets the version of the content.",
                          "type": "string"
                        }
                      }
                    },
                    "creationTime": {
                      "description": "Gets or sets the creation time.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "description": {
                      "description": "Gets or sets the description.",
                      "type": "string"
                    },
                    "error": {
                      "description": "Definition of the module error info type.",
                      "properties": {
                        "code": {
                          "description": "Gets or sets the error code.",
                          "type": "string"
                        },
                        "message": {
                          "description": "Gets or sets the error message.",
                          "type": "string"
                        }
                      }
                    },
                    "isComposite": {
                      "description": "Gets or sets type of module, if its composite or not.",
                      "type": "boolean"
                    },
                    "isGlobal": {
                      "description": "Gets or sets the isGlobal flag of the module.",
                      "type": "boolean"
                    },
                    "lastModifiedTime": {
                      "description": "Gets or sets the last modified time.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": false
                    },
                    "provisioningState": {
                      "description": "Gets or sets the provisioning state of the module.",
                      "enum": [
                        "Created",
                        "Creating",
                        "StartingImportModuleRunbook",
                        "RunningImportModuleRunbook",
                        "ContentRetrieved",
                        "ContentDownloaded",
                        "ContentValidated",
                        "ConnectionTypeImported",
                        "ContentStored",
                        "ModuleDataStored",
                        "ActivitiesStored",
                        "ModuleImportRunbookComplete",
                        "Succeeded",
                        "Failed",
                        "Cancelled",
                        "Updating"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ModuleProvisioningState"
                      }
                    },
                    "sizeInBytes": {
                      "description": "Gets or sets the size in bytes of the module.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "version": {
                      "description": "Gets or sets the version of the module.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Module"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the module error info type.",
              "properties": {
                "code": {
                  "description": "Gets or sets the error code.",
                  "type": "string"
                },
                "message": {
                  "description": "Gets or sets the error message.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ModuleErrorInfo"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The response model for the list module operation.",
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the next link.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of modules.",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "description": "The core properties of ARM resources",
                            "properties": {
                              "id": {
                                "description": "Fully qualified resource Id for the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the resource.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "x-ms-azure-resource": true
                          }
                        ],
                        "description": "The resource model definition for a ARM tracked top level resource",
                        "properties": {
                          "location": {
                            "description": "The Azure Region where the resource lives",
                            "type": "string",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "type": "object",
                            "x-ms-mutability": [
                              "read",
                              "create",
                              "update"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "Definition of the module type.",
                    "properties": {
                      "etag": {
                        "description": "Gets or sets the etag of the resource.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Definition of the module property type.",
                        "properties": {
                          "activityCount": {
                            "description": "Gets or sets the activity count of the module.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "contentLink": {
                            "description": "Definition of the content link.",
                            "properties": {
                              "contentHash": {
                                "description": "Definition of the runbook property type.",
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the content hash algorithm used to hash the content.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets expected hash value of the content.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "algorithm",
                                  "value"
                                ]
                              },
                              "uri": {
                                "description": "Gets or sets the uri of the runbook content.",
                                "type": "string"
                              },
                              "version": {
                                "description": "Gets or sets the version of the content.",
                                "type": "string"
                              }
                            }
                          },
                          "creationTime": {
                            "description": "Gets or sets the creation time.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "description": {
                            "description": "Gets or sets the description.",
                            "type": "string"
                          },
                          "error": {
                            "description": "Definition of the module error info type.",
                            "properties": {
                              "code": {
                                "description": "Gets or sets the error code.",
                                "type": "string"
                              },
                              "message": {
                                "description": "Gets or sets the error message.",
                                "type": "string"
                              }
                            }
                          },
                          "isComposite": {
                            "description": "Gets or sets type of module, if its composite or not.",
                            "type": "boolean"
                          },
                          "isGlobal": {
                            "description": "Gets or sets the isGlobal flag of the module.",
                            "type": "boolean"
                          },
                          "lastModifiedTime": {
                            "description": "Gets or sets the last modified time.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": false
                          },
                          "provisioningState": {
                            "description": "Gets or sets the provisioning state of the module.",
                            "enum": [
                              "Created",
                              "Creating",
                              "StartingImportModuleRunbook",
                              "RunningImportModuleRunbook",
                              "ContentRetrieved",
                              "ContentDownloaded",
                              "ContentValidated",
                              "ConnectionTypeImported",
                              "ContentStored",
                              "ModuleDataStored",
                              "ActivitiesStored",
                              "ModuleImportRunbookComplete",
                              "Succeeded",
                              "Failed",
                              "Cancelled",
                              "Updating"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ModuleProvisioningState"
                            }
                          },
                          "sizeInBytes": {
                            "description": "Gets or sets the size in bytes of the module.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "version": {
                            "description": "Gets or sets the version of the module.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ModuleListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Definition of the module property type.",
              "properties": {
                "activityCount": {
                  "description": "Gets or sets the activity count of the module.",
                  "format": "int32",
                  "type": "integer"
                },
                "contentLink": {
                  "description": "Definition of the content link.",
                  "properties": {
                    "contentHash": {
                      "description": "Definition of the runbook property type.",
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the content hash algorithm used to hash the content.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets expected hash value of the content.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "algorithm",
                        "value"
                      ]
                    },
                    "uri": {
                      "description": "Gets or sets the uri of the runbook content.",
                      "type": "string"
                    },
                    "version": {
                      "description": "Gets or sets the version of the content.",
                      "type": "string"
                    }
                  }
                },
                "creationTime": {
                  "description": "Gets or sets the creation time.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "description": {
                  "description": "Gets or sets the description.",
                  "type": "string"
                },
                "error": {
                  "description": "Definition of the module error info type.",
                  "properties": {
                    "code": {
                      "description": "Gets or sets the error code.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Gets or sets the error message.",
                      "type": "string"
                    }
                  }
                },
                "isComposite": {
                  "description": "Gets or sets type of module, if its composite or not.",
                  "type": "boolean"
                },
                "isGlobal": {
                  "description": "Gets or sets the isGlobal flag of the module.",
                  "type": "boolean"
                },
                "lastModifiedTime": {
                  "description": "Gets or sets the last modified time.",
                  "format": "date-time",
                  "type": "string",
                  "x-nullable": false
                },
                "provisioningState": {
                  "description": "Gets or sets the provisioning state of the module.",
                  "enum": [
                    "Created",
                    "Creating",
                    "StartingImportModuleRunbook",
                    "RunningImportModuleRunbook",
                    "ContentRetrieved",
                    "ContentDownloaded",
                    "ContentValidated",
                    "ConnectionTypeImported",
                    "ContentStored",
                    "ModuleDataStored",
                    "ActivitiesStored",
                    "ModuleImportRunbookComplete",
                    "Succeeded",
                    "Failed",
                    "Cancelled",
                    "Updating"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ModuleProvisioningState"
                  }
                },
                "sizeInBytes": {
                  "description": "Gets or sets the size in bytes of the module.",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "Gets or sets the version of the module.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ModuleProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The parameters supplied to the create or update module operation.",
              "properties": {
                "properties": {
                  "description": "The parameters supplied to the create or update module properties.",
                  "properties": {
                    "contentLink": {
                      "description": "Definition of the content link.",
                      "properties": {
                        "contentHash": {
                          "description": "Definition of the runbook property type.",
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the content hash algorithm used to hash the content.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets expected hash value of the content.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "algorithm",
                            "value"
                          ]
                        },
                        "uri": {
                          "description": "Gets or sets the uri of the runbook content.",
                          "type": "string"
                        },
                        "version": {
                          "description": "Gets or sets the version of the content.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "contentLink"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets the tags attached to the resource.",
                  "type": "object"
                }
              },
              "required": [
                "properties"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/PythonPackageCreateParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The parameters supplied to the create or update module properties.",
              "properties": {
                "contentLink": {
                  "description": "Definition of the content link.",
                  "properties": {
                    "contentHash": {
                      "description": "Definition of the runbook property type.",
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the content hash algorithm used to hash the content.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets expected hash value of the content.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "algorithm",
                        "value"
                      ]
                    },
                    "uri": {
                      "description": "Gets or sets the uri of the runbook content.",
                      "type": "string"
                    },
                    "version": {
                      "description": "Gets or sets the version of the content.",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "contentLink"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/PythonPackageCreateProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The parameters supplied to the update module operation.",
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets the tags attached to the resource.",
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PythonPackageUpdateParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Information about a field of a type.",
              "properties": {
                "name": {
                  "description": "Gets or sets the name of the field.",
                  "type": "string"
                },
                "type": {
                  "description": "Gets or sets the type of the field.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/TypeField"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The response model for the list fields operation.",
              "properties": {
                "value": {
                  "description": "Gets or sets a list of fields.",
                  "items": {
                    "description": "Information about a field of a type.",
                    "properties": {
                      "name": {
                        "description": "Gets or sets the name of the field.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Gets or sets the type of the field.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/TypeFieldListResult"
          }
        ],
        "produces": [
          {
            "oldValue": "text/plain",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/1"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2018-01-15",
        "to": "2018-06-30"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages/{packageName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}/content",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation/regenerateKey",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "Python2Package_Delete": "FunctionDef(\n  name='Python2Package_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='packageName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='automationAccountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the python 2 package by name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Automation/automationAccounts/'),\n          FormattedValue(\n            value=Name(id='automationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/python2Packages/'),\n          FormattedValue(\n            value=Name(id='packageName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='packageName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: packageName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='automationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: automationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Python2Package_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete the python 2 package by name.'))])],\n  type_params=[])",
    "Python2Package_Get": "FunctionDef(\n  name='Python2Package_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='packageName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='automationAccountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Retrieve the python 2 package identified by package name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Automation/automationAccounts/'),\n          FormattedValue(\n            value=Name(id='automationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/python2Packages/'),\n          FormattedValue(\n            value=Name(id='packageName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='packageName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: packageName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='automationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: automationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Python2Package_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Retrieve the python 2 package identified by package name.'))])],\n  type_params=[])",
    "Python2Package_CreateOrUpdate": "FunctionDef(\n  name='Python2Package_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='packageName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='automationAccountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create or Update the python 2 package identified by package name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Automation/automationAccounts/'),\n          FormattedValue(\n            value=Name(id='automationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/python2Packages/'),\n          FormattedValue(\n            value=Name(id='packageName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='packageName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: packageName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='automationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: automationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Python2Package_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update the python 2 package identified by package name.'))])],\n  type_params=[])",
    "Python2Package_Update": "FunctionDef(\n  name='Python2Package_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='packageName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='automationAccountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Update the python 2 package identified by package name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Automation/automationAccounts/'),\n          FormattedValue(\n            value=Name(id='automationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/python2Packages/'),\n          FormattedValue(\n            value=Name(id='packageName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='packageName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: packageName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='automationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: automationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Python2Package_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update the python 2 package identified by package name.'))])],\n  type_params=[])",
    "Python2Package_ListByAutomationAccount": "FunctionDef(\n  name='Python2Package_ListByAutomationAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='automationAccountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Retrieve a list of python 2 packages.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Automation/automationAccounts/'),\n          FormattedValue(\n            value=Name(id='automationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/python2Packages')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='automationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: automationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Python2Package_ListByAutomationAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Retrieve a list of python 2 packages.'))])],\n  type_params=[])"
  }
}