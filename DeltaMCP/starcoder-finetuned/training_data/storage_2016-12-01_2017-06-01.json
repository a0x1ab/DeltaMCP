{
  "oasdiff": {
    "extensions": {
      "added": [
        "securityDefinitions"
      ],
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "Permissions"
            },
            "op": "add",
            "from": "",
            "path": "/AccountSasParameters/properties/signedPermission/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "SignedResourceTypes"
            },
            "op": "add",
            "from": "",
            "path": "/AccountSasParameters/properties/signedResourceTypes/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "Services"
            },
            "op": "add",
            "from": "",
            "path": "/AccountSasParameters/properties/signedServices/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Dimension of blobs, possibly be blob type or access tier.",
              "properties": {
                "displayName": {
                  "description": "Display name of dimension.",
                  "type": "string"
                },
                "name": {
                  "description": "Display name of dimension.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Dimension"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/Encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/Encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/Encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/Encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "IP rule with specific IP or IP range in CIDR format.",
              "properties": {
                "action": {
                  "default": "Allow",
                  "description": "The action of IP ACL rule.",
                  "enum": [
                    "Allow"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Action"
                  }
                },
                "value": {
                  "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                  "type": "string",
                  "x-ms-client-name": "IPAddressOrRange"
                }
              },
              "required": [
                "value"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/IPRule"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/Identity"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/KeyVaultProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metric specification of operation.",
              "properties": {
                "aggregationType": {
                  "description": "Aggregation type could be Average.",
                  "type": "string"
                },
                "category": {
                  "description": "The category this metric specification belong to, could be Capacity.",
                  "type": "string"
                },
                "dimensions": {
                  "description": "Dimensions of blobs, including blob type and access tier.",
                  "items": {
                    "description": "Dimension of blobs, possibly be blob type or access tier.",
                    "properties": {
                      "displayName": {
                        "description": "Display name of dimension.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Display name of dimension.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "displayDescription": {
                  "description": "Display description of metric specification.",
                  "type": "string"
                },
                "displayName": {
                  "description": "Display name of metric specification.",
                  "type": "string"
                },
                "fillGapWithZero": {
                  "description": "The property to decide fill gap with zero or not.",
                  "type": "boolean"
                },
                "name": {
                  "description": "Name of metric specification.",
                  "type": "string"
                },
                "resourceIdDimensionNameOverride": {
                  "description": "Account Resource Id.",
                  "type": "string"
                },
                "unit": {
                  "description": "Unit could be Bytes or Count.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MetricSpecification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/NetworkRuleSet"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Storage REST API operation definition.",
              "properties": {
                "display": {
                  "description": "Display metadata associated with the operation.",
                  "properties": {
                    "operation": {
                      "description": "Type of operation: get, read, delete, etc.",
                      "type": "string"
                    },
                    "provider": {
                      "description": "Service provider: Microsoft Storage.",
                      "type": "string"
                    },
                    "resource": {
                      "description": "Resource on which the operation is performed etc.",
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "description": "Operation name: {provider}/{resource}/{operation}",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of operations.",
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of operation, include metric specifications.",
                  "properties": {
                    "serviceSpecification": {
                      "description": "One property of operation, include metric specifications.",
                      "properties": {
                        "metricSpecifications": {
                          "description": "Metric specifications of operation.",
                          "items": {
                            "description": "Metric specification of operation.",
                            "properties": {
                              "aggregationType": {
                                "description": "Aggregation type could be Average.",
                                "type": "string"
                              },
                              "category": {
                                "description": "The category this metric specification belong to, could be Capacity.",
                                "type": "string"
                              },
                              "dimensions": {
                                "description": "Dimensions of blobs, including blob type and access tier.",
                                "items": {
                                  "description": "Dimension of blobs, possibly be blob type or access tier.",
                                  "properties": {
                                    "displayName": {
                                      "description": "Display name of dimension.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Display name of dimension.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "displayDescription": {
                                "description": "Display description of metric specification.",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Display name of metric specification.",
                                "type": "string"
                              },
                              "fillGapWithZero": {
                                "description": "The property to decide fill gap with zero or not.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name of metric specification.",
                                "type": "string"
                              },
                              "resourceIdDimensionNameOverride": {
                                "description": "Account Resource Id.",
                                "type": "string"
                              },
                              "unit": {
                                "description": "Unit could be Bytes or Count.",
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Operation"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.",
              "properties": {
                "value": {
                  "description": "List of Storage operations supported by the Storage resource provider.",
                  "items": {
                    "description": "Storage REST API operation definition.",
                    "properties": {
                      "display": {
                        "description": "Display metadata associated with the operation.",
                        "properties": {
                          "operation": {
                            "description": "Type of operation: get, read, delete, etc.",
                            "type": "string"
                          },
                          "provider": {
                            "description": "Service provider: Microsoft Storage.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource on which the operation is performed etc.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Operation name: {provider}/{resource}/{operation}",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The origin of operations.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties of operation, include metric specifications.",
                        "properties": {
                          "serviceSpecification": {
                            "description": "One property of operation, include metric specifications.",
                            "properties": {
                              "metricSpecifications": {
                                "description": "Metric specifications of operation.",
                                "items": {
                                  "description": "Metric specification of operation.",
                                  "properties": {
                                    "aggregationType": {
                                      "description": "Aggregation type could be Average.",
                                      "type": "string"
                                    },
                                    "category": {
                                      "description": "The category this metric specification belong to, could be Capacity.",
                                      "type": "string"
                                    },
                                    "dimensions": {
                                      "description": "Dimensions of blobs, including blob type and access tier.",
                                      "items": {
                                        "description": "Dimension of blobs, possibly be blob type or access tier.",
                                        "properties": {
                                          "displayName": {
                                            "description": "Display name of dimension.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Display name of dimension.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "type": "array"
                                    },
                                    "displayDescription": {
                                      "description": "Display description of metric specification.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "Display name of metric specification.",
                                      "type": "string"
                                    },
                                    "fillGapWithZero": {
                                      "description": "The property to decide fill gap with zero or not.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "Name of metric specification.",
                                      "type": "string"
                                    },
                                    "resourceIdDimensionNameOverride": {
                                      "description": "Account Resource Id.",
                                      "type": "string"
                                    },
                                    "unit": {
                                      "description": "Unit could be Bytes or Count.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/OperationListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of operation, include metric specifications.",
              "properties": {
                "serviceSpecification": {
                  "description": "One property of operation, include metric specifications.",
                  "properties": {
                    "metricSpecifications": {
                      "description": "Metric specifications of operation.",
                      "items": {
                        "description": "Metric specification of operation.",
                        "properties": {
                          "aggregationType": {
                            "description": "Aggregation type could be Average.",
                            "type": "string"
                          },
                          "category": {
                            "description": "The category this metric specification belong to, could be Capacity.",
                            "type": "string"
                          },
                          "dimensions": {
                            "description": "Dimensions of blobs, including blob type and access tier.",
                            "items": {
                              "description": "Dimension of blobs, possibly be blob type or access tier.",
                              "properties": {
                                "displayName": {
                                  "description": "Display name of dimension.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Display name of dimension.",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "displayDescription": {
                            "description": "Display description of metric specification.",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Display name of metric specification.",
                            "type": "string"
                          },
                          "fillGapWithZero": {
                            "description": "The property to decide fill gap with zero or not.",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Name of metric specification.",
                            "type": "string"
                          },
                          "resourceIdDimensionNameOverride": {
                            "description": "Account Resource Id.",
                            "type": "string"
                          },
                          "unit": {
                            "description": "Unit could be Bytes or Count.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/OperationProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restriction because of which SKU cannot be used.",
              "properties": {
                "reasonCode": {
                  "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                  "enum": [
                    "QuotaId",
                    "NotAvailableForSubscription"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReasonCode"
                  }
                },
                "type": {
                  "description": "The type of restrictions. As of now only possible value for this is location.",
                  "readOnly": true,
                  "type": "string"
                },
                "values": {
                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Restriction"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "properties": {
                "name": {
                  "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/SKUCapability"
          },
          {
            "oldValue": null,
            "value": {
              "description": "One property of operation, include metric specifications.",
              "properties": {
                "metricSpecifications": {
                  "description": "Metric specifications of operation.",
                  "items": {
                    "description": "Metric specification of operation.",
                    "properties": {
                      "aggregationType": {
                        "description": "Aggregation type could be Average.",
                        "type": "string"
                      },
                      "category": {
                        "description": "The category this metric specification belong to, could be Capacity.",
                        "type": "string"
                      },
                      "dimensions": {
                        "description": "Dimensions of blobs, including blob type and access tier.",
                        "items": {
                          "description": "Dimension of blobs, possibly be blob type or access tier.",
                          "properties": {
                            "displayName": {
                              "description": "Display name of dimension.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Display name of dimension.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "displayDescription": {
                        "description": "Display description of metric specification.",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Display name of metric specification.",
                        "type": "string"
                      },
                      "fillGapWithZero": {
                        "description": "The property to decide fill gap with zero or not.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of metric specification.",
                        "type": "string"
                      },
                      "resourceIdDimensionNameOverride": {
                        "description": "Account Resource Id.",
                        "type": "string"
                      },
                      "unit": {
                        "description": "Unit could be Bytes or Count.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ServiceSpecification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "items": {
                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                "properties": {
                  "name": {
                    "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Sku/properties/capabilities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the type of storage account.",
              "enum": [
                "Storage",
                "BlobStorage"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "Kind"
              }
            },
            "op": "add",
            "from": "",
            "path": "/Sku/properties/kind"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Sku/properties/locations"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of the resource, usually it is 'storageAccounts'.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Sku/properties/resourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
              "items": {
                "description": "The restriction because of which SKU cannot be used.",
                "properties": {
                  "reasonCode": {
                    "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                    "enum": [
                      "QuotaId",
                      "NotAvailableForSubscription"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReasonCode"
                    }
                  },
                  "type": {
                    "description": "The type of restrictions. As of now only possible value for this is location.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "values": {
                    "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Sku/properties/restrictions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/identity"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/properties/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "items": {
                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                "properties": {
                  "name": {
                    "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/sku/properties/capabilities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the type of storage account.",
              "enum": [
                "Storage",
                "BlobStorage"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "Kind"
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/sku/properties/kind"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/sku/properties/locations"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of the resource, usually it is 'storageAccounts'.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/sku/properties/resourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
              "items": {
                "description": "The restriction because of which SKU cannot be used.",
                "properties": {
                  "reasonCode": {
                    "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                    "enum": [
                      "QuotaId",
                      "NotAvailableForSubscription"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReasonCode"
                    }
                  },
                  "type": {
                    "description": "The type of restrictions. As of now only possible value for this is location.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "values": {
                    "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccount/properties/sku/properties/restrictions"
          },
          {
            "oldValue": null,
            "value": "The storage account name.",
            "op": "add",
            "from": "",
            "path": "/StorageAccountCheckNameAvailabilityParameters/properties/name/description"
          },
          {
            "oldValue": null,
            "value": "The type of resource, Microsoft.Storage/storageAccounts",
            "op": "add",
            "from": "",
            "path": "/StorageAccountCheckNameAvailabilityParameters/properties/type/description"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": false,
              "name": "Type"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCheckNameAvailabilityParameters/properties/type/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/identity"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/properties/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "items": {
                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                "properties": {
                  "name": {
                    "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/sku/properties/capabilities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the type of storage account.",
              "enum": [
                "Storage",
                "BlobStorage"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "Kind"
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/sku/properties/kind"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/sku/properties/locations"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of the resource, usually it is 'storageAccounts'.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/sku/properties/resourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
              "items": {
                "description": "The restriction because of which SKU cannot be used.",
                "properties": {
                  "reasonCode": {
                    "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                    "enum": [
                      "QuotaId",
                      "NotAvailableForSubscription"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReasonCode"
                    }
                  },
                  "type": {
                    "description": "The type of restrictions. As of now only possible value for this is location.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "values": {
                    "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountCreateParameters/properties/sku/properties/restrictions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/identity"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/properties/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "items": {
                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                "properties": {
                  "name": {
                    "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/sku/properties/capabilities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the type of storage account.",
              "enum": [
                "Storage",
                "BlobStorage"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "Kind"
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/sku/properties/kind"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/sku/properties/locations"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of the resource, usually it is 'storageAccounts'.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/sku/properties/resourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
              "items": {
                "description": "The restriction because of which SKU cannot be used.",
                "properties": {
                  "reasonCode": {
                    "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                    "enum": [
                      "QuotaId",
                      "NotAvailableForSubscription"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReasonCode"
                    }
                  },
                  "type": {
                    "description": "The type of restrictions. As of now only possible value for this is location.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "values": {
                    "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountListResult/properties/value/items/properties/sku/properties/restrictions"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountProperties/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountProperties/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountProperties/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountProperties/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountProperties/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountProperties/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": "The name of storage keys that want to be regenerated, possible values are key1, key2.",
            "op": "add",
            "from": "",
            "path": "/StorageAccountRegenerateKeyParameters/properties/keyName/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/identity"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Storage",
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/encryption/properties/keySource/default"
          },
          {
            "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
            "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
            "op": "replace",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/encryption/properties/keySource/description"
          },
          {
            "oldValue": null,
            "value": "Microsoft.Keyvault",
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/encryption/properties/keySource/enum/-"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "KeySource"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/encryption/properties/keyvaultproperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/properties/properties/networkAcls"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "items": {
                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                "properties": {
                  "name": {
                    "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/sku/properties/capabilities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the type of storage account.",
              "enum": [
                "Storage",
                "BlobStorage"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "Kind"
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/sku/properties/kind"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/sku/properties/locations"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of the resource, usually it is 'storageAccounts'.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/sku/properties/resourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
              "items": {
                "description": "The restriction because of which SKU cannot be used.",
                "properties": {
                  "reasonCode": {
                    "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                    "enum": [
                      "QuotaId",
                      "NotAvailableForSubscription"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReasonCode"
                    }
                  },
                  "type": {
                    "description": "The type of restrictions. As of now only possible value for this is location.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "values": {
                    "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/StorageAccountUpdateParameters/properties/sku/properties/restrictions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The response from the List Storage SKUs operation.",
              "properties": {
                "value": {
                  "description": "Get the list result of storage SKUs and their properties.",
                  "items": {
                    "description": "The SKU of the storage account.",
                    "properties": {
                      "capabilities": {
                        "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "items": {
                          "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                          "properties": {
                            "name": {
                              "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "kind": {
                        "description": "Indicates the type of storage account.",
                        "enum": [
                          "Storage",
                          "BlobStorage"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "locations": {
                        "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "name": {
                        "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                        "enum": [
                          "Standard_LRS",
                          "Standard_GRS",
                          "Standard_RAGRS",
                          "Standard_ZRS",
                          "Premium_LRS"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SkuName"
                        }
                      },
                      "resourceType": {
                        "description": "The type of the resource, usually it is 'storageAccounts'.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "restrictions": {
                        "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                        "items": {
                          "description": "The restriction because of which SKU cannot be used.",
                          "properties": {
                            "reasonCode": {
                              "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                              "enum": [
                                "QuotaId",
                                "NotAvailableForSubscription"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReasonCode"
                              }
                            },
                            "type": {
                              "description": "The type of restrictions. As of now only possible value for this is location.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "values": {
                              "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                              "items": {
                                "type": "string"
                              },
                              "readOnly": true,
                              "type": "array"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "tier": {
                        "description": "Gets the sku tier. This is based on the SKU name.",
                        "enum": [
                          "Standard",
                          "Premium"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SkuTier"
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/StorageSkuListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Virtual Network rule.",
              "properties": {
                "action": {
                  "default": "Allow",
                  "description": "The action of virtual network rule.",
                  "enum": [
                    "Allow"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Action"
                  }
                },
                "id": {
                  "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                  "type": "string",
                  "x-ms-client-name": "VirtualNetworkResourceId"
                },
                "state": {
                  "description": "Gets the state of virtual network rule.",
                  "enum": [
                    "provisioning",
                    "deprovisioning",
                    "succeeded",
                    "failed",
                    "networkSourceDeleted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "State"
                  }
                }
              },
              "required": [
                "id"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/VirtualNetworkRule"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2016-12-01",
        "to": "2017-06-01"
      }
    },
    "paths": {
      "added": [
        "/providers/Microsoft.Storage/operations",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus"
      ],
      "modified": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "accountName": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "name": {
                                "description": {
                                  "from": "",
                                  "to": "The storage account name."
                                }
                              },
                              "type": {
                                "extensions": {
                                  "added": [
                                    "x-ms-enum"
                                  ]
                                },
                                "description": {
                                  "from": "",
                                  "to": "The type of resource, Microsoft.Storage/storageAccounts"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "SystemAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "IdentityType"
                                    }
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Storage",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Keyvault",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keyvaultproperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network rule set",
                                "properties": {
                                  "bypass": {
                                    "default": "AzureServices",
                                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                    "enum": [
                                      "None",
                                      "Logging",
                                      "Metrics",
                                      "AzureServices"
                                    ],
                                    "type": "string",
                                    "x-ms-client-name": "Bypass",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "Bypass"
                                    }
                                  },
                                  "defaultAction": {
                                    "default": "Allow",
                                    "description": "Specifies the default action of allow or deny when no other rules match.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "DefaultAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "Sets the IP ACL rules",
                                    "items": {
                                      "description": "IP rule with specific IP or IP range in CIDR format.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of IP ACL rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "value": {
                                          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                          "type": "string",
                                          "x-ms-client-name": "IPAddressOrRange"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "Sets the virtual network rules",
                                    "items": {
                                      "description": "Virtual Network rule.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of virtual network rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "id": {
                                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                          "type": "string",
                                          "x-ms-client-name": "VirtualNetworkResourceId"
                                        },
                                        "state": {
                                          "description": "Gets the state of virtual network rule.",
                                          "enum": [
                                            "provisioning",
                                            "deprovisioning",
                                            "succeeded",
                                            "failed",
                                            "networkSourceDeleted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "State"
                                          }
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "defaultAction"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                "items": {
                                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "properties": {
                                    "name": {
                                      "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/capabilities"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the type of storage account.",
                                "enum": [
                                  "Storage",
                                  "BlobStorage"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Kind"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/kind"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                                "items": {
                                  "type": "string"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/locations"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The type of the resource, usually it is 'storageAccounts'.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/resourceType"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                                "items": {
                                  "description": "The restriction because of which SKU cannot be used.",
                                  "properties": {
                                    "reasonCode": {
                                      "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                      "enum": [
                                        "QuotaId",
                                        "NotAvailableForSubscription"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReasonCode"
                                      }
                                    },
                                    "type": {
                                      "description": "The type of restrictions. As of now only possible value for this is location.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "readOnly": true,
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/restrictions"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "SystemAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "IdentityType"
                                    }
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Storage",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Keyvault",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keyvaultproperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network rule set",
                                "properties": {
                                  "bypass": {
                                    "default": "AzureServices",
                                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                    "enum": [
                                      "None",
                                      "Logging",
                                      "Metrics",
                                      "AzureServices"
                                    ],
                                    "type": "string",
                                    "x-ms-client-name": "Bypass",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "Bypass"
                                    }
                                  },
                                  "defaultAction": {
                                    "default": "Allow",
                                    "description": "Specifies the default action of allow or deny when no other rules match.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "DefaultAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "Sets the IP ACL rules",
                                    "items": {
                                      "description": "IP rule with specific IP or IP range in CIDR format.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of IP ACL rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "value": {
                                          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                          "type": "string",
                                          "x-ms-client-name": "IPAddressOrRange"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "Sets the virtual network rules",
                                    "items": {
                                      "description": "Virtual Network rule.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of virtual network rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "id": {
                                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                          "type": "string",
                                          "x-ms-client-name": "VirtualNetworkResourceId"
                                        },
                                        "state": {
                                          "description": "Gets the state of virtual network rule.",
                                          "enum": [
                                            "provisioning",
                                            "deprovisioning",
                                            "succeeded",
                                            "failed",
                                            "networkSourceDeleted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "State"
                                          }
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "defaultAction"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                "items": {
                                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "properties": {
                                    "name": {
                                      "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/capabilities"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the type of storage account.",
                                "enum": [
                                  "Storage",
                                  "BlobStorage"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Kind"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/kind"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                                "items": {
                                  "type": "string"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/locations"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The type of the resource, usually it is 'storageAccounts'.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/resourceType"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                                "items": {
                                  "description": "The restriction because of which SKU cannot be used.",
                                  "properties": {
                                    "reasonCode": {
                                      "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                      "enum": [
                                        "QuotaId",
                                        "NotAvailableForSubscription"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReasonCode"
                                      }
                                    },
                                    "type": {
                                      "description": "The type of restrictions. As of now only possible value for this is location.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "readOnly": true,
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku/properties/restrictions"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                }
              },
              "GET": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "SystemAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "IdentityType"
                                    }
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Storage",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Keyvault",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keyvaultproperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network rule set",
                                "properties": {
                                  "bypass": {
                                    "default": "AzureServices",
                                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                    "enum": [
                                      "None",
                                      "Logging",
                                      "Metrics",
                                      "AzureServices"
                                    ],
                                    "type": "string",
                                    "x-ms-client-name": "Bypass",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "Bypass"
                                    }
                                  },
                                  "defaultAction": {
                                    "default": "Allow",
                                    "description": "Specifies the default action of allow or deny when no other rules match.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "DefaultAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "Sets the IP ACL rules",
                                    "items": {
                                      "description": "IP rule with specific IP or IP range in CIDR format.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of IP ACL rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "value": {
                                          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                          "type": "string",
                                          "x-ms-client-name": "IPAddressOrRange"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "Sets the virtual network rules",
                                    "items": {
                                      "description": "Virtual Network rule.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of virtual network rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "id": {
                                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                          "type": "string",
                                          "x-ms-client-name": "VirtualNetworkResourceId"
                                        },
                                        "state": {
                                          "description": "Gets the state of virtual network rule.",
                                          "enum": [
                                            "provisioning",
                                            "deprovisioning",
                                            "succeeded",
                                            "failed",
                                            "networkSourceDeleted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "State"
                                          }
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "defaultAction"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                "items": {
                                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "properties": {
                                    "name": {
                                      "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/capabilities"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the type of storage account.",
                                "enum": [
                                  "Storage",
                                  "BlobStorage"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Kind"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/kind"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                                "items": {
                                  "type": "string"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/locations"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The type of the resource, usually it is 'storageAccounts'.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/resourceType"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                                "items": {
                                  "description": "The restriction because of which SKU cannot be used.",
                                  "properties": {
                                    "reasonCode": {
                                      "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                      "enum": [
                                        "QuotaId",
                                        "NotAvailableForSubscription"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReasonCode"
                                      }
                                    },
                                    "type": {
                                      "description": "The type of restrictions. As of now only possible value for this is location.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "readOnly": true,
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/restrictions"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "added": [
                              "identity"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "networkAcls"
                                  ],
                                  "modified": {
                                    "encryption": {
                                      "properties": {
                                        "added": [
                                          "keyvaultproperties"
                                        ],
                                        "modified": {
                                          "keySource": {
                                            "extensions": {
                                              "added": [
                                                "x-ms-enum"
                                              ]
                                            },
                                            "description": {
                                              "from": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                                              "to": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault"
                                            },
                                            "enum": {
                                              "added": [
                                                "Microsoft.Keyvault"
                                              ]
                                            },
                                            "default": {
                                              "from": null,
                                              "to": "Microsoft.Storage"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "sku": {
                                "properties": {
                                  "added": [
                                    "resourceType",
                                    "restrictions",
                                    "capabilities",
                                    "kind",
                                    "locations"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "SystemAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "IdentityType"
                                    }
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Storage",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Keyvault",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keyvaultproperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network rule set",
                                "properties": {
                                  "bypass": {
                                    "default": "AzureServices",
                                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                    "enum": [
                                      "None",
                                      "Logging",
                                      "Metrics",
                                      "AzureServices"
                                    ],
                                    "type": "string",
                                    "x-ms-client-name": "Bypass",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "Bypass"
                                    }
                                  },
                                  "defaultAction": {
                                    "default": "Allow",
                                    "description": "Specifies the default action of allow or deny when no other rules match.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "DefaultAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "Sets the IP ACL rules",
                                    "items": {
                                      "description": "IP rule with specific IP or IP range in CIDR format.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of IP ACL rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "value": {
                                          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                          "type": "string",
                                          "x-ms-client-name": "IPAddressOrRange"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "Sets the virtual network rules",
                                    "items": {
                                      "description": "Virtual Network rule.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of virtual network rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "id": {
                                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                          "type": "string",
                                          "x-ms-client-name": "VirtualNetworkResourceId"
                                        },
                                        "state": {
                                          "description": "Gets the state of virtual network rule.",
                                          "enum": [
                                            "provisioning",
                                            "deprovisioning",
                                            "succeeded",
                                            "failed",
                                            "networkSourceDeleted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "State"
                                          }
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "defaultAction"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                "items": {
                                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "properties": {
                                    "name": {
                                      "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/capabilities"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the type of storage account.",
                                "enum": [
                                  "Storage",
                                  "BlobStorage"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Kind"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/kind"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                                "items": {
                                  "type": "string"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/locations"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The type of the resource, usually it is 'storageAccounts'.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/resourceType"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                                "items": {
                                  "description": "The restriction because of which SKU cannot be used.",
                                  "properties": {
                                    "reasonCode": {
                                      "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                      "enum": [
                                        "QuotaId",
                                        "NotAvailableForSubscription"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReasonCode"
                                      }
                                    },
                                    "type": {
                                      "description": "The type of restrictions. As of now only possible value for this is location.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "readOnly": true,
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/restrictions"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "added": [
                              "identity"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "networkAcls"
                                  ],
                                  "modified": {
                                    "encryption": {
                                      "properties": {
                                        "added": [
                                          "keyvaultproperties"
                                        ],
                                        "modified": {
                                          "keySource": {
                                            "extensions": {
                                              "added": [
                                                "x-ms-enum"
                                              ]
                                            },
                                            "description": {
                                              "from": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                                              "to": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault"
                                            },
                                            "enum": {
                                              "added": [
                                                "Microsoft.Keyvault"
                                              ]
                                            },
                                            "default": {
                                              "from": null,
                                              "to": "Microsoft.Storage"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "sku": {
                                "properties": {
                                  "added": [
                                    "resourceType",
                                    "restrictions",
                                    "capabilities",
                                    "kind",
                                    "locations"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "SystemAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "IdentityType"
                                    }
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Storage",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.Keyvault",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keyvaultproperties"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network rule set",
                                "properties": {
                                  "bypass": {
                                    "default": "AzureServices",
                                    "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                    "enum": [
                                      "None",
                                      "Logging",
                                      "Metrics",
                                      "AzureServices"
                                    ],
                                    "type": "string",
                                    "x-ms-client-name": "Bypass",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "Bypass"
                                    }
                                  },
                                  "defaultAction": {
                                    "default": "Allow",
                                    "description": "Specifies the default action of allow or deny when no other rules match.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "DefaultAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "Sets the IP ACL rules",
                                    "items": {
                                      "description": "IP rule with specific IP or IP range in CIDR format.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of IP ACL rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "value": {
                                          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                          "type": "string",
                                          "x-ms-client-name": "IPAddressOrRange"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "Sets the virtual network rules",
                                    "items": {
                                      "description": "Virtual Network rule.",
                                      "properties": {
                                        "action": {
                                          "default": "Allow",
                                          "description": "The action of virtual network rule.",
                                          "enum": [
                                            "Allow"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "Action"
                                          }
                                        },
                                        "id": {
                                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                          "type": "string",
                                          "x-ms-client-name": "VirtualNetworkResourceId"
                                        },
                                        "state": {
                                          "description": "Gets the state of virtual network rule.",
                                          "enum": [
                                            "provisioning",
                                            "deprovisioning",
                                            "succeeded",
                                            "failed",
                                            "networkSourceDeleted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "State"
                                          }
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "defaultAction"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                "items": {
                                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "properties": {
                                    "name": {
                                      "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/capabilities"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the type of storage account.",
                                "enum": [
                                  "Storage",
                                  "BlobStorage"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Kind"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/kind"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                                "items": {
                                  "type": "string"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/locations"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The type of the resource, usually it is 'storageAccounts'.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/resourceType"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                                "items": {
                                  "description": "The restriction because of which SKU cannot be used.",
                                  "properties": {
                                    "reasonCode": {
                                      "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                      "enum": [
                                        "QuotaId",
                                        "NotAvailableForSubscription"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReasonCode"
                                      }
                                    },
                                    "type": {
                                      "description": "The type of restrictions. As of now only possible value for this is location.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "readOnly": true,
                                      "type": "array"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/sku/properties/restrictions"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "signedPermission": {
                                "extensions": {
                                  "added": [
                                    "x-ms-enum"
                                  ]
                                }
                              },
                              "signedResourceTypes": {
                                "extensions": {
                                  "added": [
                                    "x-ms-enum"
                                  ]
                                }
                              },
                              "signedServices": {
                                "extensions": {
                                  "added": [
                                    "x-ms-enum"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "added": [
                    "x-ms-examples"
                  ]
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "regenerateKey": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "keyName": {
                                "description": {
                                  "from": "",
                                  "to": "The name of storage keys that want to be regenerated, possible values are key1, key2."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "security": {
      "added": [
        "azure_auth"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "StorageAccounts_CheckNameAvailability": "FunctionDef(\n  name='StorageAccounts_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the storage account name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the storage account name is valid and is not already in use.'))])],\n  type_params=[])",
    "StorageAccounts_Create": "FunctionDef(\n  name='StorageAccounts_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.'))])],\n  type_params=[])",
    "StorageAccounts_Delete": "FunctionDef(\n  name='StorageAccounts_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes a storage account in Microsoft Azure.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes a storage account in Microsoft Azure.'))])],\n  type_params=[])",
    "StorageAccounts_GetProperties": "FunctionDef(\n  name='StorageAccounts_GetProperties',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_GetProperties')),\n        keyword(\n          arg='description',\n          value=Constant(value='Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.'))])],\n  type_params=[])",
    "StorageAccounts_Update": "FunctionDef(\n  name='StorageAccounts_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.'))])],\n  type_params=[])",
    "StorageAccounts_List": "FunctionDef(\n  name='StorageAccounts_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.'))])],\n  type_params=[])",
    "StorageAccounts_ListByResourceGroup": "FunctionDef(\n  name='StorageAccounts_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.'))])],\n  type_params=[])",
    "StorageAccounts_ListKeys": "FunctionDef(\n  name='StorageAccounts_ListKeys',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the access keys for the specified storage account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/listKeys')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_ListKeys')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the access keys for the specified storage account.'))])],\n  type_params=[])",
    "StorageAccounts_RegenerateKey": "FunctionDef(\n  name='StorageAccounts_RegenerateKey',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Regenerates one of the access keys for the specified storage account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/regenerateKey')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_RegenerateKey')),\n        keyword(\n          arg='description',\n          value=Constant(value='Regenerates one of the access keys for the specified storage account.'))])],\n  type_params=[])",
    "StorageAccounts_ListAccountSAS": "FunctionDef(\n  name='StorageAccounts_ListAccountSAS',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List SAS credentials of a storage account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/ListAccountSas')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_ListAccountSAS')),\n        keyword(\n          arg='description',\n          value=Constant(value='List SAS credentials of a storage account.'))])],\n  type_params=[])",
    "StorageAccounts_ListServiceSAS": "FunctionDef(\n  name='StorageAccounts_ListServiceSAS',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List service SAS credentials of a specific resource.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/ListServiceSas')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='StorageAccounts_ListServiceSAS')),\n        keyword(\n          arg='description',\n          value=Constant(value='List service SAS credentials of a specific resource.'))])],\n  type_params=[])"
  }
}