{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "Information regarding availability of a resource.",
              "properties": {
                "isAvailable": {
                  "description": "<code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.",
                  "type": "boolean"
                },
                "message": {
                  "description": "If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.",
                  "type": "string"
                },
                "reason": {
                  "description": "<code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.",
                  "enum": [
                    "Invalid",
                    "AlreadyExists"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InAvailabilityReasonType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CheckAvailabilityResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota availability request content.",
              "properties": {
                "name": {
                  "description": "Name of the resource to verify.",
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "Resource group name.",
                  "type": "string"
                },
                "type": {
                  "description": "Resource type used for verification.",
                  "enum": [
                    "Microsoft.NetApp/netAppAccounts",
                    "Microsoft.NetApp/netAppAccounts/capacityPools",
                    "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                    "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CheckQuotaNameResourceTypes"
                  }
                }
              },
              "required": [
                "name",
                "type",
                "resourceGroup"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaAvailabilityRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource name availability request content.",
              "properties": {
                "name": {
                  "description": "Resource name to verify.",
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "Resource group name.",
                  "type": "string"
                },
                "type": {
                  "description": "Resource type used for verification.",
                  "enum": [
                    "Microsoft.NetApp/netAppAccounts",
                    "Microsoft.NetApp/netAppAccounts/capacityPools",
                    "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                    "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CheckNameResourceTypes"
                  }
                }
              },
              "required": [
                "name",
                "type",
                "resourceGroup"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ResourceNameAvailabilityRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption settings",
              "properties": {
                "keySource": {
                  "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/accountEncryption"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
              "example": "ADServerName",
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/adName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, AES encryption will be enabled for SMB communication.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/aesEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/backupOperators"
          },
          {
            "oldValue": {
              "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/dNS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
              "example": "101.102.103.104,101.102.103.105",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/dns"
          },
          {
            "oldValue": null,
            "value": {
              "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
              "example": "101.102.103.104",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/kdcIP"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/ldapOverTLS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be signed.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/ldapSigning"
          },
          {
            "oldValue": null,
            "value": "CN=Computers",
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/organizationalUnit/default"
          },
          {
            "oldValue": "Plain text password of Active Directory domain administrator",
            "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
            "op": "replace",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/password/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/password/x-ms-secret"
          },
          {
            "oldValue": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/sMBServerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/securityOperators"
          },
          {
            "oldValue": null,
            "value": {
              "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
              "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
              "maxLength": 10240,
              "minLength": 1,
              "type": "string",
              "x-ms-secret": true
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/serverRootCACertificate"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Active Directory site the service will limit Domain Controller discovery to",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/site"
          },
          {
            "oldValue": null,
            "value": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/smbServerName"
          },
          {
            "oldValue": null,
            "value": [
              "Created",
              "Updating",
              "InUse",
              "Deleted",
              "Error"
            ],
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/status/enum"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/status/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ActiveDirectoryStatus",
              "values": [
                {
                  "description": "Active Directory created but not in use",
                  "value": "Created"
                },
                {
                  "description": "Active Directory in use by SMB Volume",
                  "value": "InUse"
                },
                {
                  "description": "Active Directory Deleted",
                  "value": "Deleted"
                },
                {
                  "description": "Error with the Active Directory",
                  "value": "Error"
                },
                {
                  "description": "Active Directory Updating",
                  "value": "Updating"
                }
              ]
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/status/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Any details in regards to the Status of the Active Directory",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/statusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption settings",
              "properties": {
                "keySource": {
                  "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/encryption"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/activeDirectoryId/x-nullable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
              "example": "ADServerName",
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/adName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, AES encryption will be enabled for SMB communication.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/aesEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/allowLocalNfsUsersWithLdap"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/backupOperators"
          },
          {
            "oldValue": {
              "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/activeDirectory/properties/dNS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
              "example": "101.102.103.104,101.102.103.105",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/dns"
          },
          {
            "oldValue": null,
            "value": {
              "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
              "example": "101.102.103.104",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/kdcIP"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/ldapOverTLS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be signed.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/ldapSigning"
          },
          {
            "oldValue": null,
            "value": "CN=Computers",
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/organizationalUnit/default"
          },
          {
            "oldValue": "Plain text password of Active Directory domain administrator",
            "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
            "op": "replace",
            "from": "",
            "path": "/activeDirectory/properties/password/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/password/x-ms-secret"
          },
          {
            "oldValue": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/activeDirectory/properties/sMBServerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/securityOperators"
          },
          {
            "oldValue": null,
            "value": {
              "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
              "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
              "maxLength": 10240,
              "minLength": 1,
              "type": "string",
              "x-ms-secret": true
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/serverRootCACertificate"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Active Directory site the service will limit Domain Controller discovery to",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/site"
          },
          {
            "oldValue": null,
            "value": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/smbServerName"
          },
          {
            "oldValue": null,
            "value": [
              "Created",
              "Updating",
              "InUse",
              "Deleted",
              "Error"
            ],
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/status/enum"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/status/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ActiveDirectoryStatus",
              "values": [
                {
                  "description": "Active Directory created but not in use",
                  "value": "Created"
                },
                {
                  "description": "Active Directory in use by SMB Volume",
                  "value": "InUse"
                },
                {
                  "description": "Active Directory Deleted",
                  "value": "Deleted"
                },
                {
                  "description": "Error with the Active Directory",
                  "value": "Error"
                },
                {
                  "description": "Active Directory Updating",
                  "value": "Updating"
                }
              ]
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/status/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Any details in regards to the Status of the Active Directory",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/statusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Authorize request",
              "properties": {
                "remoteVolumeResourceId": {
                  "description": "Resource id of the remote volume",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/authorizeRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup of a Volume",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Backup properties",
                  "properties": {
                    "backupId": {
                      "description": "UUID v4 used to identify the Backup",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                      "readOnly": true,
                      "title": "backupId",
                      "type": "string"
                    },
                    "backupType": {
                      "description": "Type of backup Manual or Scheduled",
                      "enum": [
                        "Manual",
                        "Scheduled"
                      ],
                      "example": "Manual",
                      "readOnly": true,
                      "title": "backupType",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "backupType",
                        "values": [
                          {
                            "description": "Manual backup",
                            "value": "Manual"
                          },
                          {
                            "description": "Scheduled backup",
                            "value": "Scheduled"
                          }
                        ]
                      }
                    },
                    "creationDate": {
                      "description": "The creation date of the backup",
                      "example": "2017-08-15 13:23:33",
                      "format": "date-time",
                      "readOnly": true,
                      "title": "name",
                      "type": "string"
                    },
                    "failureReason": {
                      "description": "Failure reason",
                      "readOnly": true,
                      "type": "string"
                    },
                    "label": {
                      "description": "Label for backup",
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "size": {
                      "description": "Size of backup",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "useExistingSnapshot": {
                      "default": false,
                      "description": "Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups",
                      "example": true,
                      "type": "boolean"
                    },
                    "volumeName": {
                      "description": "Volume name",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location",
                "properties"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/backup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup patch",
              "properties": {
                "properties": {
                  "description": "Backup properties",
                  "properties": {
                    "backupId": {
                      "description": "UUID v4 used to identify the Backup",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                      "readOnly": true,
                      "title": "backupId",
                      "type": "string"
                    },
                    "backupType": {
                      "description": "Type of backup Manual or Scheduled",
                      "enum": [
                        "Manual",
                        "Scheduled"
                      ],
                      "example": "Manual",
                      "readOnly": true,
                      "title": "backupType",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "backupType",
                        "values": [
                          {
                            "description": "Manual backup",
                            "value": "Manual"
                          },
                          {
                            "description": "Scheduled backup",
                            "value": "Scheduled"
                          }
                        ]
                      }
                    },
                    "creationDate": {
                      "description": "The creation date of the backup",
                      "example": "2017-08-15 13:23:33",
                      "format": "date-time",
                      "readOnly": true,
                      "title": "name",
                      "type": "string"
                    },
                    "failureReason": {
                      "description": "Failure reason",
                      "readOnly": true,
                      "type": "string"
                    },
                    "label": {
                      "description": "Label for backup",
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "size": {
                      "description": "Size of backup",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "useExistingSnapshot": {
                      "default": false,
                      "description": "Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups",
                      "example": true,
                      "type": "boolean"
                    },
                    "volumeName": {
                      "description": "Volume name",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/backupPatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of Backup Policies",
              "properties": {
                "value": {
                  "description": "A list of backup policies",
                  "items": {
                    "description": "Backup policy information",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Backup policy properties",
                        "properties": {
                          "dailyBackupsToKeep": {
                            "description": "Daily backups count to keep",
                            "format": "int32",
                            "type": "integer"
                          },
                          "enabled": {
                            "description": "The property to decide policy is enabled or not",
                            "type": "boolean"
                          },
                          "monthlyBackupsToKeep": {
                            "description": "Monthly backups count to keep",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of backup policy",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "readOnly": true,
                            "type": "string"
                          },
                          "volumeBackups": {
                            "description": "A list of volumes assigned to this policy",
                            "items": {
                              "description": "Volume details using the backup policy",
                              "properties": {
                                "backupsCount": {
                                  "description": "Total count of backups for volume",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "policyEnabled": {
                                  "description": "Policy enabled",
                                  "type": "boolean"
                                },
                                "volumeName": {
                                  "description": "Volume name",
                                  "type": "string"
                                }
                              },
                              "readOnly": true,
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "volumesAssigned": {
                            "description": "Volumes using current backup policy",
                            "format": "int32",
                            "type": "integer"
                          },
                          "weeklyBackupsToKeep": {
                            "description": "Weekly backups count to keep",
                            "format": "int32",
                            "type": "integer"
                          },
                          "yearlyBackupsToKeep": {
                            "description": "Yearly backups count to keep",
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource",
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "properties"
                    ],
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/backupPoliciesList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup policy information",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Backup policy properties",
                  "properties": {
                    "dailyBackupsToKeep": {
                      "description": "Daily backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "monthlyBackupsToKeep": {
                      "description": "Monthly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of backup policy",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "volumeBackups": {
                      "description": "A list of volumes assigned to this policy",
                      "items": {
                        "description": "Volume details using the backup policy",
                        "properties": {
                          "backupsCount": {
                            "description": "Total count of backups for volume",
                            "format": "int32",
                            "type": "integer"
                          },
                          "policyEnabled": {
                            "description": "Policy enabled",
                            "type": "boolean"
                          },
                          "volumeName": {
                            "description": "Volume name",
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "volumesAssigned": {
                      "description": "Volumes using current backup policy",
                      "format": "int32",
                      "type": "integer"
                    },
                    "weeklyBackupsToKeep": {
                      "description": "Weekly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "yearlyBackupsToKeep": {
                      "description": "Yearly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location",
                "properties"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/backupPolicy"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup policy properties",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Backup policy properties",
                  "properties": {
                    "dailyBackupsToKeep": {
                      "description": "Daily backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "monthlyBackupsToKeep": {
                      "description": "Monthly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of backup policy",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "volumeBackups": {
                      "description": "A list of volumes assigned to this policy",
                      "items": {
                        "description": "Volume details using the backup policy",
                        "properties": {
                          "backupsCount": {
                            "description": "Total count of backups for volume",
                            "format": "int32",
                            "type": "integer"
                          },
                          "policyEnabled": {
                            "description": "Policy enabled",
                            "type": "boolean"
                          },
                          "volumeName": {
                            "description": "Volume name",
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "volumesAssigned": {
                      "description": "Volumes using current backup policy",
                      "format": "int32",
                      "type": "integer"
                    },
                    "weeklyBackupsToKeep": {
                      "description": "Weekly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "yearlyBackupsToKeep": {
                      "description": "Yearly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/backupPolicyDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup policy Details for create and update",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Backup policy properties",
                  "properties": {
                    "dailyBackupsToKeep": {
                      "description": "Daily backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "monthlyBackupsToKeep": {
                      "description": "Monthly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of backup policy",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "volumeBackups": {
                      "description": "A list of volumes assigned to this policy",
                      "items": {
                        "description": "Volume details using the backup policy",
                        "properties": {
                          "backupsCount": {
                            "description": "Total count of backups for volume",
                            "format": "int32",
                            "type": "integer"
                          },
                          "policyEnabled": {
                            "description": "Policy enabled",
                            "type": "boolean"
                          },
                          "volumeName": {
                            "description": "Volume name",
                            "type": "string"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "volumesAssigned": {
                      "description": "Volumes using current backup policy",
                      "format": "int32",
                      "type": "integer"
                    },
                    "weeklyBackupsToKeep": {
                      "description": "Weekly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "yearlyBackupsToKeep": {
                      "description": "Yearly backups count to keep",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/backupPolicyPatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup policy properties",
              "properties": {
                "dailyBackupsToKeep": {
                  "description": "Daily backups count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "enabled": {
                  "description": "The property to decide policy is enabled or not",
                  "type": "boolean"
                },
                "monthlyBackupsToKeep": {
                  "description": "Monthly backups count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of backup policy",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "Azure lifecycle management",
                  "readOnly": true,
                  "type": "string"
                },
                "volumeBackups": {
                  "description": "A list of volumes assigned to this policy",
                  "items": {
                    "description": "Volume details using the backup policy",
                    "properties": {
                      "backupsCount": {
                        "description": "Total count of backups for volume",
                        "format": "int32",
                        "type": "integer"
                      },
                      "policyEnabled": {
                        "description": "Policy enabled",
                        "type": "boolean"
                      },
                      "volumeName": {
                        "description": "Volume name",
                        "type": "string"
                      }
                    },
                    "readOnly": true,
                    "type": "object"
                  },
                  "type": "array"
                },
                "volumesAssigned": {
                  "description": "Volumes using current backup policy",
                  "format": "int32",
                  "type": "integer"
                },
                "weeklyBackupsToKeep": {
                  "description": "Weekly backups count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "yearlyBackupsToKeep": {
                  "description": "Yearly backups count to keep",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/backupPolicyProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup properties",
              "properties": {
                "backupId": {
                  "description": "UUID v4 used to identify the Backup",
                  "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                  "maxLength": 36,
                  "minLength": 36,
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "readOnly": true,
                  "title": "backupId",
                  "type": "string"
                },
                "backupType": {
                  "description": "Type of backup Manual or Scheduled",
                  "enum": [
                    "Manual",
                    "Scheduled"
                  ],
                  "example": "Manual",
                  "readOnly": true,
                  "title": "backupType",
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "backupType",
                    "values": [
                      {
                        "description": "Manual backup",
                        "value": "Manual"
                      },
                      {
                        "description": "Scheduled backup",
                        "value": "Scheduled"
                      }
                    ]
                  }
                },
                "creationDate": {
                  "description": "The creation date of the backup",
                  "example": "2017-08-15 13:23:33",
                  "format": "date-time",
                  "readOnly": true,
                  "title": "name",
                  "type": "string"
                },
                "failureReason": {
                  "description": "Failure reason",
                  "readOnly": true,
                  "type": "string"
                },
                "label": {
                  "description": "Label for backup",
                  "type": "string"
                },
                "provisioningState": {
                  "description": "Azure lifecycle management",
                  "readOnly": true,
                  "type": "string"
                },
                "size": {
                  "description": "Size of backup",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "useExistingSnapshot": {
                  "default": false,
                  "description": "Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups",
                  "example": true,
                  "type": "boolean"
                },
                "volumeName": {
                  "description": "Volume name",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/backupProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup status",
              "properties": {
                "errorMessage": {
                  "description": "Displays error message if the backup is in an error state",
                  "readOnly": true,
                  "type": "string"
                },
                "healthy": {
                  "description": "Backup health status",
                  "readOnly": true,
                  "type": "boolean"
                },
                "mirrorState": {
                  "description": "The status of the backup",
                  "enum": [
                    "Uninitialized",
                    "Mirrored",
                    "Broken"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "MirrorState"
                  }
                },
                "relationshipStatus": {
                  "description": "Status of the backup mirror relationship",
                  "enum": [
                    "Idle",
                    "Transferring"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "RelationshipStatus"
                  }
                },
                "unhealthyReason": {
                  "description": "Reason for the unhealthy backup relationship",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/backupStatus"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of Backups",
              "properties": {
                "value": {
                  "description": "A list of Backups",
                  "items": {
                    "description": "Backup of a Volume",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Backup properties",
                        "properties": {
                          "backupId": {
                            "description": "UUID v4 used to identify the Backup",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "readOnly": true,
                            "title": "backupId",
                            "type": "string"
                          },
                          "backupType": {
                            "description": "Type of backup Manual or Scheduled",
                            "enum": [
                              "Manual",
                              "Scheduled"
                            ],
                            "example": "Manual",
                            "readOnly": true,
                            "title": "backupType",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "backupType",
                              "values": [
                                {
                                  "description": "Manual backup",
                                  "value": "Manual"
                                },
                                {
                                  "description": "Scheduled backup",
                                  "value": "Scheduled"
                                }
                              ]
                            }
                          },
                          "creationDate": {
                            "description": "The creation date of the backup",
                            "example": "2017-08-15 13:23:33",
                            "format": "date-time",
                            "readOnly": true,
                            "title": "name",
                            "type": "string"
                          },
                          "failureReason": {
                            "description": "Failure reason",
                            "readOnly": true,
                            "type": "string"
                          },
                          "label": {
                            "description": "Label for backup",
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "readOnly": true,
                            "type": "string"
                          },
                          "size": {
                            "description": "Size of backup",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "useExistingSnapshot": {
                            "default": false,
                            "description": "Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups",
                            "example": true,
                            "type": "boolean"
                          },
                          "volumeName": {
                            "description": "Volume name",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "properties"
                    ],
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/backupsList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Break replication request",
              "properties": {
                "forceBreakReplication": {
                  "description": "If replication is in status transferring and you want to force break the replication, set to true",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/breakReplicationRequest"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Auto",
              "description": "The qos type of the pool",
              "enum": [
                "Auto",
                "Manual"
              ],
              "example": "Manual",
              "title": "qosType",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "qosType",
                "values": [
                  {
                    "description": "qos type Auto",
                    "value": "Auto"
                  },
                  {
                    "description": "qos type Manual",
                    "value": "Manual"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/capacityPool/properties/properties/properties/qosType"
          },
          {
            "oldValue": 4398046511104,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/properties/properties/size/default"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Total throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPool/properties/properties/properties/totalThroughputMibps"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Utilized throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPool/properties/properties/properties/utilizedThroughputMibps"
          },
          {
            "oldValue": null,
            "value": [
              "size",
              "serviceLevel"
            ],
            "op": "add",
            "from": "",
            "path": "/capacityPool/properties/properties/required"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPool/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/capacityPool/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "URL to get the next set of results.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/nextLink"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Auto",
              "description": "The qos type of the pool",
              "enum": [
                "Auto",
                "Manual"
              ],
              "example": "Manual",
              "title": "qosType",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "qosType",
                "values": [
                  {
                    "description": "qos type Auto",
                    "value": "Auto"
                  },
                  {
                    "description": "qos type Manual",
                    "value": "Manual"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/properties/properties/qosType"
          },
          {
            "oldValue": 4398046511104,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/properties/properties/size/default"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Total throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/properties/properties/totalThroughputMibps"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Utilized throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/properties/properties/utilizedThroughputMibps"
          },
          {
            "oldValue": null,
            "value": [
              "size",
              "serviceLevel"
            ],
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/properties/required"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Auto",
              "description": "The qos type of the pool",
              "enum": [
                "Auto",
                "Manual"
              ],
              "example": "Manual",
              "title": "qosType",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "qosType",
                "values": [
                  {
                    "description": "qos type Auto",
                    "value": "Auto"
                  },
                  {
                    "description": "qos type Manual",
                    "value": "Manual"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolPatch/properties/properties/properties/qosType"
          },
          {
            "oldValue": {
              "default": "Premium",
              "description": "The service level of the file system",
              "enum": [
                "Standard",
                "Premium",
                "Ultra"
              ],
              "example": "Ultra",
              "title": "serviceLevel",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ServiceLevel",
                "values": [
                  {
                    "description": "Standard service level",
                    "value": "Standard"
                  },
                  {
                    "description": "Premium service level",
                    "value": "Premium"
                  },
                  {
                    "description": "Ultra service level",
                    "value": "Ultra"
                  }
                ]
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolPatch/properties/properties/properties/serviceLevel"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/capacityPoolPatch/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/capacityPoolPatch/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An error response from the service.",
              "properties": {
                "error": {
                  "description": "An error response from the service.",
                  "properties": {
                    "code": {
                      "description": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A message describing the error, intended to be suitable for display in a user interface.",
                      "type": "string"
                    }
                  },
                  "x-ms-external": true
                }
              },
              "x-ms-external": true
            },
            "op": "add",
            "from": "",
            "path": "/cloudError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An error response from the service.",
              "properties": {
                "code": {
                  "description": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
                  "type": "string"
                },
                "message": {
                  "description": "A message describing the error, intended to be suitable for display in a user interface.",
                  "type": "string"
                }
              },
              "x-ms-external": true
            },
            "op": "add",
            "from": "",
            "path": "/cloudErrorBody"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Daily Schedule properties",
              "properties": {
                "hour": {
                  "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                  "example": 11,
                  "format": "int32",
                  "type": "integer"
                },
                "minute": {
                  "description": "Indicates which minute snapshot should be taken",
                  "example": 30,
                  "format": "int32",
                  "type": "integer"
                },
                "snapshotsToKeep": {
                  "description": "Daily snapshot count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "usedBytes": {
                  "description": "Resource size in bytes, current storage usage for the volume in bytes",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/dailySchedule"
          },
          {
            "oldValue": {
              "description": "Error response describing why the operation failed.",
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "ErrorCode",
                  "type": "string"
                },
                "message": {
                  "description": "Detailed error message",
                  "example": "Detailed error message",
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/error"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/exportPolicyRule/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/exportPolicyRule/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/exportPolicyRule/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Hourly Schedule properties",
              "properties": {
                "minute": {
                  "description": "Indicates which minute snapshot should be taken",
                  "example": 30,
                  "format": "int32",
                  "type": "integer"
                },
                "snapshotsToKeep": {
                  "description": "Hourly snapshot count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "usedBytes": {
                  "description": "Resource size in bytes, current storage usage for the volume in bytes",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/hourlySchedule"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Monthly Schedule properties",
              "properties": {
                "daysOfMonth": {
                  "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                  "example": "1,11,21",
                  "type": "string"
                },
                "hour": {
                  "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                  "example": 11,
                  "format": "int32",
                  "type": "integer"
                },
                "minute": {
                  "description": "Indicates which minute snapshot should be taken",
                  "example": 30,
                  "format": "int32",
                  "type": "integer"
                },
                "snapshotsToKeep": {
                  "description": "Monthly snapshot count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "usedBytes": {
                  "description": "Resource size in bytes, current storage usage for the volume in bytes",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/monthlySchedule"
          },
          {
            "oldValue": {
              "description": "The end of IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "endIp",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/endIp"
          },
          {
            "oldValue": {
              "description": "The gateway of the IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "gateway",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/gateway"
          },
          {
            "oldValue": {
              "description": "The netmask of the IPv4 address range to use when creating a new mount target",
              "example": "255.255.255.0",
              "title": "netmask",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/netmask"
          },
          {
            "oldValue": {
              "description": "Azure lifecycle management",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/provisioningState"
          },
          {
            "oldValue": {
              "description": "The start of IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "startIp",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/startIp"
          },
          {
            "oldValue": {
              "description": "The subnet",
              "example": "1.2.3.4",
              "title": "subnet",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTarget/properties/properties/properties/subnet"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/mountTarget/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/mountTarget/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/mountTarget/properties/type"
          },
          {
            "oldValue": {
              "description": "List of Mount Targets",
              "properties": {
                "value": {
                  "description": "A list of Mount targets",
                  "items": {
                    "description": "Mount Target",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string"
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Mount target properties",
                        "properties": {
                          "endIp": {
                            "description": "The end of IPv4 address range to use when creating a new mount target",
                            "example": "1.2.3.4",
                            "title": "endIp",
                            "type": "string"
                          },
                          "fileSystemId": {
                            "description": "UUID v4 used to identify the MountTarget",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "title": "fileSystemId",
                            "type": "string"
                          },
                          "gateway": {
                            "description": "The gateway of the IPv4 address range to use when creating a new mount target",
                            "example": "1.2.3.4",
                            "title": "gateway",
                            "type": "string"
                          },
                          "ipAddress": {
                            "description": "The mount target's IPv4 address",
                            "example": "1.2.3.4",
                            "readOnly": true,
                            "title": "ipAddress",
                            "type": "string"
                          },
                          "mountTargetId": {
                            "description": "UUID v4 used to identify the MountTarget",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "readOnly": true,
                            "title": "mountTargetId",
                            "type": "string"
                          },
                          "netmask": {
                            "description": "The netmask of the IPv4 address range to use when creating a new mount target",
                            "example": "255.255.255.0",
                            "title": "netmask",
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "readOnly": true,
                            "type": "string"
                          },
                          "smbServerFqdn": {
                            "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                            "example": "fullyqualified.domainname.com",
                            "title": "smbServerFQDN",
                            "type": "string"
                          },
                          "startIp": {
                            "description": "The start of IPv4 address range to use when creating a new mount target",
                            "example": "1.2.3.4",
                            "title": "startIp",
                            "type": "string"
                          },
                          "subnet": {
                            "description": "The subnet",
                            "example": "1.2.3.4",
                            "title": "subnet",
                            "type": "string"
                          }
                        },
                        "required": [
                          "fileSystemId"
                        ],
                        "type": "object"
                      },
                      "tags": {
                        "description": "Resource tags",
                        "type": "object"
                      }
                    },
                    "required": [
                      "location",
                      "properties"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetList"
          },
          {
            "oldValue": {
              "description": "The end of IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "endIp",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/endIp"
          },
          {
            "oldValue": {
              "description": "The gateway of the IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "gateway",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/gateway"
          },
          {
            "oldValue": {
              "description": "The netmask of the IPv4 address range to use when creating a new mount target",
              "example": "255.255.255.0",
              "title": "netmask",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/netmask"
          },
          {
            "oldValue": {
              "description": "Azure lifecycle management",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/provisioningState"
          },
          {
            "oldValue": {
              "description": "The start of IPv4 address range to use when creating a new mount target",
              "example": "1.2.3.4",
              "title": "startIp",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/startIp"
          },
          {
            "oldValue": {
              "description": "The subnet",
              "example": "1.2.3.4",
              "title": "subnet",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/mountTargetProperties/properties/subnet"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
              "example": "ADServerName",
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/adName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, AES encryption will be enabled for SMB communication.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/backupOperators"
          },
          {
            "oldValue": {
              "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/dNS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
              "example": "101.102.103.104,101.102.103.105",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/dns"
          },
          {
            "oldValue": null,
            "value": {
              "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
              "example": "101.102.103.104",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/kdcIP"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be signed.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
          },
          {
            "oldValue": null,
            "value": "CN=Computers",
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
          },
          {
            "oldValue": "Plain text password of Active Directory domain administrator",
            "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
            "op": "replace",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/password/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
          },
          {
            "oldValue": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/securityOperators"
          },
          {
            "oldValue": null,
            "value": {
              "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
              "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
              "maxLength": 10240,
              "minLength": 1,
              "type": "string",
              "x-ms-secret": true
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Active Directory site the service will limit Domain Controller discovery to",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/site"
          },
          {
            "oldValue": null,
            "value": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/smbServerName"
          },
          {
            "oldValue": null,
            "value": [
              "Created",
              "Updating",
              "InUse",
              "Deleted",
              "Error"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/status/enum"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ActiveDirectoryStatus",
              "values": [
                {
                  "description": "Active Directory created but not in use",
                  "value": "Created"
                },
                {
                  "description": "Active Directory in use by SMB Volume",
                  "value": "InUse"
                },
                {
                  "description": "Active Directory Deleted",
                  "value": "Deleted"
                },
                {
                  "description": "Error with the Active Directory",
                  "value": "Error"
                },
                {
                  "description": "Active Directory Updating",
                  "value": "Updating"
                }
              ]
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Any details in regards to the Status of the Active Directory",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/statusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption settings",
              "properties": {
                "keySource": {
                  "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/encryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata pertaining to creation and last modification of the resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created the resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity that created the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of resource last modification (UTC)",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified the resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity that last modified the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/systemData"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/netAppAccount/properties/tags/description"
          },
          {
            "oldValue": "properties",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/required/1"
          },
          {
            "oldValue": null,
            "value": {
              "description": "URL to get the next set of results.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/nextLink"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
              "example": "ADServerName",
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/adName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, AES encryption will be enabled for SMB communication.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/backupOperators"
          },
          {
            "oldValue": {
              "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/dNS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
              "example": "101.102.103.104,101.102.103.105",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/dns"
          },
          {
            "oldValue": null,
            "value": {
              "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
              "example": "101.102.103.104",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/kdcIP"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be signed.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
          },
          {
            "oldValue": null,
            "value": "CN=Computers",
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
          },
          {
            "oldValue": "Plain text password of Active Directory domain administrator",
            "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
            "op": "replace",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/password/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
          },
          {
            "oldValue": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/securityOperators"
          },
          {
            "oldValue": null,
            "value": {
              "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
              "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
              "maxLength": 10240,
              "minLength": 1,
              "type": "string",
              "x-ms-secret": true
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Active Directory site the service will limit Domain Controller discovery to",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/site"
          },
          {
            "oldValue": null,
            "value": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/smbServerName"
          },
          {
            "oldValue": null,
            "value": [
              "Created",
              "Updating",
              "InUse",
              "Deleted",
              "Error"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/enum"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ActiveDirectoryStatus",
              "values": [
                {
                  "description": "Active Directory created but not in use",
                  "value": "Created"
                },
                {
                  "description": "Active Directory in use by SMB Volume",
                  "value": "InUse"
                },
                {
                  "description": "Active Directory Deleted",
                  "value": "Deleted"
                },
                {
                  "description": "Error with the Active Directory",
                  "value": "Error"
                },
                {
                  "description": "Active Directory Updating",
                  "value": "Updating"
                }
              ]
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Any details in regards to the Status of the Active Directory",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/statusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption settings",
              "properties": {
                "keySource": {
                  "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/encryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata pertaining to creation and last modification of the resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created the resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity that created the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of resource last modification (UTC)",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified the resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity that last modified the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/systemData"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/tags/description"
          },
          {
            "oldValue": "properties",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/required/1"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
              "example": "ADServerName",
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/adName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, AES encryption will be enabled for SMB communication.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/backupOperators"
          },
          {
            "oldValue": {
              "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/dNS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
              "example": "101.102.103.104,101.102.103.105",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/dns"
          },
          {
            "oldValue": null,
            "value": {
              "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
              "example": "101.102.103.104",
              "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/kdcIP"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Specifies whether or not the LDAP traffic needs to be signed.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
          },
          {
            "oldValue": null,
            "value": "CN=Computers",
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
          },
          {
            "oldValue": "Plain text password of Active Directory domain administrator",
            "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
            "op": "replace",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/password/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
          },
          {
            "oldValue": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/securityOperators"
          },
          {
            "oldValue": null,
            "value": {
              "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
              "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
              "maxLength": 10240,
              "minLength": 1,
              "type": "string",
              "x-ms-secret": true
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Active Directory site the service will limit Domain Controller discovery to",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/site"
          },
          {
            "oldValue": null,
            "value": {
              "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/smbServerName"
          },
          {
            "oldValue": null,
            "value": [
              "Created",
              "Updating",
              "InUse",
              "Deleted",
              "Error"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/status/enum"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "modelAsString": true,
              "name": "ActiveDirectoryStatus",
              "values": [
                {
                  "description": "Active Directory created but not in use",
                  "value": "Created"
                },
                {
                  "description": "Active Directory in use by SMB Volume",
                  "value": "InUse"
                },
                {
                  "description": "Active Directory Deleted",
                  "value": "Deleted"
                },
                {
                  "description": "Error with the Active Directory",
                  "value": "Error"
                },
                {
                  "description": "Active Directory Updating",
                  "value": "Updating"
                }
              ]
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Any details in regards to the Status of the Active Directory",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/statusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption settings",
              "properties": {
                "keySource": {
                  "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/encryption"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/netAppAccountPatch/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Pool change request",
              "properties": {
                "newPoolResourceId": {
                  "description": "Resource id of the pool to move volume to",
                  "type": "string"
                }
              },
              "required": [
                "newPoolResourceId"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/poolChangeRequest"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Auto",
              "description": "The qos type of the pool",
              "enum": [
                "Auto",
                "Manual"
              ],
              "example": "Manual",
              "title": "qosType",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "qosType",
                "values": [
                  {
                    "description": "qos type Auto",
                    "value": "Auto"
                  },
                  {
                    "description": "qos type Manual",
                    "value": "Manual"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/poolPatchProperties/properties/qosType"
          },
          {
            "oldValue": {
              "default": "Premium",
              "description": "The service level of the file system",
              "enum": [
                "Standard",
                "Premium",
                "Ultra"
              ],
              "example": "Ultra",
              "title": "serviceLevel",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ServiceLevel",
                "values": [
                  {
                    "description": "Standard service level",
                    "value": "Standard"
                  },
                  {
                    "description": "Premium service level",
                    "value": "Premium"
                  },
                  {
                    "description": "Ultra service level",
                    "value": "Ultra"
                  }
                ]
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/poolPatchProperties/properties/serviceLevel"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Auto",
              "description": "The qos type of the pool",
              "enum": [
                "Auto",
                "Manual"
              ],
              "example": "Manual",
              "title": "qosType",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "qosType",
                "values": [
                  {
                    "description": "qos type Auto",
                    "value": "Auto"
                  },
                  {
                    "description": "qos type Manual",
                    "value": "Manual"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/poolProperties/properties/qosType"
          },
          {
            "oldValue": 4398046511104,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/poolProperties/properties/size/default"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Total throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/poolProperties/properties/totalThroughputMibps"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Utilized throughput of pool in Mibps",
              "example": 164.221,
              "readOnly": true,
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/poolProperties/properties/utilizedThroughputMibps"
          },
          {
            "oldValue": null,
            "value": [
              "size",
              "serviceLevel"
            ],
            "op": "add",
            "from": "",
            "path": "/poolProperties/required"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provides region specific information.",
              "properties": {
                "storageToNetworkProximity": {
                  "description": "Provides storage to network proximity information in the region.",
                  "enum": [
                    "Default",
                    "T1",
                    "T2",
                    "T1AndT2"
                  ],
                  "example": "T2",
                  "title": "Storage to Network Proximity",
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "RegionStorageToNetworkProximity",
                    "values": [
                      {
                        "description": "Basic network connectivity.",
                        "value": "Default"
                      },
                      {
                        "description": "Standard T1 network connectivity.",
                        "value": "T1"
                      },
                      {
                        "description": "Standard T2 network connectivity.",
                        "value": "T2"
                      },
                      {
                        "description": "Standard T1 and T2 network connectivity.",
                        "value": "T1AndT2"
                      }
                    ]
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/regionInfo"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Replication properties",
              "properties": {
                "endpointType": {
                  "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                  "enum": [
                    "src",
                    "dst"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "EndpointType"
                  }
                },
                "remoteVolumeRegion": {
                  "description": "The remote region for the other end of the Volume Replication.",
                  "type": "string"
                },
                "remoteVolumeResourceId": {
                  "description": "The resource ID of the remote volume.",
                  "type": "string"
                },
                "replicationId": {
                  "description": "Id",
                  "type": "string"
                },
                "replicationSchedule": {
                  "description": "Schedule",
                  "enum": [
                    "_10minutely",
                    "hourly",
                    "daily"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReplicationSchedule"
                  }
                }
              },
              "required": [
                "replicationSchedule",
                "remoteVolumeResourceId"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/replicationObject"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Replication status",
              "properties": {
                "errorMessage": {
                  "description": "Displays error message if the replication is in an error state",
                  "type": "string"
                },
                "healthy": {
                  "description": "Replication health check",
                  "type": "boolean"
                },
                "mirrorState": {
                  "description": "The status of the replication",
                  "enum": [
                    "Uninitialized",
                    "Mirrored",
                    "Broken"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "MirrorState"
                  }
                },
                "relationshipStatus": {
                  "description": "Status of the mirror relationship",
                  "enum": [
                    "Idle",
                    "Transferring"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "RelationshipStatus"
                  }
                },
                "totalProgress": {
                  "description": "The progress of the replication",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/replicationStatus"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "Object id of the identity resource",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant id of the resource",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "Type of Identity. Supported values are: 'None', 'SystemAssigned'",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/resourceIdentity"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/resourceTags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/resourceTags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/snapshot/properties/properties/properties/created"
          },
          {
            "oldValue": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshot/properties/properties/properties/creationDate"
          },
          {
            "oldValue": {
              "description": "UUID v4 used to identify the FileSystem",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "title": "fileSystemId",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshot/properties/properties/properties/fileSystemId"
          },
          {
            "oldValue": [
              "fileSystemId"
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshot/properties/properties/required"
          },
          {
            "oldValue": {
              "description": "Resource tags",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshot/properties/tags"
          },
          {
            "oldValue": "properties",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshot/required/1"
          },
          {
            "oldValue": {
              "description": "Resource tags",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPatch/properties/tags"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of Snapshot Policies",
              "properties": {
                "value": {
                  "description": "A list of snapshot policies",
                  "items": {
                    "description": "Snapshot policy information",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Snapshot policy properties",
                        "properties": {
                          "dailySchedule": {
                            "description": "Daily Schedule properties",
                            "properties": {
                              "hour": {
                                "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                                "example": 11,
                                "format": "int32",
                                "type": "integer"
                              },
                              "minute": {
                                "description": "Indicates which minute snapshot should be taken",
                                "example": 30,
                                "format": "int32",
                                "type": "integer"
                              },
                              "snapshotsToKeep": {
                                "description": "Daily snapshot count to keep",
                                "format": "int32",
                                "type": "integer"
                              },
                              "usedBytes": {
                                "description": "Resource size in bytes, current storage usage for the volume in bytes",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "enabled": {
                            "description": "The property to decide policy is enabled or not",
                            "type": "boolean"
                          },
                          "hourlySchedule": {
                            "description": "Hourly Schedule properties",
                            "properties": {
                              "minute": {
                                "description": "Indicates which minute snapshot should be taken",
                                "example": 30,
                                "format": "int32",
                                "type": "integer"
                              },
                              "snapshotsToKeep": {
                                "description": "Hourly snapshot count to keep",
                                "format": "int32",
                                "type": "integer"
                              },
                              "usedBytes": {
                                "description": "Resource size in bytes, current storage usage for the volume in bytes",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "monthlySchedule": {
                            "description": "Monthly Schedule properties",
                            "properties": {
                              "daysOfMonth": {
                                "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                                "example": "1,11,21",
                                "type": "string"
                              },
                              "hour": {
                                "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                                "example": 11,
                                "format": "int32",
                                "type": "integer"
                              },
                              "minute": {
                                "description": "Indicates which minute snapshot should be taken",
                                "example": 30,
                                "format": "int32",
                                "type": "integer"
                              },
                              "snapshotsToKeep": {
                                "description": "Monthly snapshot count to keep",
                                "format": "int32",
                                "type": "integer"
                              },
                              "usedBytes": {
                                "description": "Resource size in bytes, current storage usage for the volume in bytes",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "readOnly": true,
                            "type": "string"
                          },
                          "weeklySchedule": {
                            "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
                            "properties": {
                              "day": {
                                "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                                "example": "Sunday,Monday",
                                "type": "string"
                              },
                              "hour": {
                                "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                                "example": 11,
                                "format": "int32",
                                "type": "integer"
                              },
                              "minute": {
                                "description": "Indicates which minute snapshot should be taken",
                                "example": 30,
                                "format": "int32",
                                "type": "integer"
                              },
                              "snapshotsToKeep": {
                                "description": "Weekly snapshot count to keep",
                                "format": "int32",
                                "type": "integer"
                              },
                              "usedBytes": {
                                "description": "Resource size in bytes, current storage usage for the volume in bytes",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource",
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "properties"
                    ],
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPoliciesList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Snapshot policy information",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Snapshot policy properties",
                  "properties": {
                    "dailySchedule": {
                      "description": "Daily Schedule properties",
                      "properties": {
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Daily snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "hourlySchedule": {
                      "description": "Hourly Schedule properties",
                      "properties": {
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Hourly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "monthlySchedule": {
                      "description": "Monthly Schedule properties",
                      "properties": {
                        "daysOfMonth": {
                          "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                          "example": "1,11,21",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Monthly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "weeklySchedule": {
                      "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
                      "properties": {
                        "day": {
                          "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                          "example": "Sunday,Monday",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Weekly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location",
                "properties"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicy"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Snapshot policy properties",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Snapshot policy properties",
                  "properties": {
                    "dailySchedule": {
                      "description": "Daily Schedule properties",
                      "properties": {
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Daily snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "hourlySchedule": {
                      "description": "Hourly Schedule properties",
                      "properties": {
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Hourly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "monthlySchedule": {
                      "description": "Monthly Schedule properties",
                      "properties": {
                        "daysOfMonth": {
                          "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                          "example": "1,11,21",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Monthly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "weeklySchedule": {
                      "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
                      "properties": {
                        "day": {
                          "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                          "example": "Sunday,Monday",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Weekly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Snapshot policy Details for create and update",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string"
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Snapshot policy properties",
                  "properties": {
                    "dailySchedule": {
                      "description": "Daily Schedule properties",
                      "properties": {
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Daily snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "enabled": {
                      "description": "The property to decide policy is enabled or not",
                      "type": "boolean"
                    },
                    "hourlySchedule": {
                      "description": "Hourly Schedule properties",
                      "properties": {
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Hourly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "monthlySchedule": {
                      "description": "Monthly Schedule properties",
                      "properties": {
                        "daysOfMonth": {
                          "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                          "example": "1,11,21",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Monthly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "weeklySchedule": {
                      "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
                      "properties": {
                        "day": {
                          "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                          "example": "Sunday,Monday",
                          "type": "string"
                        },
                        "hour": {
                          "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                          "example": 11,
                          "format": "int32",
                          "type": "integer"
                        },
                        "minute": {
                          "description": "Indicates which minute snapshot should be taken",
                          "example": 30,
                          "format": "int32",
                          "type": "integer"
                        },
                        "snapshotsToKeep": {
                          "description": "Weekly snapshot count to keep",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usedBytes": {
                          "description": "Resource size in bytes, current storage usage for the volume in bytes",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyPatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Snapshot policy properties",
              "properties": {
                "dailySchedule": {
                  "description": "Daily Schedule properties",
                  "properties": {
                    "hour": {
                      "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                      "example": 11,
                      "format": "int32",
                      "type": "integer"
                    },
                    "minute": {
                      "description": "Indicates which minute snapshot should be taken",
                      "example": 30,
                      "format": "int32",
                      "type": "integer"
                    },
                    "snapshotsToKeep": {
                      "description": "Daily snapshot count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "usedBytes": {
                      "description": "Resource size in bytes, current storage usage for the volume in bytes",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "enabled": {
                  "description": "The property to decide policy is enabled or not",
                  "type": "boolean"
                },
                "hourlySchedule": {
                  "description": "Hourly Schedule properties",
                  "properties": {
                    "minute": {
                      "description": "Indicates which minute snapshot should be taken",
                      "example": 30,
                      "format": "int32",
                      "type": "integer"
                    },
                    "snapshotsToKeep": {
                      "description": "Hourly snapshot count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "usedBytes": {
                      "description": "Resource size in bytes, current storage usage for the volume in bytes",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "monthlySchedule": {
                  "description": "Monthly Schedule properties",
                  "properties": {
                    "daysOfMonth": {
                      "description": "Indicates which days of the month snapshot should be taken. A comma delimited string.",
                      "example": "1,11,21",
                      "type": "string"
                    },
                    "hour": {
                      "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                      "example": 11,
                      "format": "int32",
                      "type": "integer"
                    },
                    "minute": {
                      "description": "Indicates which minute snapshot should be taken",
                      "example": 30,
                      "format": "int32",
                      "type": "integer"
                    },
                    "snapshotsToKeep": {
                      "description": "Monthly snapshot count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "usedBytes": {
                      "description": "Resource size in bytes, current storage usage for the volume in bytes",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Azure lifecycle management",
                  "readOnly": true,
                  "type": "string"
                },
                "weeklySchedule": {
                  "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
                  "properties": {
                    "day": {
                      "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                      "example": "Sunday,Monday",
                      "type": "string"
                    },
                    "hour": {
                      "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                      "example": 11,
                      "format": "int32",
                      "type": "integer"
                    },
                    "minute": {
                      "description": "Indicates which minute snapshot should be taken",
                      "example": 30,
                      "format": "int32",
                      "type": "integer"
                    },
                    "snapshotsToKeep": {
                      "description": "Weekly snapshot count to keep",
                      "format": "int32",
                      "type": "integer"
                    },
                    "usedBytes": {
                      "description": "Resource size in bytes, current storage usage for the volume in bytes",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volumes associated with snapshot policy",
              "properties": {
                "value": {
                  "description": "List of volumes",
                  "items": {
                    "description": "Associated volume resource Id",
                    "readOnly": true,
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyVolumeList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotProperties/properties/created"
          },
          {
            "oldValue": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotProperties/properties/creationDate"
          },
          {
            "oldValue": {
              "description": "UUID v4 used to identify the FileSystem",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "title": "fileSystemId",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotProperties/properties/fileSystemId"
          },
          {
            "oldValue": [
              "fileSystemId"
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotProperties/required"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/snapshotsList/properties/value/items/properties/properties/properties/created"
          },
          {
            "oldValue": {
              "description": "The creation date of the snapshot",
              "example": "2017-08-15 13:23:33",
              "format": "date-time",
              "readOnly": true,
              "title": "name",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotsList/properties/value/items/properties/properties/properties/creationDate"
          },
          {
            "oldValue": {
              "description": "UUID v4 used to identify the FileSystem",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "title": "fileSystemId",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotsList/properties/value/items/properties/properties/properties/fileSystemId"
          },
          {
            "oldValue": [
              "fileSystemId"
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotsList/properties/value/items/properties/properties/required"
          },
          {
            "oldValue": {
              "description": "Resource tags",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotsList/properties/value/items/properties/tags"
          },
          {
            "oldValue": "properties",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotsList/properties/value/items/required/1"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Vault information",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Vault properties",
                  "properties": {
                    "vaultName": {
                      "description": "Vault Name",
                      "readOnly": false,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location",
                "properties"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/vault"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of Vaults",
              "properties": {
                "value": {
                  "description": "A list of vaults",
                  "items": {
                    "description": "Vault information",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Vault properties",
                        "properties": {
                          "vaultName": {
                            "description": "Vault Name",
                            "readOnly": false,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "location",
                      "properties"
                    ],
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/vaultList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Vault properties",
              "properties": {
                "vaultName": {
                  "description": "Vault Name",
                  "readOnly": false,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/vaultProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Backup.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Backup ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/backupId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Unique Baremetal Tenant Identifier.",
              "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
              "readOnly": true,
              "title": "Baremetal Tenant ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/baremetalTenantId"
          },
          {
            "oldValue": null,
            "value": 80,
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/creationToken/maxLength"
          },
          {
            "oldValue": 40,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/properties/properties/creationToken/maximum"
          },
          {
            "oldValue": null,
            "value": 1,
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/creationToken/minLength"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/properties/properties/creationToken/minimum"
          },
          {
            "oldValue": null,
            "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/creationToken/pattern"
          },
          {
            "oldValue": null,
            "value": {
              "description": "DataProtection type volumes include an object containing details of the replication",
              "properties": {
                "backup": {
                  "description": "Volume Backup Properties",
                  "properties": {
                    "backupEnabled": {
                      "description": "Backup Enabled",
                      "type": "boolean"
                    },
                    "backupPolicyId": {
                      "description": "Backup Policy Resource ID",
                      "type": "string"
                    },
                    "policyEnforced": {
                      "description": "Policy Enforced",
                      "type": "boolean"
                    },
                    "vaultId": {
                      "description": "Vault Resource ID",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "replication": {
                  "description": "Replication properties",
                  "properties": {
                    "endpointType": {
                      "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                      "enum": [
                        "src",
                        "dst"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "EndpointType"
                      }
                    },
                    "remoteVolumeRegion": {
                      "description": "The remote region for the other end of the Volume Replication.",
                      "type": "string"
                    },
                    "remoteVolumeResourceId": {
                      "description": "The resource ID of the remote volume.",
                      "type": "string"
                    },
                    "replicationId": {
                      "description": "Id",
                      "type": "string"
                    },
                    "replicationSchedule": {
                      "description": "Schedule",
                      "enum": [
                        "_10minutely",
                        "hourly",
                        "daily"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReplicationSchedule"
                      }
                    }
                  },
                  "required": [
                    "replicationSchedule",
                    "remoteVolumeResourceId"
                  ],
                  "type": "object"
                },
                "snapshot": {
                  "description": "Volume Snapshot Properties",
                  "properties": {
                    "snapshotPolicyId": {
                      "description": "Snapshot Policy ResourceId",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "title": "DataProtection"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/dataProtection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/encryptionKeySource"
          },
          {
            "oldValue": "Export policy rule",
            "value": "Set of export policy rules",
            "op": "replace",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/description"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/title"
          },
          {
            "oldValue": null,
            "value": "exportPolicy",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/title"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Restoring",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/isRestoring"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/kerberosEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/ldapEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of mount targets",
              "items": {
                "description": "Mount target properties",
                "properties": {
                  "fileSystemId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "title": "fileSystemId",
                    "type": "string"
                  },
                  "ipAddress": {
                    "description": "The mount target's IPv4 address",
                    "example": "1.2.3.4",
                    "readOnly": true,
                    "title": "ipAddress",
                    "type": "string"
                  },
                  "mountTargetId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "readOnly": true,
                    "title": "mountTargetId",
                    "type": "string"
                  },
                  "smbServerFqdn": {
                    "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                    "example": "fullyqualified.domainname.com",
                    "title": "smbServerFQDN",
                    "type": "string"
                  }
                },
                "required": [
                  "fileSystemId"
                ],
                "type": "object"
              },
              "readOnly": true,
              "title": "mountTargets",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/mountTargets"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Basic",
              "description": "Basic network, or Standard features available to the volume.",
              "enum": [
                "Basic",
                "Standard"
              ],
              "example": "Standard",
              "title": "Network features",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "NetworkFeatures",
                "values": [
                  {
                    "description": "Basic network feature.",
                    "value": "Basic"
                  },
                  {
                    "description": "Standard network feature.",
                    "value": "Standard"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/networkFeatures"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "readOnly": true,
              "title": "Network Sibling Set ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/networkSiblingSetId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
              "example": [
                "NFSv4.1"
              ],
              "items": {
                "type": "string"
              },
              "title": "protocolTypes",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/protocolTypes"
          },
          {
            "oldValue": null,
            "value": {
              "default": "unix",
              "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
              "enum": [
                "ntfs",
                "unix"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SecurityStyle"
              }
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/securityStyle"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/smbContinuouslyAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/smbEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/snapshotDirectoryVisible"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Snapshot.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Snapshot ID",
              "type": "string",
              "x-nullable": true
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/snapshotId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provides storage to network proximity information for the volume.",
              "enum": [
                "Default",
                "T1",
                "T2"
              ],
              "example": 1,
              "readOnly": true,
              "title": "Storage to Network Proximity",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VolumeStorageToNetworkProximity",
                "values": [
                  {
                    "description": "Basic storage to network connectivity.",
                    "value": "Default"
                  },
                  {
                    "description": "Standard T1 storage to network connectivity.",
                    "value": "T1"
                  },
                  {
                    "description": "Standard T2 storage to network connectivity.",
                    "value": "T2"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/storageToNetworkProximity"
          },
          {
            "oldValue": null,
            "value": {
              "default": 0,
              "example": 128.22,
              "maximum": 4500,
              "minimum": 0,
              "title": "Maximum throughput in Mibps that can be achieved by this volume",
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/throughputMibps"
          },
          {
            "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
            "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
            "op": "replace",
            "from": "",
            "path": "/volume/properties/properties/properties/usageThreshold/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "What type of volume is this",
              "example": "DataProtection",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/volumeType"
          },
          {
            "oldValue": "serviceLevel",
            "value": "usageThreshold",
            "op": "replace",
            "from": "",
            "path": "/volume/properties/properties/required/1"
          },
          {
            "oldValue": null,
            "value": "subnetId",
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/required/-"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/volume/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume Backup Properties",
              "properties": {
                "backupEnabled": {
                  "description": "Backup Enabled",
                  "type": "boolean"
                },
                "backupPolicyId": {
                  "description": "Backup Policy Resource ID",
                  "type": "string"
                },
                "policyEnforced": {
                  "description": "Policy Enforced",
                  "type": "boolean"
                },
                "vaultId": {
                  "description": "Vault Resource ID",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeBackupProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume details using the backup policy",
              "properties": {
                "backupsCount": {
                  "description": "Total count of backups for volume",
                  "format": "int32",
                  "type": "integer"
                },
                "policyEnabled": {
                  "description": "Policy enabled",
                  "type": "boolean"
                },
                "volumeName": {
                  "description": "Volume name",
                  "type": "string"
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeBackups"
          },
          {
            "oldValue": null,
            "value": {
              "description": "URL to get the next set of results.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/nextLink"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Backup.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Backup ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/backupId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Unique Baremetal Tenant Identifier.",
              "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
              "readOnly": true,
              "title": "Baremetal Tenant ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/baremetalTenantId"
          },
          {
            "oldValue": null,
            "value": 80,
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/creationToken/maxLength"
          },
          {
            "oldValue": 40,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/creationToken/maximum"
          },
          {
            "oldValue": null,
            "value": 1,
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/creationToken/minLength"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/creationToken/minimum"
          },
          {
            "oldValue": null,
            "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/creationToken/pattern"
          },
          {
            "oldValue": null,
            "value": {
              "description": "DataProtection type volumes include an object containing details of the replication",
              "properties": {
                "backup": {
                  "description": "Volume Backup Properties",
                  "properties": {
                    "backupEnabled": {
                      "description": "Backup Enabled",
                      "type": "boolean"
                    },
                    "backupPolicyId": {
                      "description": "Backup Policy Resource ID",
                      "type": "string"
                    },
                    "policyEnforced": {
                      "description": "Policy Enforced",
                      "type": "boolean"
                    },
                    "vaultId": {
                      "description": "Vault Resource ID",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "replication": {
                  "description": "Replication properties",
                  "properties": {
                    "endpointType": {
                      "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                      "enum": [
                        "src",
                        "dst"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "EndpointType"
                      }
                    },
                    "remoteVolumeRegion": {
                      "description": "The remote region for the other end of the Volume Replication.",
                      "type": "string"
                    },
                    "remoteVolumeResourceId": {
                      "description": "The resource ID of the remote volume.",
                      "type": "string"
                    },
                    "replicationId": {
                      "description": "Id",
                      "type": "string"
                    },
                    "replicationSchedule": {
                      "description": "Schedule",
                      "enum": [
                        "_10minutely",
                        "hourly",
                        "daily"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReplicationSchedule"
                      }
                    }
                  },
                  "required": [
                    "replicationSchedule",
                    "remoteVolumeResourceId"
                  ],
                  "type": "object"
                },
                "snapshot": {
                  "description": "Volume Snapshot Properties",
                  "properties": {
                    "snapshotPolicyId": {
                      "description": "Snapshot Policy ResourceId",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "title": "DataProtection"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/dataProtection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/encryptionKeySource"
          },
          {
            "oldValue": "Export policy rule",
            "value": "Set of export policy rules",
            "op": "replace",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/description"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/title"
          },
          {
            "oldValue": null,
            "value": "exportPolicy",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/title"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Restoring",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/isRestoring"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/kerberosEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/ldapEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of mount targets",
              "items": {
                "description": "Mount target properties",
                "properties": {
                  "fileSystemId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "title": "fileSystemId",
                    "type": "string"
                  },
                  "ipAddress": {
                    "description": "The mount target's IPv4 address",
                    "example": "1.2.3.4",
                    "readOnly": true,
                    "title": "ipAddress",
                    "type": "string"
                  },
                  "mountTargetId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "readOnly": true,
                    "title": "mountTargetId",
                    "type": "string"
                  },
                  "smbServerFqdn": {
                    "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                    "example": "fullyqualified.domainname.com",
                    "title": "smbServerFQDN",
                    "type": "string"
                  }
                },
                "required": [
                  "fileSystemId"
                ],
                "type": "object"
              },
              "readOnly": true,
              "title": "mountTargets",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/mountTargets"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Basic",
              "description": "Basic network, or Standard features available to the volume.",
              "enum": [
                "Basic",
                "Standard"
              ],
              "example": "Standard",
              "title": "Network features",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "NetworkFeatures",
                "values": [
                  {
                    "description": "Basic network feature.",
                    "value": "Basic"
                  },
                  {
                    "description": "Standard network feature.",
                    "value": "Standard"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/networkFeatures"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "readOnly": true,
              "title": "Network Sibling Set ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/networkSiblingSetId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
              "example": [
                "NFSv4.1"
              ],
              "items": {
                "type": "string"
              },
              "title": "protocolTypes",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/protocolTypes"
          },
          {
            "oldValue": null,
            "value": {
              "default": "unix",
              "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
              "enum": [
                "ntfs",
                "unix"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SecurityStyle"
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/securityStyle"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/smbContinuouslyAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/smbEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/snapshotDirectoryVisible"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Snapshot.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Snapshot ID",
              "type": "string",
              "x-nullable": true
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/snapshotId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provides storage to network proximity information for the volume.",
              "enum": [
                "Default",
                "T1",
                "T2"
              ],
              "example": 1,
              "readOnly": true,
              "title": "Storage to Network Proximity",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VolumeStorageToNetworkProximity",
                "values": [
                  {
                    "description": "Basic storage to network connectivity.",
                    "value": "Default"
                  },
                  {
                    "description": "Standard T1 storage to network connectivity.",
                    "value": "T1"
                  },
                  {
                    "description": "Standard T2 storage to network connectivity.",
                    "value": "T2"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/storageToNetworkProximity"
          },
          {
            "oldValue": null,
            "value": {
              "default": 0,
              "example": 128.22,
              "maximum": 4500,
              "minimum": 0,
              "title": "Maximum throughput in Mibps that can be achieved by this volume",
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/throughputMibps"
          },
          {
            "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
            "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
            "op": "replace",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/usageThreshold/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "What type of volume is this",
              "example": "DataProtection",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/volumeType"
          },
          {
            "oldValue": "serviceLevel",
            "value": "usageThreshold",
            "op": "replace",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/required/1"
          },
          {
            "oldValue": null,
            "value": "subnetId",
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/required/-"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "DataProtection type volumes include an object containing details of the replication",
              "properties": {
                "backup": {
                  "description": "Volume Backup Properties",
                  "properties": {
                    "backupEnabled": {
                      "description": "Backup Enabled",
                      "type": "boolean"
                    },
                    "backupPolicyId": {
                      "description": "Backup Policy Resource ID",
                      "type": "string"
                    },
                    "policyEnforced": {
                      "description": "Policy Enforced",
                      "type": "boolean"
                    },
                    "vaultId": {
                      "description": "Vault Resource ID",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "snapshot": {
                  "description": "Volume Snapshot Properties",
                  "properties": {
                    "snapshotPolicyId": {
                      "description": "Snapshot Policy ResourceId",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "title": "DataProtection"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/dataProtection"
          },
          {
            "oldValue": "Export policy rule",
            "value": "Set of export policy rules",
            "op": "replace",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/description"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/title"
          },
          {
            "oldValue": null,
            "value": "exportPolicy",
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/title"
          },
          {
            "oldValue": null,
            "value": {
              "example": 128.22,
              "maximum": 4500,
              "minimum": 1,
              "title": "Maximum throughput in Mibps that can be achieved by this volume",
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/throughputMibps"
          },
          {
            "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
            "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
            "op": "replace",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/usageThreshold/description"
          },
          {
            "oldValue": null,
            "value": {
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/tags/additionalProperties"
          },
          {
            "oldValue": "Resource tags",
            "value": "Tags are a list of key-value pairs that describe the resource",
            "op": "replace",
            "from": "",
            "path": "/volumePatch/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "DataProtection type volumes include an object containing details of the replication",
              "properties": {
                "backup": {
                  "description": "Volume Backup Properties",
                  "properties": {
                    "backupEnabled": {
                      "description": "Backup Enabled",
                      "type": "boolean"
                    },
                    "backupPolicyId": {
                      "description": "Backup Policy Resource ID",
                      "type": "string"
                    },
                    "policyEnforced": {
                      "description": "Policy Enforced",
                      "type": "boolean"
                    },
                    "vaultId": {
                      "description": "Vault Resource ID",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "snapshot": {
                  "description": "Volume Snapshot Properties",
                  "properties": {
                    "snapshotPolicyId": {
                      "description": "Snapshot Policy ResourceId",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "title": "DataProtection"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/dataProtection"
          },
          {
            "oldValue": "Export policy rule",
            "value": "Set of export policy rules",
            "op": "replace",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/description"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/title"
          },
          {
            "oldValue": null,
            "value": "exportPolicy",
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/title"
          },
          {
            "oldValue": null,
            "value": {
              "example": 128.22,
              "maximum": 4500,
              "minimum": 1,
              "title": "Maximum throughput in Mibps that can be achieved by this volume",
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/throughputMibps"
          },
          {
            "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
            "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
            "op": "replace",
            "from": "",
            "path": "/volumePatchProperties/properties/usageThreshold/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Backup.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Backup ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/backupId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Unique Baremetal Tenant Identifier.",
              "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
              "readOnly": true,
              "title": "Baremetal Tenant ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/baremetalTenantId"
          },
          {
            "oldValue": null,
            "value": 80,
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/creationToken/maxLength"
          },
          {
            "oldValue": 40,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeProperties/properties/creationToken/maximum"
          },
          {
            "oldValue": null,
            "value": 1,
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/creationToken/minLength"
          },
          {
            "oldValue": 16,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeProperties/properties/creationToken/minimum"
          },
          {
            "oldValue": null,
            "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/creationToken/pattern"
          },
          {
            "oldValue": null,
            "value": {
              "description": "DataProtection type volumes include an object containing details of the replication",
              "properties": {
                "backup": {
                  "description": "Volume Backup Properties",
                  "properties": {
                    "backupEnabled": {
                      "description": "Backup Enabled",
                      "type": "boolean"
                    },
                    "backupPolicyId": {
                      "description": "Backup Policy Resource ID",
                      "type": "string"
                    },
                    "policyEnforced": {
                      "description": "Policy Enforced",
                      "type": "boolean"
                    },
                    "vaultId": {
                      "description": "Vault Resource ID",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "replication": {
                  "description": "Replication properties",
                  "properties": {
                    "endpointType": {
                      "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                      "enum": [
                        "src",
                        "dst"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "EndpointType"
                      }
                    },
                    "remoteVolumeRegion": {
                      "description": "The remote region for the other end of the Volume Replication.",
                      "type": "string"
                    },
                    "remoteVolumeResourceId": {
                      "description": "The resource ID of the remote volume.",
                      "type": "string"
                    },
                    "replicationId": {
                      "description": "Id",
                      "type": "string"
                    },
                    "replicationSchedule": {
                      "description": "Schedule",
                      "enum": [
                        "_10minutely",
                        "hourly",
                        "daily"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReplicationSchedule"
                      }
                    }
                  },
                  "required": [
                    "replicationSchedule",
                    "remoteVolumeResourceId"
                  ],
                  "type": "object"
                },
                "snapshot": {
                  "description": "Volume Snapshot Properties",
                  "properties": {
                    "snapshotPolicyId": {
                      "description": "Snapshot Policy ResourceId",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "title": "DataProtection"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/dataProtection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/encryptionKeySource"
          },
          {
            "oldValue": "Export policy rule",
            "value": "Set of export policy rules",
            "op": "replace",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/description"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "Has root access to volume",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
              "example": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
          },
          {
            "oldValue": "Allows NFSv3 protocol",
            "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
            "op": "replace",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
          },
          {
            "oldValue": {
              "description": "Allows NFSv4 protocol",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
          },
          {
            "oldValue": null,
            "value": "int32",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
          },
          {
            "oldValue": null,
            "value": "Export policy rule",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/title"
          },
          {
            "oldValue": null,
            "value": "exportPolicy",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/title"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Restoring",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/isRestoring"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/kerberosEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/ldapEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of mount targets",
              "items": {
                "description": "Mount target properties",
                "properties": {
                  "fileSystemId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "title": "fileSystemId",
                    "type": "string"
                  },
                  "ipAddress": {
                    "description": "The mount target's IPv4 address",
                    "example": "1.2.3.4",
                    "readOnly": true,
                    "title": "ipAddress",
                    "type": "string"
                  },
                  "mountTargetId": {
                    "description": "UUID v4 used to identify the MountTarget",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "readOnly": true,
                    "title": "mountTargetId",
                    "type": "string"
                  },
                  "smbServerFqdn": {
                    "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                    "example": "fullyqualified.domainname.com",
                    "title": "smbServerFQDN",
                    "type": "string"
                  }
                },
                "required": [
                  "fileSystemId"
                ],
                "type": "object"
              },
              "readOnly": true,
              "title": "mountTargets",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/mountTargets"
          },
          {
            "oldValue": null,
            "value": {
              "default": "Basic",
              "description": "Basic network, or Standard features available to the volume.",
              "enum": [
                "Basic",
                "Standard"
              ],
              "example": "Standard",
              "title": "Network features",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "NetworkFeatures",
                "values": [
                  {
                    "description": "Basic network feature.",
                    "value": "Basic"
                  },
                  {
                    "description": "Standard network feature.",
                    "value": "Standard"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/networkFeatures"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "readOnly": true,
              "title": "Network Sibling Set ID",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/networkSiblingSetId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
              "example": [
                "NFSv4.1"
              ],
              "items": {
                "type": "string"
              },
              "title": "protocolTypes",
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/protocolTypes"
          },
          {
            "oldValue": null,
            "value": {
              "default": "unix",
              "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
              "enum": [
                "ntfs",
                "unix"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SecurityStyle"
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/securityStyle"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/smbContinuouslyAvailable"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
              "example": false,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/smbEncryption"
          },
          {
            "oldValue": null,
            "value": {
              "default": true,
              "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/snapshotDirectoryVisible"
          },
          {
            "oldValue": null,
            "value": {
              "description": "UUID v4 or resource identifier used to identify the Snapshot.",
              "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
              "title": "Snapshot ID",
              "type": "string",
              "x-nullable": true
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/snapshotId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provides storage to network proximity information for the volume.",
              "enum": [
                "Default",
                "T1",
                "T2"
              ],
              "example": 1,
              "readOnly": true,
              "title": "Storage to Network Proximity",
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VolumeStorageToNetworkProximity",
                "values": [
                  {
                    "description": "Basic storage to network connectivity.",
                    "value": "Default"
                  },
                  {
                    "description": "Standard T1 storage to network connectivity.",
                    "value": "T1"
                  },
                  {
                    "description": "Standard T2 storage to network connectivity.",
                    "value": "T2"
                  }
                ]
              }
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/storageToNetworkProximity"
          },
          {
            "oldValue": null,
            "value": {
              "default": 0,
              "example": 128.22,
              "maximum": 4500,
              "minimum": 0,
              "title": "Maximum throughput in Mibps that can be achieved by this volume",
              "type": "number"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/throughputMibps"
          },
          {
            "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
            "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
            "op": "replace",
            "from": "",
            "path": "/volumeProperties/properties/usageThreshold/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "What type of volume is this",
              "example": "DataProtection",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/volumeType"
          },
          {
            "oldValue": "serviceLevel",
            "value": "usageThreshold",
            "op": "replace",
            "from": "",
            "path": "/volumeProperties/required/1"
          },
          {
            "oldValue": null,
            "value": "subnetId",
            "op": "add",
            "from": "",
            "path": "/volumeProperties/required/-"
          },
          {
            "oldValue": null,
            "value": {
              "description": "revert a volume to the snapshot",
              "properties": {
                "snapshotId": {
                  "description": "Resource id of the snapshot",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeRevert"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume Snapshot Properties",
              "properties": {
                "snapshotPolicyId": {
                  "description": "Snapshot Policy ResourceId",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeSnapshotProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Weekly Schedule properties, make a snapshot every week at a specific day or days",
              "properties": {
                "day": {
                  "description": "Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english",
                  "example": "Sunday,Monday",
                  "type": "string"
                },
                "hour": {
                  "description": "Indicates which hour in UTC timezone a snapshot should be taken",
                  "example": 11,
                  "format": "int32",
                  "type": "integer"
                },
                "minute": {
                  "description": "Indicates which minute snapshot should be taken",
                  "example": 30,
                  "format": "int32",
                  "type": "integer"
                },
                "snapshotsToKeep": {
                  "description": "Weekly snapshot count to keep",
                  "format": "int32",
                  "type": "integer"
                },
                "usedBytes": {
                  "description": "Resource size in bytes, current storage usage for the volume in bytes",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/weeklySchedule"
          }
        ],
        "parameters": [
          {
            "oldValue": "2017-08-15",
            "value": "2021-04-01-preview",
            "op": "replace",
            "from": "",
            "path": "/ApiVersionParameter/default"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the backup",
              "in": "path",
              "name": "backupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/BackupName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Backup policy Name which uniquely identify backup policy.",
              "in": "path",
              "name": "backupPolicyName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/BackupPolicyName"
          },
          {
            "oldValue": null,
            "value": 64,
            "op": "add",
            "from": "",
            "path": "/PoolName/maxLength"
          },
          {
            "oldValue": null,
            "value": 1,
            "op": "add",
            "from": "",
            "path": "/PoolName/minLength"
          },
          {
            "oldValue": null,
            "value": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,63}$",
            "op": "add",
            "from": "",
            "path": "/PoolName/pattern"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the snapshot policy target",
              "in": "path",
              "name": "snapshotPolicyName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SnapshotPolicyName"
          },
          {
            "oldValue": null,
            "value": 64,
            "op": "add",
            "from": "",
            "path": "/VolumeName/maxLength"
          },
          {
            "oldValue": null,
            "value": 1,
            "op": "add",
            "from": "",
            "path": "/VolumeName/minLength"
          },
          {
            "oldValue": null,
            "value": "^[a-zA-Z][a-zA-Z0-9\\-_]{0,63}$",
            "op": "add",
            "from": "",
            "path": "/VolumeName/pattern"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The location",
              "in": "path",
              "name": "location",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/location"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2017-08-15",
        "to": "2021-04-01-preview"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/authorizeReplication",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backupStatus",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}/volumes",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies",
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/regionInfo",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/reinitializeReplication",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies/{backupPolicyName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/poolChange",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/vaults",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/resyncReplication",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups",
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkQuotaAvailability",
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/revert",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups/{backupName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/replicationStatus",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/breakReplication",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/deleteReplication"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/mountTargets"
      ],
      "modified": {
        "/providers/Microsoft.NetApp/operations": {
          "operations": {
            "modified": {
              "GET": {
                "summary": {
                  "from": "",
                  "to": "Describes the Resource Provider"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "extensions": {
                          "modified": {
                            "default": [
                              {
                                "oldValue": "2017-08-15",
                                "value": "2021-04-01-preview",
                                "op": "replace",
                                "from": "",
                                "path": ""
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/api-version"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_List/responses/200/body/value/0/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_List/responses/200/body/value/0/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_List/responses/200/body/value/0/type"
                      }
                    ],
                    "x-ms-pageable": [
                      {
                        "oldValue": null,
                        "value": "nextLink",
                        "op": "replace",
                        "from": "",
                        "path": "/nextLinkName"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe all NetApp Accounts in a resource group"
                },
                "description": {
                  "from": "Lists all NetApp accounts in the resource group",
                  "to": "List and describe all NetApp accounts in the resource group."
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "URL to get the next set of results.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/nextLink"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
                                "example": "ADServerName",
                                "maxLength": 64,
                                "minLength": 1,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/adName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, AES encryption will be enabled for SMB communication.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/backupOperators"
                            },
                            {
                              "oldValue": {
                                "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/dNS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
                                "example": "101.102.103.104,101.102.103.105",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/dns"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
                                "example": "101.102.103.104",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/kdcIP"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be signed.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
                            },
                            {
                              "oldValue": null,
                              "value": "CN=Computers",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
                            },
                            {
                              "oldValue": "Plain text password of Active Directory domain administrator",
                              "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/password/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
                            },
                            {
                              "oldValue": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/securityOperators"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                                "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                                "maxLength": 10240,
                                "minLength": 1,
                                "type": "string",
                                "x-ms-secret": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Active Directory site the service will limit Domain Controller discovery to",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/site"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/smbServerName"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Created",
                                "Updating",
                                "InUse",
                                "Deleted",
                                "Error"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/enum"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ActiveDirectoryStatus",
                                "values": [
                                  {
                                    "description": "Active Directory created but not in use",
                                    "value": "Created"
                                  },
                                  {
                                    "description": "Active Directory in use by SMB Volume",
                                    "value": "InUse"
                                  },
                                  {
                                    "description": "Active Directory Deleted",
                                    "value": "Deleted"
                                  },
                                  {
                                    "description": "Error with the Active Directory",
                                    "value": "Error"
                                  },
                                  {
                                    "description": "Active Directory Updating",
                                    "value": "Updating"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Any details in regards to the Status of the Active Directory",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/statusDetails"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption settings",
                                "properties": {
                                  "keySource": {
                                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/description"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Delete/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Delete/parameters/api-version"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Delete/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Delete/parameters/subscriptionId"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Delete a NetApp account"
                },
                "description": {
                  "from": "Delete a NetApp account",
                  "to": "Delete the specified NetApp account"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "202": {
                      "description": {
                        "from": "Accepted -- Create or update request accepted; operation will complete asynchronously",
                        "to": "Accepted -- Delete request accepted; operation will complete asynchronously"
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          {
                            "activeDirectoryId": "02da3711-6c58-2d64-098a-e3af7afaf936",
                            "aesEncryption": true,
                            "dns": "10.10.10.3",
                            "domain": "10.10.10.3",
                            "ldapSigning": true,
                            "organizationalUnit": "Engineering",
                            "site": "SiteName",
                            "smbServerName": "SMBServer",
                            "status": "InUse",
                            "statusDetails": "Status Details",
                            "username": "ad_user_name"
                          }
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/properties/activeDirectories"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe a NetApp Account"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
                                "example": "ADServerName",
                                "maxLength": 64,
                                "minLength": 1,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/adName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, AES encryption will be enabled for SMB communication.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/backupOperators"
                            },
                            {
                              "oldValue": {
                                "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dNS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
                                "example": "101.102.103.104,101.102.103.105",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dns"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
                                "example": "101.102.103.104",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/kdcIP"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be signed.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
                            },
                            {
                              "oldValue": null,
                              "value": "CN=Computers",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
                            },
                            {
                              "oldValue": "Plain text password of Active Directory domain administrator",
                              "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
                            },
                            {
                              "oldValue": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/securityOperators"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                                "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                                "maxLength": 10240,
                                "minLength": 1,
                                "type": "string",
                                "x-ms-secret": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Active Directory site the service will limit Domain Controller discovery to",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/site"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/smbServerName"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Created",
                                "Updating",
                                "InUse",
                                "Deleted",
                                "Error"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/enum"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ActiveDirectoryStatus",
                                "values": [
                                  {
                                    "description": "Active Directory created but not in use",
                                    "value": "Created"
                                  },
                                  {
                                    "description": "Active Directory in use by SMB Volume",
                                    "value": "InUse"
                                  },
                                  {
                                    "description": "Active Directory Deleted",
                                    "value": "Deleted"
                                  },
                                  {
                                    "description": "Error with the Active Directory",
                                    "value": "Error"
                                  },
                                  {
                                    "description": "Active Directory Updating",
                                    "value": "Updating"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Any details in regards to the Status of the Active Directory",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/statusDetails"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption settings",
                                "properties": {
                                  "keySource": {
                                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation",
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "Tag1": "Value1"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Update/parameters/body/tags"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Update/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Update/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Update/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "id": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                            "location": "eastus",
                            "name": "account1",
                            "properties": {
                              "encryption": {
                                "keySource": "Microsoft.NetApp"
                              },
                              "provisioningState": "Patching"
                            },
                            "tags": {
                              "Tag1": "Value1"
                            },
                            "type": "Microsoft.NetApp/netAppAccounts"
                          }
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_Update/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Update a NetApp account"
                },
                "description": {
                  "from": "Patch a NetApp account",
                  "to": "Patch the specified NetApp account"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "encryption"
                                  ],
                                  "modified": {
                                    "activeDirectories": {
                                      "items": {
                                        "properties": {
                                          "added": [
                                            "ldapOverTLS",
                                            "aesEncryption",
                                            "backupOperators",
                                            "adName",
                                            "statusDetails",
                                            "ldapSigning",
                                            "serverRootCACertificate",
                                            "smbServerName",
                                            "kdcIP",
                                            "allowLocalNfsUsersWithLdap",
                                            "dns",
                                            "site",
                                            "securityOperators"
                                          ],
                                          "deleted": [
                                            "dNS",
                                            "sMBServerName"
                                          ],
                                          "modified": {
                                            "activeDirectoryId": {
                                              "extensions": {
                                                "added": [
                                                  "x-nullable"
                                                ]
                                              }
                                            },
                                            "organizationalUnit": {
                                              "default": {
                                                "from": null,
                                                "to": "CN=Computers"
                                              }
                                            },
                                            "password": {
                                              "extensions": {
                                                "added": [
                                                  "x-ms-secret"
                                                ]
                                              },
                                              "description": {
                                                "from": "Plain text password of Active Directory domain administrator",
                                                "to": "Plain text password of Active Directory domain administrator, value is masked in the response"
                                              }
                                            },
                                            "status": {
                                              "extensions": {
                                                "added": [
                                                  "x-ms-enum"
                                                ]
                                              },
                                              "enum": {
                                                "enumAdded": true,
                                                "added": [
                                                  "Created",
                                                  "Updating",
                                                  "InUse",
                                                  "Deleted",
                                                  "Error"
                                                ]
                                              },
                                              "readOnly": {
                                                "from": false,
                                                "to": true
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
                                "example": "ADServerName",
                                "maxLength": 64,
                                "minLength": 1,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/adName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, AES encryption will be enabled for SMB communication.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/backupOperators"
                            },
                            {
                              "oldValue": {
                                "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dNS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
                                "example": "101.102.103.104,101.102.103.105",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dns"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
                                "example": "101.102.103.104",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/kdcIP"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be signed.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
                            },
                            {
                              "oldValue": null,
                              "value": "CN=Computers",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
                            },
                            {
                              "oldValue": "Plain text password of Active Directory domain administrator",
                              "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
                            },
                            {
                              "oldValue": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/securityOperators"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                                "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                                "maxLength": 10240,
                                "minLength": 1,
                                "type": "string",
                                "x-ms-secret": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Active Directory site the service will limit Domain Controller discovery to",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/site"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/smbServerName"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Created",
                                "Updating",
                                "InUse",
                                "Deleted",
                                "Error"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/enum"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ActiveDirectoryStatus",
                                "values": [
                                  {
                                    "description": "Active Directory created but not in use",
                                    "value": "Created"
                                  },
                                  {
                                    "description": "Active Directory in use by SMB Volume",
                                    "value": "InUse"
                                  },
                                  {
                                    "description": "Active Directory Deleted",
                                    "value": "Deleted"
                                  },
                                  {
                                    "description": "Error with the Active Directory",
                                    "value": "Error"
                                  },
                                  {
                                    "description": "Active Directory Updating",
                                    "value": "Updating"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Any details in regards to the Status of the Active Directory",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/statusDetails"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption settings",
                                "properties": {
                                  "keySource": {
                                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      },
                      "description": {
                        "from": "OK",
                        "to": "OK - account updated"
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Error response describing why the operation failed.",
                              "value": "An error response from the service.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "example": "ErrorCode",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "An error response from the service.",
                                "properties": {
                                  "code": {
                                    "description": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "A message describing the error, intended to be suitable for display in a user interface.",
                                    "type": "string"
                                  }
                                },
                                "x-ms-external": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Detailed error message",
                                "example": "Detailed error message",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            },
                            {
                              "oldValue": [
                                "code",
                                "message"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required"
                            },
                            {
                              "oldValue": "object",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-external"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "eastus",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/body/location"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "activeDirectories": [
                            {
                              "aesEncryption": true,
                              "dns": "10.10.10.3",
                              "domain": "10.10.10.3",
                              "ldapSigning": false,
                              "organizationalUnit": "Engineering",
                              "password": "ad_password",
                              "site": "SiteName",
                              "smbServerName": "SMBServer",
                              "username": "ad_user_name"
                            }
                          ]
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/body/properties"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/201/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/201/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts",
                        "op": "add",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/201/body/type"
                      },
                      {
                        "oldValue": {},
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Create or update a NetApp account"
                },
                "description": {
                  "from": "Create or update a NetApp account",
                  "to": "Create or update the specified NetApp account within the resource group"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "required": {
                            "deleted": [
                              "properties"
                            ]
                          },
                          "properties": {
                            "added": [
                              "systemData"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "encryption"
                                  ],
                                  "modified": {
                                    "activeDirectories": {
                                      "items": {
                                        "properties": {
                                          "added": [
                                            "adName",
                                            "backupOperators",
                                            "kdcIP",
                                            "site",
                                            "statusDetails",
                                            "ldapSigning",
                                            "ldapOverTLS",
                                            "serverRootCACertificate",
                                            "securityOperators",
                                            "smbServerName",
                                            "dns",
                                            "aesEncryption",
                                            "allowLocalNfsUsersWithLdap"
                                          ],
                                          "deleted": [
                                            "sMBServerName",
                                            "dNS"
                                          ],
                                          "modified": {
                                            "activeDirectoryId": {
                                              "extensions": {
                                                "added": [
                                                  "x-nullable"
                                                ]
                                              }
                                            },
                                            "organizationalUnit": {
                                              "default": {
                                                "from": null,
                                                "to": "CN=Computers"
                                              }
                                            },
                                            "password": {
                                              "extensions": {
                                                "added": [
                                                  "x-ms-secret"
                                                ]
                                              },
                                              "description": {
                                                "from": "Plain text password of Active Directory domain administrator",
                                                "to": "Plain text password of Active Directory domain administrator, value is masked in the response"
                                              }
                                            },
                                            "status": {
                                              "extensions": {
                                                "added": [
                                                  "x-ms-enum"
                                                ]
                                              },
                                              "enum": {
                                                "enumAdded": true,
                                                "added": [
                                                  "Created",
                                                  "Updating",
                                                  "InUse",
                                                  "Deleted",
                                                  "Error"
                                                ]
                                              },
                                              "readOnly": {
                                                "from": false,
                                                "to": true
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "deleted": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
                                "example": "ADServerName",
                                "maxLength": 64,
                                "minLength": 1,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/adName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, AES encryption will be enabled for SMB communication.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/backupOperators"
                            },
                            {
                              "oldValue": {
                                "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dNS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
                                "example": "101.102.103.104,101.102.103.105",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dns"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
                                "example": "101.102.103.104",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/kdcIP"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be signed.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
                            },
                            {
                              "oldValue": null,
                              "value": "CN=Computers",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
                            },
                            {
                              "oldValue": "Plain text password of Active Directory domain administrator",
                              "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
                            },
                            {
                              "oldValue": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/securityOperators"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                                "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                                "maxLength": 10240,
                                "minLength": 1,
                                "type": "string",
                                "x-ms-secret": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Active Directory site the service will limit Domain Controller discovery to",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/site"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/smbServerName"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Created",
                                "Updating",
                                "InUse",
                                "Deleted",
                                "Error"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/enum"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ActiveDirectoryStatus",
                                "values": [
                                  {
                                    "description": "Active Directory created but not in use",
                                    "value": "Created"
                                  },
                                  {
                                    "description": "Active Directory in use by SMB Volume",
                                    "value": "InUse"
                                  },
                                  {
                                    "description": "Active Directory Deleted",
                                    "value": "Deleted"
                                  },
                                  {
                                    "description": "Error with the Active Directory",
                                    "value": "Error"
                                  },
                                  {
                                    "description": "Active Directory Updating",
                                    "value": "Updating"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Any details in regards to the Status of the Active Directory",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/statusDetails"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption settings",
                                "properties": {
                                  "keySource": {
                                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/activeDirectoryId/x-nullable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the active directory machine. This optional parameter is used only while creating kerberos volume",
                                "example": "ADServerName",
                                "maxLength": 64,
                                "minLength": 1,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/adName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, AES encryption will be enabled for SMB communication.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/aesEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": " If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/allowLocalNfsUsersWithLdap"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/backupOperators"
                            },
                            {
                              "oldValue": {
                                "description": "Comma separated list of DNS server IP addresses for the Active Directory domain",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dNS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain",
                                "example": "101.102.103.104,101.102.103.105",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/dns"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.",
                                "example": "101.102.103.104",
                                "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/kdcIP"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapOverTLS"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Specifies whether or not the LDAP traffic needs to be signed.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/ldapSigning"
                            },
                            {
                              "oldValue": null,
                              "value": "CN=Computers",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/organizationalUnit/default"
                            },
                            {
                              "oldValue": "Plain text password of Active Directory domain administrator",
                              "value": "Plain text password of Active Directory domain administrator, value is masked in the response",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/password/x-ms-secret"
                            },
                            {
                              "oldValue": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/sMBServerName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier",
                                "example": [
                                  "user1",
                                  "user2"
                                ],
                                "items": {
                                  "maxLength": 255,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/securityOperators"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                                "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                                "maxLength": 10240,
                                "minLength": 1,
                                "type": "string",
                                "x-ms-secret": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Active Directory site the service will limit Domain Controller discovery to",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/site"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/smbServerName"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Created",
                                "Updating",
                                "InUse",
                                "Deleted",
                                "Error"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/enum"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "ActiveDirectoryStatus",
                                "values": [
                                  {
                                    "description": "Active Directory created but not in use",
                                    "value": "Created"
                                  },
                                  {
                                    "description": "Active Directory in use by SMB Volume",
                                    "value": "InUse"
                                  },
                                  {
                                    "description": "Active Directory Deleted",
                                    "value": "Deleted"
                                  },
                                  {
                                    "description": "Error with the Active Directory",
                                    "value": "Error"
                                  },
                                  {
                                    "description": "Active Directory Updating",
                                    "value": "Updating"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Any details in regards to the Status of the Active Directory",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/statusDetails"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption settings",
                                "properties": {
                                  "keySource": {
                                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/api-version"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Auto",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/properties/qosType"
                      },
                      {
                        "oldValue": null,
                        "value": 281.474,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/properties/totalThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_List/responses/200/body/value/0/type"
                      }
                    ],
                    "x-ms-pageable": [
                      {
                        "oldValue": null,
                        "value": "nextLink",
                        "op": "replace",
                        "from": "",
                        "path": "/nextLinkName"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe all Capacity Pools"
                },
                "description": {
                  "from": "Lists all capacity pools in the NetApp Account",
                  "to": "List all capacity pools in the NetApp Account"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "URL to get the next set of results.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/nextLink"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Auto",
                                "description": "The qos type of the pool",
                                "enum": [
                                  "Auto",
                                  "Manual"
                                ],
                                "example": "Manual",
                                "title": "qosType",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "qosType",
                                  "values": [
                                    {
                                      "description": "qos type Auto",
                                      "value": "Auto"
                                    },
                                    {
                                      "description": "qos type Manual",
                                      "value": "Manual"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/qosType"
                            },
                            {
                              "oldValue": 4398046511104,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/size/default"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Total throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/totalThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Utilized throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/utilizedThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "size",
                                "serviceLevel"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/subscriptionId"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Delete a capacity pool"
                },
                "description": {
                  "from": "Delete a capacity pool",
                  "to": "Delete the specified capacity pool"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "202": {
                      "description": {
                        "from": "Accepted -- Create or update request accepted; operation will complete asynchronously",
                        "to": "Accepted -- Delete request accepted; operation will complete asynchronously"
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Manual",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/properties/qosType"
                      },
                      {
                        "oldValue": null,
                        "value": 281.474,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/properties/totalThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": 100.47,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/properties/utilizedThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Get/responses/200/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe a Capacity Pool"
                },
                "description": {
                  "from": "Get a capacity pool",
                  "to": "Get details of the specified capacity pool"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Auto",
                                "description": "The qos type of the pool",
                                "enum": [
                                  "Auto",
                                  "Manual"
                                ],
                                "example": "Manual",
                                "title": "qosType",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "qosType",
                                  "values": [
                                    {
                                      "description": "qos type Auto",
                                      "value": "Auto"
                                    },
                                    {
                                      "description": "qos type Manual",
                                      "value": "Manual"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/qosType"
                            },
                            {
                              "oldValue": 4398046511104,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/size/default"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Total throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/totalThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Utilized throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/utilizedThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "size",
                                "serviceLevel"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation",
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Manual",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/properties/qosType"
                      },
                      {
                        "oldValue": null,
                        "value": 281.474,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/properties/totalThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": 100.47,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/properties/utilizedThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": {},
                        "op": "add",
                        "from": "",
                        "path": "/Pools_Update/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Update a capacity pool"
                },
                "description": {
                  "from": "Patch a capacity pool",
                  "to": "Patch the specified capacity pool"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "qosType"
                                  ],
                                  "deleted": [
                                    "serviceLevel"
                                  ]
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Auto",
                                "description": "The qos type of the pool",
                                "enum": [
                                  "Auto",
                                  "Manual"
                                ],
                                "example": "Manual",
                                "title": "qosType",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "qosType",
                                  "values": [
                                    {
                                      "description": "qos type Auto",
                                      "value": "Auto"
                                    },
                                    {
                                      "description": "qos type Manual",
                                      "value": "Manual"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/qosType"
                            },
                            {
                              "oldValue": 4398046511104,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/size/default"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Total throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/totalThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Utilized throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/utilizedThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "size",
                                "serviceLevel"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "eastus",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/body/location"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "qosType": "Auto",
                          "serviceLevel": "Premium",
                          "size": 4398046511104
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/body/properties"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Auto",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/properties/qosType"
                      },
                      {
                        "oldValue": null,
                        "value": 281.474,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/properties/totalThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Auto",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/properties/qosType"
                      },
                      {
                        "oldValue": null,
                        "value": 281.474,
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/properties/totalThroughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools",
                        "op": "add",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/201/body/type"
                      },
                      {
                        "oldValue": {},
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Create or Update the specified capacity pool within the resource group"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "required": {
                                  "added": [
                                    "size",
                                    "serviceLevel"
                                  ]
                                },
                                "properties": {
                                  "added": [
                                    "qosType",
                                    "totalThroughputMibps",
                                    "utilizedThroughputMibps"
                                  ],
                                  "modified": {
                                    "size": {
                                      "default": {
                                        "from": 4398046511104,
                                        "to": null
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "deleted": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Auto",
                                "description": "The qos type of the pool",
                                "enum": [
                                  "Auto",
                                  "Manual"
                                ],
                                "example": "Manual",
                                "title": "qosType",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "qosType",
                                  "values": [
                                    {
                                      "description": "qos type Auto",
                                      "value": "Auto"
                                    },
                                    {
                                      "description": "qos type Manual",
                                      "value": "Manual"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/qosType"
                            },
                            {
                              "oldValue": 4398046511104,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/size/default"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Total throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/totalThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Utilized throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/utilizedThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "size",
                                "serviceLevel"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Auto",
                                "description": "The qos type of the pool",
                                "enum": [
                                  "Auto",
                                  "Manual"
                                ],
                                "example": "Manual",
                                "title": "qosType",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "qosType",
                                  "values": [
                                    {
                                      "description": "qos type Auto",
                                      "value": "Auto"
                                    },
                                    {
                                      "description": "qos type Manual",
                                      "value": "Manual"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/qosType"
                            },
                            {
                              "oldValue": 4398046511104,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/size/default"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Total throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/totalThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Utilized throughput of pool in Mibps",
                                "example": 164.221,
                                "readOnly": true,
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/utilizedThroughputMibps"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "size",
                                "serviceLevel"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName",
                "poolName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/subscriptionId"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_List/responses/200/body/value/0/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_List/responses/200/body/value/0/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": 128,
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_List/responses/200/body/value/0/properties/throughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_List/responses/200/body/value/0/type"
                      }
                    ],
                    "x-ms-pageable": [
                      {
                        "oldValue": null,
                        "value": "nextLink",
                        "op": "replace",
                        "from": "",
                        "path": "/nextLinkName"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe all volumes"
                },
                "description": {
                  "from": "List volumes",
                  "to": "List all volumes within the capacity pool"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "URL to get the next set of results.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/nextLink"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/backupId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/baremetalTenantId"
                            },
                            {
                              "oldValue": null,
                              "value": 80,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationToken/maxLength"
                            },
                            {
                              "oldValue": 40,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationToken/maximum"
                            },
                            {
                              "oldValue": null,
                              "value": 1,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationToken/minLength"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationToken/minimum"
                            },
                            {
                              "oldValue": null,
                              "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationToken/pattern"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "replicationSchedule",
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/dataProtection"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryptionKeySource"
                            },
                            {
                              "oldValue": "Export policy rule",
                              "value": "Set of export policy rules",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
                            },
                            {
                              "oldValue": "Allows NFSv3 protocol",
                              "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
                            },
                            {
                              "oldValue": {
                                "description": "Allows NFSv4 protocol",
                                "type": "boolean"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
                            },
                            {
                              "oldValue": null,
                              "value": "int32",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/title"
                            },
                            {
                              "oldValue": null,
                              "value": "exportPolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/title"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/isRestoring"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/kerberosEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/ldapEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/mountTargets"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkFeatures"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkSiblingSetId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/protocolTypes"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/securityStyle"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/smbContinuouslyAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/smbEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/snapshotDirectoryVisible"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/snapshotId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": 1,
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/storageToNetworkProximity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 0,
                                "example": 128.22,
                                "maximum": 4500,
                                "minimum": 0,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume",
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/throughputMibps"
                            },
                            {
                              "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                              "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/usageThreshold/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "What type of volume is this",
                                "example": "DataProtection",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/volumeType"
                            },
                            {
                              "oldValue": "serviceLevel",
                              "value": "usageThreshold",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/required/1"
                            },
                            {
                              "oldValue": null,
                              "value": "subnetId",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/required/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName",
                "poolName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/volumeName"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Delete a volume"
                },
                "description": {
                  "from": "Delete a volume",
                  "to": "Delete the specified volume"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "202": {
                      "description": {
                        "from": "Accepted -- Create or update request accepted; operation will complete asynchronously",
                        "to": "Accepted -- Delete request accepted; operation will complete asynchronously"
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Get/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Get/responses/200/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": 128,
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Get/responses/200/body/properties/throughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Get/responses/200/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe a volume"
                },
                "description": {
                  "from": "Get a volume",
                  "to": "Get the details of the specified volume"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/backupId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/baremetalTenantId"
                            },
                            {
                              "oldValue": null,
                              "value": 80,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maxLength"
                            },
                            {
                              "oldValue": 40,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maximum"
                            },
                            {
                              "oldValue": null,
                              "value": 1,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minLength"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minimum"
                            },
                            {
                              "oldValue": null,
                              "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/pattern"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "replicationSchedule",
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/dataProtection"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryptionKeySource"
                            },
                            {
                              "oldValue": "Export policy rule",
                              "value": "Set of export policy rules",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
                            },
                            {
                              "oldValue": "Allows NFSv3 protocol",
                              "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
                            },
                            {
                              "oldValue": {
                                "description": "Allows NFSv4 protocol",
                                "type": "boolean"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
                            },
                            {
                              "oldValue": null,
                              "value": "int32",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/title"
                            },
                            {
                              "oldValue": null,
                              "value": "exportPolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/title"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/isRestoring"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/kerberosEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/ldapEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkFeatures"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkSiblingSetId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/protocolTypes"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/securityStyle"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbContinuouslyAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotDirectoryVisible"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": 1,
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/storageToNetworkProximity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 0,
                                "example": 128.22,
                                "maximum": 4500,
                                "minimum": 0,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume",
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/throughputMibps"
                            },
                            {
                              "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                              "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/usageThreshold/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "What type of volume is this",
                                "example": "DataProtection",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeType"
                            },
                            {
                              "oldValue": "serviceLevel",
                              "value": "usageThreshold",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/required/1"
                            },
                            {
                              "oldValue": null,
                              "value": "subnetId",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options",
                    "x-ms-long-running-operation"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/name"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/properties/subnetId"
                      },
                      {
                        "oldValue": null,
                        "value": 128,
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/properties/throughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": {},
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_Update/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Update a volume"
                },
                "description": {
                  "from": "Patch a volume",
                  "to": "Patch the specified volume"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "throughputMibps",
                                    "dataProtection"
                                  ],
                                  "modified": {
                                    "exportPolicy": {
                                      "title": {
                                        "from": "",
                                        "to": "exportPolicy"
                                      },
                                      "description": {
                                        "from": "Export policy rule",
                                        "to": "Set of export policy rules"
                                      },
                                      "properties": {
                                        "modified": {
                                          "rules": {
                                            "title": {
                                              "from": "",
                                              "to": "Export policy rule"
                                            },
                                            "description": {
                                              "from": "",
                                              "to": "Export policy rule"
                                            },
                                            "items": {
                                              "properties": {
                                                "added": [
                                                  "kerberos5ReadWrite",
                                                  "kerberos5iReadOnly",
                                                  "kerberos5iReadWrite",
                                                  "nfsv41",
                                                  "kerberos5pReadWrite",
                                                  "kerberos5ReadOnly",
                                                  "kerberos5pReadOnly",
                                                  "hasRootAccess"
                                                ],
                                                "deleted": [
                                                  "nfsv4"
                                                ],
                                                "modified": {
                                                  "nfsv3": {
                                                    "description": {
                                                      "from": "Allows NFSv3 protocol",
                                                      "to": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes"
                                                    }
                                                  },
                                                  "ruleIndex": {
                                                    "format": {
                                                      "from": "",
                                                      "to": "int32"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "usageThreshold": {
                                      "description": {
                                        "from": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                                        "to": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes."
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/backupId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/baremetalTenantId"
                            },
                            {
                              "oldValue": null,
                              "value": 80,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maxLength"
                            },
                            {
                              "oldValue": 40,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maximum"
                            },
                            {
                              "oldValue": null,
                              "value": 1,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minLength"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minimum"
                            },
                            {
                              "oldValue": null,
                              "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/pattern"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "replicationSchedule",
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/dataProtection"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryptionKeySource"
                            },
                            {
                              "oldValue": "Export policy rule",
                              "value": "Set of export policy rules",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
                            },
                            {
                              "oldValue": "Allows NFSv3 protocol",
                              "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
                            },
                            {
                              "oldValue": {
                                "description": "Allows NFSv4 protocol",
                                "type": "boolean"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
                            },
                            {
                              "oldValue": null,
                              "value": "int32",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/title"
                            },
                            {
                              "oldValue": null,
                              "value": "exportPolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/title"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/isRestoring"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/kerberosEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/ldapEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkFeatures"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkSiblingSetId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/protocolTypes"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/securityStyle"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbContinuouslyAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotDirectoryVisible"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": 1,
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/storageToNetworkProximity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 0,
                                "example": 128.22,
                                "maximum": 4500,
                                "minimum": 0,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume",
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/throughputMibps"
                            },
                            {
                              "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                              "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/usageThreshold/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "What type of volume is this",
                                "example": "DataProtection",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeType"
                            },
                            {
                              "oldValue": "serviceLevel",
                              "value": "usageThreshold",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/required/1"
                            },
                            {
                              "oldValue": null,
                              "value": "subnetId",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Error response describing why the operation failed.",
                              "value": "An error response from the service.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "example": "ErrorCode",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "An error response from the service.",
                                "properties": {
                                  "code": {
                                    "description": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "A message describing the error, intended to be suitable for display in a user interface.",
                                    "type": "string"
                                  }
                                },
                                "x-ms-external": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Detailed error message",
                                "example": "Detailed error message",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            },
                            {
                              "oldValue": [
                                "code",
                                "message"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required"
                            },
                            {
                              "oldValue": "object",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-external"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "eastus",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/body/location"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "creationToken": "my-unique-file-path",
                          "encryptionKeySource": "Microsoft.KeyVault",
                          "serviceLevel": "Premium",
                          "subnetId": "/subscriptions/9760acf5-4638-11e7-9bdb-020073ca7778/resourceGroups/myRP/providers/Microsoft.Network/virtualNetworks/testvnet3/subnets/testsubnet3",
                          "throughputMibps": 128,
                          "usageThreshold": 107374182400
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/body/properties"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.KeyVault",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/properties/encryptionKeySource"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": 128,
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/properties/throughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.KeyVault",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/properties/encryptionKeySource"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": 128,
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/properties/throughputMibps"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                        "op": "add",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/responses/201/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Create or Update a volume"
                },
                "description": {
                  "from": "Create or update a volume",
                  "to": "Create or update the specified volume within the capacity pool"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "required": {
                                  "added": [
                                    "usageThreshold",
                                    "subnetId"
                                  ],
                                  "deleted": [
                                    "serviceLevel"
                                  ]
                                },
                                "properties": {
                                  "added": [
                                    "ldapEnabled",
                                    "protocolTypes",
                                    "baremetalTenantId",
                                    "encryptionKeySource",
                                    "mountTargets",
                                    "storageToNetworkProximity",
                                    "smbEncryption",
                                    "volumeType",
                                    "throughputMibps",
                                    "securityStyle",
                                    "dataProtection",
                                    "isRestoring",
                                    "networkSiblingSetId",
                                    "smbContinuouslyAvailable",
                                    "backupId",
                                    "kerberosEnabled",
                                    "networkFeatures",
                                    "snapshotDirectoryVisible",
                                    "snapshotId"
                                  ],
                                  "modified": {
                                    "creationToken": {
                                      "min": {
                                        "from": 16,
                                        "to": null
                                      },
                                      "max": {
                                        "from": 40,
                                        "to": null
                                      },
                                      "minLength": {
                                        "from": 0,
                                        "to": 1
                                      },
                                      "maxLength": {
                                        "from": null,
                                        "to": 80
                                      },
                                      "pattern": {
                                        "from": "",
                                        "to": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$"
                                      }
                                    },
                                    "exportPolicy": {
                                      "title": {
                                        "from": "",
                                        "to": "exportPolicy"
                                      },
                                      "description": {
                                        "from": "Export policy rule",
                                        "to": "Set of export policy rules"
                                      },
                                      "properties": {
                                        "modified": {
                                          "rules": {
                                            "title": {
                                              "from": "",
                                              "to": "Export policy rule"
                                            },
                                            "description": {
                                              "from": "",
                                              "to": "Export policy rule"
                                            },
                                            "items": {
                                              "properties": {
                                                "added": [
                                                  "kerberos5iReadOnly",
                                                  "nfsv41",
                                                  "hasRootAccess",
                                                  "kerberos5iReadWrite",
                                                  "kerberos5pReadOnly",
                                                  "kerberos5pReadWrite",
                                                  "kerberos5ReadOnly",
                                                  "kerberos5ReadWrite"
                                                ],
                                                "deleted": [
                                                  "nfsv4"
                                                ],
                                                "modified": {
                                                  "nfsv3": {
                                                    "description": {
                                                      "from": "Allows NFSv3 protocol",
                                                      "to": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes"
                                                    }
                                                  },
                                                  "ruleIndex": {
                                                    "format": {
                                                      "from": "",
                                                      "to": "int32"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "usageThreshold": {
                                      "description": {
                                        "from": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                                        "to": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes."
                                      }
                                    }
                                  }
                                }
                              },
                              "tags": {
                                "description": {
                                  "from": "Resource tags",
                                  "to": "Tags are a list of key-value pairs that describe the resource"
                                },
                                "additionalProperties": {
                                  "schemaAdded": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/backupId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/baremetalTenantId"
                            },
                            {
                              "oldValue": null,
                              "value": 80,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maxLength"
                            },
                            {
                              "oldValue": 40,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maximum"
                            },
                            {
                              "oldValue": null,
                              "value": 1,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minLength"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minimum"
                            },
                            {
                              "oldValue": null,
                              "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/pattern"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "replicationSchedule",
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/dataProtection"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryptionKeySource"
                            },
                            {
                              "oldValue": "Export policy rule",
                              "value": "Set of export policy rules",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
                            },
                            {
                              "oldValue": "Allows NFSv3 protocol",
                              "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
                            },
                            {
                              "oldValue": {
                                "description": "Allows NFSv4 protocol",
                                "type": "boolean"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
                            },
                            {
                              "oldValue": null,
                              "value": "int32",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/title"
                            },
                            {
                              "oldValue": null,
                              "value": "exportPolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/title"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/isRestoring"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/kerberosEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/ldapEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkFeatures"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkSiblingSetId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/protocolTypes"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/securityStyle"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbContinuouslyAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotDirectoryVisible"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": 1,
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/storageToNetworkProximity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 0,
                                "example": 128.22,
                                "maximum": 4500,
                                "minimum": 0,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume",
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/throughputMibps"
                            },
                            {
                              "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                              "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/usageThreshold/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "What type of volume is this",
                                "example": "DataProtection",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeType"
                            },
                            {
                              "oldValue": "serviceLevel",
                              "value": "usageThreshold",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/required/1"
                            },
                            {
                              "oldValue": null,
                              "value": "subnetId",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/backupId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/baremetalTenantId"
                            },
                            {
                              "oldValue": null,
                              "value": 80,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maxLength"
                            },
                            {
                              "oldValue": 40,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/maximum"
                            },
                            {
                              "oldValue": null,
                              "value": 1,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minLength"
                            },
                            {
                              "oldValue": 16,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/minimum"
                            },
                            {
                              "oldValue": null,
                              "value": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/creationToken/pattern"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "replicationSchedule",
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/dataProtection"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryptionKeySource"
                            },
                            {
                              "oldValue": "Export policy rule",
                              "value": "Set of export policy rules",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/description"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/hasRootAccess"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite"
                            },
                            {
                              "oldValue": "Allows NFSv3 protocol",
                              "value": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv3/description"
                            },
                            {
                              "oldValue": {
                                "description": "Allows NFSv4 protocol",
                                "type": "boolean"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv4"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/nfsv41"
                            },
                            {
                              "oldValue": null,
                              "value": "int32",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"
                            },
                            {
                              "oldValue": null,
                              "value": "Export policy rule",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/title"
                            },
                            {
                              "oldValue": null,
                              "value": "exportPolicy",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/title"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/isRestoring"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/kerberosEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/ldapEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkFeatures"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkSiblingSetId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/protocolTypes"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/securityStyle"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbContinuouslyAvailable"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbEncryption"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotDirectoryVisible"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/snapshotId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": 1,
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/storageToNetworkProximity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 0,
                                "example": 128.22,
                                "maximum": 4500,
                                "minimum": 0,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume",
                                "type": "number"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/throughputMibps"
                            },
                            {
                              "oldValue": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.",
                              "value": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/usageThreshold/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "What type of volume is this",
                                "example": "DataProtection",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeType"
                            },
                            {
                              "oldValue": "serviceLevel",
                              "value": "usageThreshold",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/required/1"
                            },
                            {
                              "oldValue": null,
                              "value": "subnetId",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/required/-"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags/additionalProperties"
                            },
                            {
                              "oldValue": "Resource tags",
                              "value": "Tags are a list of key-value pairs that describe the resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/tags/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName",
                "poolName",
                "volumeName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/name"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-15T13:23:33Z",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/properties/created"
                      },
                      {
                        "oldValue": "2017-08-15T13:23:33Z",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/properties/creationDate"
                      },
                      {
                        "oldValue": "9760acf5-4638-11e7-9bdb-020073ca3333",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/properties/fileSystemId"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_List/responses/200/body/value/0/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe all snapshots"
                },
                "description": {
                  "from": "List snapshots",
                  "to": "List all snapshots associated with the volume"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/created"
                            },
                            {
                              "oldValue": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationDate"
                            },
                            {
                              "oldValue": {
                                "description": "UUID v4 used to identify the FileSystem",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "title": "fileSystemId",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/fileSystemId"
                            },
                            {
                              "oldValue": [
                                "fileSystemId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/required"
                            },
                            {
                              "oldValue": {
                                "description": "Resource tags",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName",
                "poolName",
                "volumeName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "snapshotName",
                        "value": "snapshot1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/snapshotName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/volumeName"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Delete a snapshot"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName",
                      "snapshotName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "202": {
                      "description": {
                        "from": "Accepted -- Create or update request accepted; operation will complete asynchronously",
                        "to": "Accepted -- Delete request accepted; operation will complete asynchronously"
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "snapshotName",
                        "value": "snapshot1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/snapshotName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-15T13:23:33Z",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/properties/created"
                      },
                      {
                        "oldValue": "2017-08-15T13:23:33Z",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/properties/creationDate"
                      },
                      {
                        "oldValue": "9760acf5-4638-11e7-9bdb-020073ca3333",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/properties/fileSystemId"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Get/responses/200/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Describe a snapshot"
                },
                "description": {
                  "from": "Get a snapshot",
                  "to": "Get details of the specified snapshot"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName",
                      "snapshotName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/created"
                            },
                            {
                              "oldValue": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate"
                            },
                            {
                              "oldValue": {
                                "description": "UUID v4 used to identify the FileSystem",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "title": "fileSystemId",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/fileSystemId"
                            },
                            {
                              "oldValue": [
                                "fileSystemId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": {
                                "description": "Resource tags",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options",
                    "x-ms-long-running-operation"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/api-version"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "snapshotName",
                        "value": "snapshot1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/snapshotName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-15T13:23:33Z",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/properties/created"
                      },
                      {
                        "oldValue": "2017-08-15T13:23:33Z",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/properties/creationDate"
                      },
                      {
                        "oldValue": "9760acf5-4638-11e7-9bdb-020073ca3333",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/properties/fileSystemId"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Update/responses/200/body/type"
                      },
                      {
                        "oldValue": null,
                        "value": {},
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Update/responses/202"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Update a snapshot"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName",
                      "snapshotName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "deleted": [
                              "tags"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "202"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/created"
                            },
                            {
                              "oldValue": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate"
                            },
                            {
                              "oldValue": {
                                "description": "UUID v4 used to identify the FileSystem",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "title": "fileSystemId",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/fileSystemId"
                            },
                            {
                              "oldValue": [
                                "fileSystemId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": {
                                "description": "Resource tags",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "added": [
                    "x-ms-long-running-operation-options"
                  ],
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "accountName",
                        "value": "account1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/accountName"
                      },
                      {
                        "oldValue": "2017-08-15",
                        "value": "2021-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "eastus",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/body/location"
                      },
                      {
                        "oldValue": "poolName",
                        "value": "pool1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/poolName"
                      },
                      {
                        "oldValue": "resourceGroup",
                        "value": "myRG",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/resourceGroupName"
                      },
                      {
                        "oldValue": "snapshotName",
                        "value": "snapshot1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/snapshotName"
                      },
                      {
                        "oldValue": "subscriptionId",
                        "value": "D633CC2E-722B-4AE1-B636-BBD9E4C60ED9",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/subscriptionId"
                      },
                      {
                        "oldValue": "volumeName",
                        "value": "volume1",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/volumeName"
                      },
                      {
                        "oldValue": null,
                        "value": "/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/id"
                      },
                      {
                        "oldValue": null,
                        "value": "account1/pool1/volume1/snapshot1",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/name"
                      },
                      {
                        "oldValue": null,
                        "value": "2017-08-15T13:23:33Z",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/properties/created"
                      },
                      {
                        "oldValue": "2017-08-15T13:23:33Z",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/properties/creationDate"
                      },
                      {
                        "oldValue": "9760acf5-4638-11e7-9bdb-020073ca3333",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/properties/fileSystemId"
                      },
                      {
                        "oldValue": "Created",
                        "value": "Succeeded",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots",
                        "op": "add",
                        "from": "",
                        "path": "/Snapshots_Create/responses/201/body/type"
                      }
                    ]
                  }
                },
                "summary": {
                  "from": "",
                  "to": "Create a snapshot"
                },
                "description": {
                  "from": "Create a snapshot",
                  "to": "Create the specified snapshot within the given volume"
                },
                "parameters": {
                  "added": {
                    "path": [
                      "subscriptionId",
                      "resourceGroupName",
                      "accountName",
                      "poolName",
                      "volumeName",
                      "snapshotName"
                    ],
                    "query": [
                      "api-version"
                    ]
                  },
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "required": {
                            "deleted": [
                              "properties"
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "tags"
                            ],
                            "modified": {
                              "properties": {
                                "required": {
                                  "deleted": [
                                    "fileSystemId"
                                  ]
                                },
                                "properties": {
                                  "added": [
                                    "created"
                                  ],
                                  "deleted": [
                                    "fileSystemId",
                                    "creationDate"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/created"
                            },
                            {
                              "oldValue": {
                                "description": "The creation date of the snapshot",
                                "example": "2017-08-15 13:23:33",
                                "format": "date-time",
                                "readOnly": true,
                                "title": "name",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate"
                            },
                            {
                              "oldValue": {
                                "description": "UUID v4 used to identify the FileSystem",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "title": "fileSystemId",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/fileSystemId"
                            },
                            {
                              "oldValue": [
                                "fileSystemId"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/required"
                            },
                            {
                              "oldValue": {
                                "description": "Resource tags",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": "properties",
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/required/1"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "deleted": [
                          "schema"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "deleted": {
              "path": [
                "subscriptionId",
                "resourceGroupName",
                "accountName",
                "poolName",
                "volumeName",
                "snapshotName"
              ],
              "query": [
                "api-version"
              ]
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available Microsoft.NetApp Rest API operations')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available Microsoft.NetApp Rest API operations'))])],\n  type_params=[])",
    "Accounts_List": "FunctionDef(\n  name='Accounts_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all NetApp accounts in the resource group')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all NetApp accounts in the resource group'))])],\n  type_params=[])",
    "Accounts_Get": "FunctionDef(\n  name='Accounts_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the NetApp account'))])],\n  type_params=[])",
    "Accounts_CreateOrUpdate": "FunctionDef(\n  name='Accounts_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a NetApp account'))])],\n  type_params=[])",
    "Accounts_Delete": "FunctionDef(\n  name='Accounts_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a NetApp account'))])],\n  type_params=[])",
    "Accounts_Update": "FunctionDef(\n  name='Accounts_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a NetApp account'))])],\n  type_params=[])",
    "Pools_List": "FunctionDef(\n  name='Pools_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all capacity pools in the NetApp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all capacity pools in the NetApp Account'))])],\n  type_params=[])",
    "Pools_Get": "FunctionDef(\n  name='Pools_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a capacity pool'))])],\n  type_params=[])",
    "Pools_CreateOrUpdate": "FunctionDef(\n  name='Pools_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or Update a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update a capacity pool'))])],\n  type_params=[])",
    "Pools_Update": "FunctionDef(\n  name='Pools_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a capacity pool'))])],\n  type_params=[])",
    "Pools_Delete": "FunctionDef(\n  name='Pools_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a capacity pool'))])],\n  type_params=[])",
    "Volumes_List": "FunctionDef(\n  name='Volumes_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List volumes')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List volumes'))])],\n  type_params=[])",
    "Volumes_Get": "FunctionDef(\n  name='Volumes_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a volume'))])],\n  type_params=[])",
    "Volumes_CreateOrUpdate": "FunctionDef(\n  name='Volumes_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a volume'))])],\n  type_params=[])",
    "Volumes_Update": "FunctionDef(\n  name='Volumes_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a volume'))])],\n  type_params=[])",
    "Volumes_Delete": "FunctionDef(\n  name='Volumes_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a volume'))])],\n  type_params=[])",
    "MountTargets_List": "FunctionDef(\n  name='MountTargets_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List mount targets')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/mountTargets')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MountTargets_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List mount targets'))])],\n  type_params=[])",
    "Snapshots_List": "FunctionDef(\n  name='Snapshots_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List snapshots')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List snapshots'))])],\n  type_params=[])",
    "Snapshots_Get": "FunctionDef(\n  name='Snapshots_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a snapshot'))])],\n  type_params=[])",
    "Snapshots_Create": "FunctionDef(\n  name='Snapshots_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a snapshot'))])],\n  type_params=[])",
    "Snapshots_Update": "FunctionDef(\n  name='Snapshots_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a snapshot'))])],\n  type_params=[])",
    "Snapshots_Delete": "FunctionDef(\n  name='Snapshots_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete snapshot'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available Microsoft.NetApp Rest API operations')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describes the Resource Provider: Lists all of the available Microsoft.NetApp Rest API operations'))])],\n  type_params=[])",
    "NetAppResource_CheckNameAvailability": "FunctionDef(\n  name='NetAppResource_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a resource name is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check resource name availability: Check if a resource name is available.'))])],\n  type_params=[])",
    "NetAppResource_CheckFilePathAvailability": "FunctionDef(\n  name='NetAppResource_CheckFilePathAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a file path is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkFilePathAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckFilePathAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check file path availability: Check if a file path is available.'))])],\n  type_params=[])",
    "NetAppResource_CheckQuotaAvailability": "FunctionDef(\n  name='NetAppResource_CheckQuotaAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a quota is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkQuotaAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckQuotaAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check quota availability: Check if a quota is available.'))])],\n  type_params=[])",
    "NetAppResourceRegionInfo_Get": "FunctionDef(\n  name='NetAppResourceRegionInfo_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Provides storage to network proximity information.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/regionInfo')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResourceRegionInfo_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describes region specific information.: Provides storage to network proximity information.'))])],\n  type_params=[])",
    "Accounts_List": "FunctionDef(\n  name='Accounts_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List and describe all NetApp accounts in the resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all NetApp Accounts in a resource group: List and describe all NetApp accounts in the resource group.'))])],\n  type_params=[])",
    "Accounts_Get": "FunctionDef(\n  name='Accounts_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a NetApp Account: Get the NetApp account'))])],\n  type_params=[])",
    "Accounts_CreateOrUpdate": "FunctionDef(\n  name='Accounts_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the specified NetApp account within the resource group')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a NetApp account: Create or update the specified NetApp account within the resource group'))])],\n  type_params=[])",
    "Accounts_Delete": "FunctionDef(\n  name='Accounts_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a NetApp account: Delete the specified NetApp account'))])],\n  type_params=[])",
    "Accounts_Update": "FunctionDef(\n  name='Accounts_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a NetApp account: Patch the specified NetApp account'))])],\n  type_params=[])",
    "Pools_List": "FunctionDef(\n  name='Pools_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all capacity pools in the NetApp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all Capacity Pools: List all capacity pools in the NetApp Account'))])],\n  type_params=[])",
    "Pools_Get": "FunctionDef(\n  name='Pools_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get details of the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a Capacity Pool: Get details of the specified capacity pool'))])],\n  type_params=[])",
    "Pools_CreateOrUpdate": "FunctionDef(\n  name='Pools_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or Update a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update the specified capacity pool within the resource group: Create or Update a capacity pool'))])],\n  type_params=[])",
    "Pools_Update": "FunctionDef(\n  name='Pools_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a capacity pool: Patch the specified capacity pool'))])],\n  type_params=[])",
    "Pools_Delete": "FunctionDef(\n  name='Pools_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a capacity pool: Delete the specified capacity pool'))])],\n  type_params=[])",
    "Volumes_List": "FunctionDef(\n  name='Volumes_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all volumes within the capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all volumes: List all volumes within the capacity pool'))])],\n  type_params=[])",
    "Volumes_Get": "FunctionDef(\n  name='Volumes_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the details of the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a volume: Get the details of the specified volume'))])],\n  type_params=[])",
    "Volumes_CreateOrUpdate": "FunctionDef(\n  name='Volumes_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the specified volume within the capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update a volume: Create or update the specified volume within the capacity pool'))])],\n  type_params=[])",
    "Volumes_Update": "FunctionDef(\n  name='Volumes_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a volume: Patch the specified volume'))])],\n  type_params=[])",
    "Volumes_Delete": "FunctionDef(\n  name='Volumes_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a volume: Delete the specified volume'))])],\n  type_params=[])",
    "Volumes_Revert": "FunctionDef(\n  name='Volumes_Revert',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Revert a volume to the snapshot specified in the body')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revert')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Revert')),\n        keyword(\n          arg='description',\n          value=Constant(value='Revert a volume to one of its snapshots: Revert a volume to the snapshot specified in the body'))])],\n  type_params=[])",
    "Volumes_BreakReplication": "FunctionDef(\n  name='Volumes_BreakReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Break the replication connection on the destination volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/breakReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_BreakReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Break volume replication: Break the replication connection on the destination volume'))])],\n  type_params=[])",
    "Volumes_ReplicationStatus": "FunctionDef(\n  name='Volumes_ReplicationStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the status of the replication')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/replicationStatus')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ReplicationStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get volume replication status: Get the status of the replication'))])],\n  type_params=[])",
    "Volumes_ResyncReplication": "FunctionDef(\n  name='Volumes_ResyncReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from destination to source.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resyncReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ResyncReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Resync volume replication: Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from destination to source.'))])],\n  type_params=[])",
    "Volumes_DeleteReplication": "FunctionDef(\n  name='Volumes_DeleteReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the replication connection on the destination volume, and send release to the source replication')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deleteReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_DeleteReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete volume replication: Delete the replication connection on the destination volume, and send release to the source replication'))])],\n  type_params=[])",
    "Volumes_AuthorizeReplication": "FunctionDef(\n  name='Volumes_AuthorizeReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Authorize the replication connection on the source volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/authorizeReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_AuthorizeReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Authorize source volume replication: Authorize the replication connection on the source volume'))])],\n  type_params=[])",
    "Volumes_ReInitializeReplication": "FunctionDef(\n  name='Volumes_ReInitializeReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Re-Initializes the replication connection on the destination volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reinitializeReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ReInitializeReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='ReInitialize volume replication: Re-Initializes the replication connection on the destination volume'))])],\n  type_params=[])",
    "Volumes_PoolChange": "FunctionDef(\n  name='Volumes_PoolChange',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Moves volume to another pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/poolChange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_PoolChange')),\n        keyword(\n          arg='description',\n          value=Constant(value='Change pool for volume: Moves volume to another pool'))])],\n  type_params=[])",
    "Snapshots_List": "FunctionDef(\n  name='Snapshots_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all snapshots associated with the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all snapshots: List all snapshots associated with the volume'))])],\n  type_params=[])",
    "Snapshots_Get": "FunctionDef(\n  name='Snapshots_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get details of the specified snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a snapshot: Get details of the specified snapshot'))])],\n  type_params=[])",
    "Snapshots_Create": "FunctionDef(\n  name='Snapshots_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create the specified snapshot within the given volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a snapshot: Create the specified snapshot within the given volume'))])],\n  type_params=[])",
    "Snapshots_Update": "FunctionDef(\n  name='Snapshots_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a snapshot: Patch a snapshot'))])],\n  type_params=[])",
    "Snapshots_Delete": "FunctionDef(\n  name='Snapshots_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a snapshot: Delete snapshot'))])],\n  type_params=[])",
    "SnapshotPolicies_List": "FunctionDef(\n  name='SnapshotPolicies_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Get": "FunctionDef(\n  name='SnapshotPolicies_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a snapshot Policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a snapshot Policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Create": "FunctionDef(\n  name='SnapshotPolicies_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Update": "FunctionDef(\n  name='SnapshotPolicies_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Delete": "FunctionDef(\n  name='SnapshotPolicies_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_ListVolumes": "FunctionDef(\n  name='SnapshotPolicies_ListVolumes',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get volumes associated with snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_ListVolumes')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get volumes for snapshot policy: Get volumes associated with snapshot policy'))])],\n  type_params=[])",
    "Backups_GetStatus": "FunctionDef(\n  name='Backups_GetStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the status of the backup for a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupStatus')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_GetStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Get volume's backup status: Get the status of the backup for a volume\"))])],\n  type_params=[])",
    "AccountBackups_List": "FunctionDef(\n  name='AccountBackups_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all Backups for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List Backups for a Netapp Account: List all Backups for a Netapp Account'))])],\n  type_params=[])",
    "AccountBackups_Get": "FunctionDef(\n  name='AccountBackups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified backup for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get Backup for a Netapp Account: Gets the specified backup for a Netapp Account'))])],\n  type_params=[])",
    "AccountBackups_Delete": "FunctionDef(\n  name='AccountBackups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified Backup for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete Backup for a Netapp Account: Delete the specified Backup for a Netapp Account'))])],\n  type_params=[])",
    "Backups_List": "FunctionDef(\n  name='Backups_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all backups for a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List Backups: List all backups for a volume'))])],\n  type_params=[])",
    "Backups_Get": "FunctionDef(\n  name='Backups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified backup of the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a backup: Gets the specified backup of the volume'))])],\n  type_params=[])",
    "Backups_Create": "FunctionDef(\n  name='Backups_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a backup for the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a backup: Create a backup for the volume'))])],\n  type_params=[])",
    "Backups_Update": "FunctionDef(\n  name='Backups_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a backup for the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a backup: Patch a backup for the volume'))])],\n  type_params=[])",
    "Backups_Delete": "FunctionDef(\n  name='Backups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a backup of the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete backup: Delete a backup of the volume'))])],\n  type_params=[])",
    "BackupPolicies_List": "FunctionDef(\n  name='BackupPolicies_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List backup policies for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List backup policies: List backup policies for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Get": "FunctionDef(\n  name='BackupPolicies_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a particular backup Policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a backup Policy: Get a particular backup Policy'))])],\n  type_params=[])",
    "BackupPolicies_Create": "FunctionDef(\n  name='BackupPolicies_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a backup policy for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a backup policy: Create a backup policy for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Update": "FunctionDef(\n  name='BackupPolicies_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a backup policy for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a backup policy: Patch a backup policy for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Delete": "FunctionDef(\n  name='BackupPolicies_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete backup policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a backup policy: Delete backup policy'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List vaults for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List vaults: List vaults for a Netapp Account'))])],\n  type_params=[])"
  }
}