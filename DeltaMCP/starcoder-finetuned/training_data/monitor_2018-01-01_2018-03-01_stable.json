{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "An Azure action group.",
              "properties": {
                "automationRunbookReceivers": {
                  "description": "The list of AutomationRunbook receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure Automation Runbook notification receiver.",
                    "properties": {
                      "automationAccountId": {
                        "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                        "type": "string"
                      },
                      "isGlobalRunbook": {
                        "description": "Indicates whether this instance is global runbook.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Indicates name of the webhook.",
                        "type": "string"
                      },
                      "runbookName": {
                        "description": "The name for this runbook.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      },
                      "webhookResourceId": {
                        "description": "The resource id for webhook linked to this runbook.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "automationAccountId",
                      "runbookName",
                      "webhookResourceId",
                      "isGlobalRunbook"
                    ]
                  },
                  "type": "array"
                },
                "azureAppPushReceivers": {
                  "description": "The list of AzureAppPush receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure mobile App push notification receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address registered for the Azure mobile app.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ]
                  },
                  "type": "array"
                },
                "azureFunctionReceivers": {
                  "description": "The list of azure function receivers that are part of this action group.",
                  "items": {
                    "description": "An azure function receiver.",
                    "properties": {
                      "functionAppResourceId": {
                        "description": "The azure resource id of the function app.",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The function name in the function app.",
                        "type": "string"
                      },
                      "httpTriggerUrl": {
                        "description": "The http trigger url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "functionAppResourceId",
                      "functionName",
                      "httpTriggerUrl"
                    ]
                  },
                  "type": "array"
                },
                "emailReceivers": {
                  "description": "The list of email receivers that are part of this action group.",
                  "items": {
                    "description": "An email receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address of this receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ]
                  },
                  "type": "array"
                },
                "enabled": {
                  "default": true,
                  "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                  "type": "boolean"
                },
                "groupShortName": {
                  "description": "The short name of the action group. This will be used in SMS messages.",
                  "maxLength": 12,
                  "type": "string"
                },
                "itsmReceivers": {
                  "description": "The list of ITSM receivers that are part of this action group.",
                  "items": {
                    "description": "An Itsm receiver.",
                    "properties": {
                      "connectionId": {
                        "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                        "type": "string"
                      },
                      "ticketConfiguration": {
                        "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                        "type": "string"
                      },
                      "workspaceId": {
                        "description": "OMS LA instance identifier.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "workspaceId",
                      "connectionId",
                      "ticketConfiguration",
                      "region"
                    ]
                  },
                  "type": "array"
                },
                "logicAppReceivers": {
                  "description": "The list of logic app receivers that are part of this action group.",
                  "items": {
                    "description": "A logic app receiver.",
                    "properties": {
                      "callbackUrl": {
                        "description": "The callback url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "The azure resource id of the logic app receiver.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "resourceId",
                      "callbackUrl"
                    ]
                  },
                  "type": "array"
                },
                "smsReceivers": {
                  "description": "The list of SMS receivers that are part of this action group.",
                  "items": {
                    "description": "An SMS receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the SMS receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the SMS receiver.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ]
                  },
                  "type": "array"
                },
                "voiceReceivers": {
                  "description": "The list of voice receivers that are part of this action group.",
                  "items": {
                    "description": "A voice receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the voice receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the voice receiver.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ]
                  },
                  "type": "array"
                },
                "webhookReceivers": {
                  "description": "The list of webhook receivers that are part of this action group.",
                  "items": {
                    "description": "A webhook receiver.",
                    "properties": {
                      "name": {
                        "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "serviceUri"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "groupShortName",
                "enabled"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A list of action groups.",
              "properties": {
                "nextLink": {
                  "description": "Provides the link to retrieve the next set of elements.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of action groups.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An action group resource.",
                    "properties": {
                      "properties": {
                        "description": "An Azure action group.",
                        "properties": {
                          "automationRunbookReceivers": {
                            "description": "The list of AutomationRunbook receivers that are part of this action group.",
                            "items": {
                              "description": "The Azure Automation Runbook notification receiver.",
                              "properties": {
                                "automationAccountId": {
                                  "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                                  "type": "string"
                                },
                                "isGlobalRunbook": {
                                  "description": "Indicates whether this instance is global runbook.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Indicates name of the webhook.",
                                  "type": "string"
                                },
                                "runbookName": {
                                  "description": "The name for this runbook.",
                                  "type": "string"
                                },
                                "serviceUri": {
                                  "description": "The URI where webhooks should be sent.",
                                  "type": "string"
                                },
                                "webhookResourceId": {
                                  "description": "The resource id for webhook linked to this runbook.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "automationAccountId",
                                "runbookName",
                                "webhookResourceId",
                                "isGlobalRunbook"
                              ]
                            },
                            "type": "array"
                          },
                          "azureAppPushReceivers": {
                            "description": "The list of AzureAppPush receivers that are part of this action group.",
                            "items": {
                              "description": "The Azure mobile App push notification receiver.",
                              "properties": {
                                "emailAddress": {
                                  "description": "The email address registered for the Azure mobile app.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "emailAddress"
                              ]
                            },
                            "type": "array"
                          },
                          "azureFunctionReceivers": {
                            "description": "The list of azure function receivers that are part of this action group.",
                            "items": {
                              "description": "An azure function receiver.",
                              "properties": {
                                "functionAppResourceId": {
                                  "description": "The azure resource id of the function app.",
                                  "type": "string"
                                },
                                "functionName": {
                                  "description": "The function name in the function app.",
                                  "type": "string"
                                },
                                "httpTriggerUrl": {
                                  "description": "The http trigger url where http request sent to.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "functionAppResourceId",
                                "functionName",
                                "httpTriggerUrl"
                              ]
                            },
                            "type": "array"
                          },
                          "emailReceivers": {
                            "description": "The list of email receivers that are part of this action group.",
                            "items": {
                              "description": "An email receiver.",
                              "properties": {
                                "emailAddress": {
                                  "description": "The email address of this receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                                  "enum": [
                                    "NotSpecified",
                                    "Enabled",
                                    "Disabled"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ReceiverStatus"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "emailAddress"
                              ]
                            },
                            "type": "array"
                          },
                          "enabled": {
                            "default": true,
                            "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                            "type": "boolean"
                          },
                          "groupShortName": {
                            "description": "The short name of the action group. This will be used in SMS messages.",
                            "maxLength": 12,
                            "type": "string"
                          },
                          "itsmReceivers": {
                            "description": "The list of ITSM receivers that are part of this action group.",
                            "items": {
                              "description": "An Itsm receiver.",
                              "properties": {
                                "connectionId": {
                                  "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "region": {
                                  "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                                  "type": "string"
                                },
                                "ticketConfiguration": {
                                  "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                                  "type": "string"
                                },
                                "workspaceId": {
                                  "description": "OMS LA instance identifier.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "workspaceId",
                                "connectionId",
                                "ticketConfiguration",
                                "region"
                              ]
                            },
                            "type": "array"
                          },
                          "logicAppReceivers": {
                            "description": "The list of logic app receivers that are part of this action group.",
                            "items": {
                              "description": "A logic app receiver.",
                              "properties": {
                                "callbackUrl": {
                                  "description": "The callback url where http request sent to.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "resourceId": {
                                  "description": "The azure resource id of the logic app receiver.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "resourceId",
                                "callbackUrl"
                              ]
                            },
                            "type": "array"
                          },
                          "smsReceivers": {
                            "description": "The list of SMS receivers that are part of this action group.",
                            "items": {
                              "description": "An SMS receiver.",
                              "properties": {
                                "countryCode": {
                                  "description": "The country code of the SMS receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "phoneNumber": {
                                  "description": "The phone number of the SMS receiver.",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                                  "enum": [
                                    "NotSpecified",
                                    "Enabled",
                                    "Disabled"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ReceiverStatus"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "countryCode",
                                "phoneNumber"
                              ]
                            },
                            "type": "array"
                          },
                          "voiceReceivers": {
                            "description": "The list of voice receivers that are part of this action group.",
                            "items": {
                              "description": "A voice receiver.",
                              "properties": {
                                "countryCode": {
                                  "description": "The country code of the voice receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "phoneNumber": {
                                  "description": "The phone number of the voice receiver.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "countryCode",
                                "phoneNumber"
                              ]
                            },
                            "type": "array"
                          },
                          "webhookReceivers": {
                            "description": "The list of webhook receivers that are part of this action group.",
                            "items": {
                              "description": "A webhook receiver.",
                              "properties": {
                                "name": {
                                  "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "serviceUri": {
                                  "description": "The URI where webhooks should be sent.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "serviceUri"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "groupShortName",
                          "enabled"
                        ]
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure action group for patch operations.",
              "properties": {
                "enabled": {
                  "default": true,
                  "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.",
                  "type": "boolean"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupPatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An action group object for the body of patch operations.",
              "properties": {
                "properties": {
                  "description": "An Azure action group for patch operations.",
                  "properties": {
                    "enabled": {
                      "default": true,
                      "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.",
                      "type": "boolean"
                    }
                  }
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupPatchBody"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An action group resource.",
              "properties": {
                "properties": {
                  "description": "An Azure action group.",
                  "properties": {
                    "automationRunbookReceivers": {
                      "description": "The list of AutomationRunbook receivers that are part of this action group.",
                      "items": {
                        "description": "The Azure Automation Runbook notification receiver.",
                        "properties": {
                          "automationAccountId": {
                            "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                            "type": "string"
                          },
                          "isGlobalRunbook": {
                            "description": "Indicates whether this instance is global runbook.",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Indicates name of the webhook.",
                            "type": "string"
                          },
                          "runbookName": {
                            "description": "The name for this runbook.",
                            "type": "string"
                          },
                          "serviceUri": {
                            "description": "The URI where webhooks should be sent.",
                            "type": "string"
                          },
                          "webhookResourceId": {
                            "description": "The resource id for webhook linked to this runbook.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "automationAccountId",
                          "runbookName",
                          "webhookResourceId",
                          "isGlobalRunbook"
                        ]
                      },
                      "type": "array"
                    },
                    "azureAppPushReceivers": {
                      "description": "The list of AzureAppPush receivers that are part of this action group.",
                      "items": {
                        "description": "The Azure mobile App push notification receiver.",
                        "properties": {
                          "emailAddress": {
                            "description": "The email address registered for the Azure mobile app.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "emailAddress"
                        ]
                      },
                      "type": "array"
                    },
                    "azureFunctionReceivers": {
                      "description": "The list of azure function receivers that are part of this action group.",
                      "items": {
                        "description": "An azure function receiver.",
                        "properties": {
                          "functionAppResourceId": {
                            "description": "The azure resource id of the function app.",
                            "type": "string"
                          },
                          "functionName": {
                            "description": "The function name in the function app.",
                            "type": "string"
                          },
                          "httpTriggerUrl": {
                            "description": "The http trigger url where http request sent to.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "functionAppResourceId",
                          "functionName",
                          "httpTriggerUrl"
                        ]
                      },
                      "type": "array"
                    },
                    "emailReceivers": {
                      "description": "The list of email receivers that are part of this action group.",
                      "items": {
                        "description": "An email receiver.",
                        "properties": {
                          "emailAddress": {
                            "description": "The email address of this receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ReceiverStatus"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "emailAddress"
                        ]
                      },
                      "type": "array"
                    },
                    "enabled": {
                      "default": true,
                      "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                      "type": "boolean"
                    },
                    "groupShortName": {
                      "description": "The short name of the action group. This will be used in SMS messages.",
                      "maxLength": 12,
                      "type": "string"
                    },
                    "itsmReceivers": {
                      "description": "The list of ITSM receivers that are part of this action group.",
                      "items": {
                        "description": "An Itsm receiver.",
                        "properties": {
                          "connectionId": {
                            "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "region": {
                            "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                            "type": "string"
                          },
                          "ticketConfiguration": {
                            "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                            "type": "string"
                          },
                          "workspaceId": {
                            "description": "OMS LA instance identifier.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "workspaceId",
                          "connectionId",
                          "ticketConfiguration",
                          "region"
                        ]
                      },
                      "type": "array"
                    },
                    "logicAppReceivers": {
                      "description": "The list of logic app receivers that are part of this action group.",
                      "items": {
                        "description": "A logic app receiver.",
                        "properties": {
                          "callbackUrl": {
                            "description": "The callback url where http request sent to.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "resourceId": {
                            "description": "The azure resource id of the logic app receiver.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "resourceId",
                          "callbackUrl"
                        ]
                      },
                      "type": "array"
                    },
                    "smsReceivers": {
                      "description": "The list of SMS receivers that are part of this action group.",
                      "items": {
                        "description": "An SMS receiver.",
                        "properties": {
                          "countryCode": {
                            "description": "The country code of the SMS receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "phoneNumber": {
                            "description": "The phone number of the SMS receiver.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ReceiverStatus"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "countryCode",
                          "phoneNumber"
                        ]
                      },
                      "type": "array"
                    },
                    "voiceReceivers": {
                      "description": "The list of voice receivers that are part of this action group.",
                      "items": {
                        "description": "A voice receiver.",
                        "properties": {
                          "countryCode": {
                            "description": "The country code of the voice receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "phoneNumber": {
                            "description": "The phone number of the voice receiver.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "countryCode",
                          "phoneNumber"
                        ]
                      },
                      "type": "array"
                    },
                    "webhookReceivers": {
                      "description": "The list of webhook receivers that are part of this action group.",
                      "items": {
                        "description": "A webhook receiver.",
                        "properties": {
                          "name": {
                            "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "serviceUri": {
                            "description": "The URI where webhooks should be sent.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "serviceUri"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "groupShortName",
                    "enabled"
                  ]
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Azure Automation Runbook notification receiver.",
              "properties": {
                "automationAccountId": {
                  "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                  "type": "string"
                },
                "isGlobalRunbook": {
                  "description": "Indicates whether this instance is global runbook.",
                  "type": "boolean"
                },
                "name": {
                  "description": "Indicates name of the webhook.",
                  "type": "string"
                },
                "runbookName": {
                  "description": "The name for this runbook.",
                  "type": "string"
                },
                "serviceUri": {
                  "description": "The URI where webhooks should be sent.",
                  "type": "string"
                },
                "webhookResourceId": {
                  "description": "The resource id for webhook linked to this runbook.",
                  "type": "string"
                }
              },
              "required": [
                "automationAccountId",
                "runbookName",
                "webhookResourceId",
                "isGlobalRunbook"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/AutomationRunbookReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Azure mobile App push notification receiver.",
              "properties": {
                "emailAddress": {
                  "description": "The email address registered for the Azure mobile app.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "emailAddress"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/AzureAppPushReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure function receiver.",
              "properties": {
                "functionAppResourceId": {
                  "description": "The azure resource id of the function app.",
                  "type": "string"
                },
                "functionName": {
                  "description": "The function name in the function app.",
                  "type": "string"
                },
                "httpTriggerUrl": {
                  "description": "The http trigger url where http request sent to.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "functionAppResourceId",
                "functionName",
                "httpTriggerUrl"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/AzureFunctionReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An email receiver.",
              "properties": {
                "emailAddress": {
                  "description": "The email address of this receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "status": {
                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ReceiverStatus"
                  }
                }
              },
              "required": [
                "name",
                "emailAddress"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/EmailReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Describes a receiver that should be resubscribed.",
              "properties": {
                "receiverName": {
                  "description": "The name of the receiver to resubscribe.",
                  "type": "string"
                }
              },
              "required": [
                "receiverName"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/EnableRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Itsm receiver.",
              "properties": {
                "connectionId": {
                  "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "region": {
                  "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                  "type": "string"
                },
                "ticketConfiguration": {
                  "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                  "type": "string"
                },
                "workspaceId": {
                  "description": "OMS LA instance identifier.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "workspaceId",
                "connectionId",
                "ticketConfiguration",
                "region"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/ItsmReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A logic app receiver.",
              "properties": {
                "callbackUrl": {
                  "description": "The callback url where http request sent to.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "resourceId": {
                  "description": "The azure resource id of the logic app receiver.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "resourceId",
                "callbackUrl"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/LogicAppReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
              "enum": [
                "NotSpecified",
                "Enabled",
                "Disabled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ReceiverStatus"
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReceiverStatus"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure resource object",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/Resource"
          },
          {
            "oldValue": {
              "description": "The response to a metrics query.",
              "properties": {
                "cost": {
                  "description": "The integer value representing the relative cost of the query.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "number"
                },
                "interval": {
                  "description": "The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*). \nThis may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified. This is not present if a metadata request was made.",
                  "type": "string"
                },
                "namespace": {
                  "description": "The namespace of the metrics being queried",
                  "type": "string"
                },
                "resourceregion": {
                  "description": "The region of the resource being queried for metrics.",
                  "type": "string"
                },
                "timespan": {
                  "description": "The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.",
                  "type": "string"
                },
                "value": {
                  "description": "the value of the collection.",
                  "items": {
                    "description": "The result data of a query.",
                    "properties": {
                      "displayDescription": {
                        "description": "Detailed description of this metric.",
                        "type": "string"
                      },
                      "errorCode": {
                        "description": "'Success' or the error details on query failures for this metric.",
                        "type": "string"
                      },
                      "errorMessage": {
                        "description": "Error message encountered querying this specific metric.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The metric Id.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The localizable string class.",
                        "properties": {
                          "localizedValue": {
                            "description": "The display name.",
                            "type": "string"
                          },
                          "value": {
                            "description": "The invariant value.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "value"
                        ],
                        "type": "object"
                      },
                      "timeseries": {
                        "description": "The time series returned when a data query is performed.",
                        "items": {
                          "description": "A time series result type. The discriminator value is always TimeSeries in this case.",
                          "properties": {
                            "data": {
                              "description": "An array of data points representing the metric values.  This is only returned if a result type of data is specified.",
                              "items": {
                                "description": "Represents a metric value.",
                                "properties": {
                                  "average": {
                                    "description": "The average value in the time range.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "count": {
                                    "description": "The number of samples in the time range. Can be used to determine the number of values that contributed to the average value.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "maximum": {
                                    "description": "The greatest value in the time range.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "minimum": {
                                    "description": "The least value in the time range.",
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "timeStamp": {
                                    "description": "The timestamp for the metric value in ISO 8601 format.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "total": {
                                    "description": "The sum of all of the values in the time range.",
                                    "format": "double",
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "timeStamp"
                                ],
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": [
                                "timeStamp"
                              ]
                            },
                            "metadatavalues": {
                              "description": "The metadata values returned if $filter was specified in the call.",
                              "items": {
                                "description": "Represents a metric metadata value.",
                                "properties": {
                                  "name": {
                                    "description": "The localizable string class.",
                                    "properties": {
                                      "localizedValue": {
                                        "description": "The display name.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The invariant value.",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "value"
                                    ],
                                    "type": "object"
                                  },
                                  "value": {
                                    "description": "The value of the metadata.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": [
                                "name"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array",
                        "x-ms-identifiers": []
                      },
                      "type": {
                        "description": "The resource type of the metric resource.",
                        "type": "string"
                      },
                      "unit": {
                        "description": "The unit of the metric.",
                        "enum": [
                          "Count",
                          "Bytes",
                          "Seconds",
                          "CountPerSecond",
                          "BytesPerSecond",
                          "Percent",
                          "MilliSeconds",
                          "ByteSeconds",
                          "Unspecified",
                          "Cores",
                          "MilliCores",
                          "NanoCores",
                          "BitsPerSecond"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "MetricUnit"
                        }
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "name",
                      "unit",
                      "timeseries"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "timespan",
                "value"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Response"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An SMS receiver.",
              "properties": {
                "countryCode": {
                  "description": "The country code of the SMS receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "phoneNumber": {
                  "description": "The phone number of the SMS receiver.",
                  "type": "string"
                },
                "status": {
                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ReceiverStatus"
                  }
                }
              },
              "required": [
                "name",
                "countryCode",
                "phoneNumber"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/SmsReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A voice receiver.",
              "properties": {
                "countryCode": {
                  "description": "The country code of the voice receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "phoneNumber": {
                  "description": "The phone number of the voice receiver.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "countryCode",
                "phoneNumber"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/VoiceReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A webhook receiver.",
              "properties": {
                "name": {
                  "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "serviceUri": {
                  "description": "The URI where webhooks should be sent.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "serviceUri"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/WebhookReceiver"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "The name of the action group.",
              "in": "path",
              "name": "actionGroupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupNameParameter"
          },
          {
            "oldValue": {
              "description": "The list of aggregation types (comma separated) to retrieve.",
              "in": "query",
              "name": "aggregation",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AggregationsParameter"
          },
          {
            "oldValue": {
              "description": "The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.\n*Examples: PT15M, PT1H, P1D, FULL*",
              "in": "query",
              "name": "interval",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/IntervalParameter"
          },
          {
            "oldValue": {
              "description": "The names of the metrics (comma separated) to retrieve. Limit 20 metrics. Special case: If a metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be **'Metric%2Name1'**",
              "in": "query",
              "name": "metricnames",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricNamesParameter"
          },
          {
            "oldValue": {
              "description": "Metric namespace to query metric definitions for.",
              "in": "query",
              "name": "metricnamespace",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricNamespaceParameter"
          },
          {
            "oldValue": {
              "description": "The aggregation to use for sorting results and the direction of the sort.\nOnly one order can be specified.\nExamples: sum asc.",
              "in": "query",
              "name": "orderby",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OrderByParameter"
          },
          {
            "oldValue": {
              "description": "The identifier of the resource.",
              "in": "path",
              "name": "resourceUri",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-skip-url-encoding": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceUriParameter"
          },
          {
            "oldValue": {
              "description": "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
              "enum": [
                "Data",
                "Metadata"
              ],
              "in": "query",
              "name": "resultType",
              "required": false,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ResultType"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResultTypeParameter"
          },
          {
            "oldValue": {
              "description": "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
              "in": "query",
              "name": "timespan",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TimespanParameter"
          },
          {
            "oldValue": {
              "description": "The maximum number of records to retrieve.\nValid only if $filter is specified.\nDefaults to 10.",
              "format": "int32",
              "in": "query",
              "name": "top",
              "required": false,
              "type": "integer",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TopParameter"
          }
        ]
      }
    },
    "info": {
      "extensions": {
        "added": [
          "x-ms-code-generation-settings"
        ]
      },
      "title": {
        "from": "MonitorManagementClient",
        "to": "Azure Action Groups API"
      },
      "version": {
        "from": "2018-01-01",
        "to": "2018-03-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe",
        "/subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
      ],
      "deleted": [
        "/{resourceUri}/providers/Microsoft.Insights/metrics"
      ]
    }
  },
  "tools_a": {
    "Metrics_List": "FunctionDef(\n  name='Metrics_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceUri',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='timespan',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='interval',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='metricnames',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='aggregation',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='orderby',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='resultType',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='metricnamespace',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='**Lists the metric values for a resource**. This API uses the [default ARM throttling limits](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling).')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/'),\n          FormattedValue(\n            value=Name(id='resourceUri', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/metrics')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceUri', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceUri')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='timespan', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='timespan'),\n              ctx=Store())],\n          value=Name(id='timespan', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='interval', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='interval'),\n              ctx=Store())],\n          value=Name(id='interval', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='metricnames', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='metricnames'),\n              ctx=Store())],\n          value=Name(id='metricnames', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='aggregation', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='aggregation'),\n              ctx=Store())],\n          value=Name(id='aggregation', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='top'),\n              ctx=Store())],\n          value=Name(id='top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='orderby', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='orderby'),\n              ctx=Store())],\n          value=Name(id='orderby', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resultType', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='resultType'),\n              ctx=Store())],\n          value=Name(id='resultType', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='metricnamespace', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='metricnamespace'),\n              ctx=Store())],\n          value=Name(id='metricnamespace', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Metrics_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='**Lists the metric values for a resource**. This API uses the [default ARM throttling limits](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling).'))])],\n  type_params=[])"
  },
  "tools_b": {
    "ActionGroups_CreateOrUpdate": "FunctionDef(\n  name='ActionGroups_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a new action group or update an existing one.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a new action group or update an existing one.'))])],\n  type_params=[])",
    "ActionGroups_Get": "FunctionDef(\n  name='ActionGroups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get an action group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get an action group.'))])],\n  type_params=[])",
    "ActionGroups_Delete": "FunctionDef(\n  name='ActionGroups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete an action group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete an action group.'))])],\n  type_params=[])",
    "ActionGroups_Update": "FunctionDef(\n  name='ActionGroups_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.\"))])],\n  type_params=[])",
    "ActionGroups_ListBySubscriptionId": "FunctionDef(\n  name='ActionGroups_ListBySubscriptionId',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a list of all action groups in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_ListBySubscriptionId')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a list of all action groups in a subscription.'))])],\n  type_params=[])",
    "ActionGroups_ListByResourceGroup": "FunctionDef(\n  name='ActionGroups_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a list of all action groups in a resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a list of all action groups in a resource group.'))])],\n  type_params=[])",
    "ActionGroups_EnableReceiver": "FunctionDef(\n  name='ActionGroups_EnableReceiver',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscribe')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_EnableReceiver')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.\"))])],\n  type_params=[])"
  }
}