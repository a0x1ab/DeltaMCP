{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector description.",
            "op": "replace",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/description/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/description/readOnly"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/imagePaths/readOnly"
          },
          {
            "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector name.",
            "op": "replace",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/name/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/name/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector parameters definitions.'",
              "items": {
                "description": "The detector parameter definition.",
                "properties": {
                  "description": {
                    "description": "The detector parameter description.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "The detector parameter display name.",
                    "type": "string"
                  },
                  "isMandatory": {
                    "description": "A value indicating whether this detector parameter is mandatory.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The detector parameter name.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The detector parameter type.",
                    "enum": [
                      "String",
                      "Integer",
                      "Double",
                      "Boolean",
                      "DateTime"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DetectorParameterType",
                      "values": [
                        {
                          "description": "Defines a string parameter.",
                          "value": "String"
                        },
                        {
                          "description": "Defines an integer parameter.",
                          "value": "Integer"
                        },
                        {
                          "description": "Defines a double parameter.",
                          "value": "Double"
                        },
                        {
                          "description": "Defines a boolean parameter.",
                          "value": "Boolean"
                        },
                        {
                          "description": "Defines a DateTime parameter.",
                          "value": "DateTime"
                        }
                      ]
                    }
                  }
                },
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/parameterDefinitions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector supported cadences.",
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/supportedCadences"
          },
          {
            "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector supported resource types.",
            "op": "replace",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/supportedResourceTypes/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
          },
          {
            "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
            "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
            "op": "replace",
            "from": "",
            "path": "/AlertRule/properties/properties/properties/frequency/description"
          },
          {
            "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector description.",
            "op": "replace",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/description/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/description/readOnly"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/imagePaths/readOnly"
          },
          {
            "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector name.",
            "op": "replace",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/name/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/name/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector parameters definitions.'",
              "items": {
                "description": "The detector parameter definition.",
                "properties": {
                  "description": {
                    "description": "The detector parameter description.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "The detector parameter display name.",
                    "type": "string"
                  },
                  "isMandatory": {
                    "description": "A value indicating whether this detector parameter is mandatory.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The detector parameter name.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The detector parameter type.",
                    "enum": [
                      "String",
                      "Integer",
                      "Double",
                      "Boolean",
                      "DateTime"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DetectorParameterType",
                      "values": [
                        {
                          "description": "Defines a string parameter.",
                          "value": "String"
                        },
                        {
                          "description": "Defines an integer parameter.",
                          "value": "Integer"
                        },
                        {
                          "description": "Defines a double parameter.",
                          "value": "Double"
                        },
                        {
                          "description": "Defines a boolean parameter.",
                          "value": "Boolean"
                        },
                        {
                          "description": "Defines a DateTime parameter.",
                          "value": "DateTime"
                        }
                      ]
                    }
                  }
                },
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/parameterDefinitions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector supported cadences.",
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/supportedCadences"
          },
          {
            "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector supported resource types.",
            "op": "replace",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/supportedResourceTypes/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRuleProperties/properties/detector/properties/supportedResourceTypes/readOnly"
          },
          {
            "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
            "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
            "op": "replace",
            "from": "",
            "path": "/AlertRuleProperties/properties/frequency/description"
          },
          {
            "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector description.",
            "op": "replace",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/description/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/description/readOnly"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/imagePaths/readOnly"
          },
          {
            "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector name.",
            "op": "replace",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/name/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/name/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector parameters definitions.'",
              "items": {
                "description": "The detector parameter definition.",
                "properties": {
                  "description": {
                    "description": "The detector parameter description.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "The detector parameter display name.",
                    "type": "string"
                  },
                  "isMandatory": {
                    "description": "A value indicating whether this detector parameter is mandatory.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The detector parameter name.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The detector parameter type.",
                    "enum": [
                      "String",
                      "Integer",
                      "Double",
                      "Boolean",
                      "DateTime"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DetectorParameterType",
                      "values": [
                        {
                          "description": "Defines a string parameter.",
                          "value": "String"
                        },
                        {
                          "description": "Defines an integer parameter.",
                          "value": "Integer"
                        },
                        {
                          "description": "Defines a double parameter.",
                          "value": "Double"
                        },
                        {
                          "description": "Defines a boolean parameter.",
                          "value": "Boolean"
                        },
                        {
                          "description": "Defines a DateTime parameter.",
                          "value": "DateTime"
                        }
                      ]
                    }
                  }
                },
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/parameterDefinitions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector supported cadences.",
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/supportedCadences"
          },
          {
            "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector supported resource types.",
            "op": "replace",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
          },
          {
            "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
            "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
            "op": "replace",
            "from": "",
            "path": "/AlertRulesList/properties/value/items/properties/properties/properties/frequency/description"
          },
          {
            "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector description.",
            "op": "replace",
            "from": "",
            "path": "/Detector/properties/description/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Detector/properties/description/readOnly"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Detector/properties/imagePaths/readOnly"
          },
          {
            "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector name.",
            "op": "replace",
            "from": "",
            "path": "/Detector/properties/name/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Detector/properties/name/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector parameters definitions.'",
              "items": {
                "description": "The detector parameter definition.",
                "properties": {
                  "description": {
                    "description": "The detector parameter description.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "The detector parameter display name.",
                    "type": "string"
                  },
                  "isMandatory": {
                    "description": "A value indicating whether this detector parameter is mandatory.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The detector parameter name.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The detector parameter type.",
                    "enum": [
                      "String",
                      "Integer",
                      "Double",
                      "Boolean",
                      "DateTime"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DetectorParameterType",
                      "values": [
                        {
                          "description": "Defines a string parameter.",
                          "value": "String"
                        },
                        {
                          "description": "Defines an integer parameter.",
                          "value": "Integer"
                        },
                        {
                          "description": "Defines a double parameter.",
                          "value": "Double"
                        },
                        {
                          "description": "Defines a boolean parameter.",
                          "value": "Boolean"
                        },
                        {
                          "description": "Defines a DateTime parameter.",
                          "value": "DateTime"
                        }
                      ]
                    }
                  }
                },
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Detector/properties/parameterDefinitions"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Smart Detector supported cadences.",
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Detector/properties/supportedCadences"
          },
          {
            "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
            "value": "The Smart Detector supported resource types.",
            "op": "replace",
            "from": "",
            "path": "/Detector/properties/supportedResourceTypes/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Detector/properties/supportedResourceTypes/readOnly"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The detector parameter definition.",
              "properties": {
                "description": {
                  "description": "The detector parameter description.",
                  "type": "string"
                },
                "displayName": {
                  "description": "The detector parameter display name.",
                  "type": "string"
                },
                "isMandatory": {
                  "description": "A value indicating whether this detector parameter is mandatory.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The detector parameter name.",
                  "type": "string"
                },
                "type": {
                  "description": "The detector parameter type.",
                  "enum": [
                    "String",
                    "Integer",
                    "Double",
                    "Boolean",
                    "DateTime"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "DetectorParameterType",
                    "values": [
                      {
                        "description": "Defines a string parameter.",
                        "value": "String"
                      },
                      {
                        "description": "Defines an integer parameter.",
                        "value": "Integer"
                      },
                      {
                        "description": "Defines a double parameter.",
                        "value": "Double"
                      },
                      {
                        "description": "Defines a boolean parameter.",
                        "value": "Boolean"
                      },
                      {
                        "description": "Defines a DateTime parameter.",
                        "value": "DateTime"
                      }
                    ]
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/DetectorParameterDefinition"
          },
          {
            "oldValue": "Describe the format of an Error response.",
            "value": "API error.",
            "op": "replace",
            "from": "",
            "path": "/SmartDetectorErrorResponse/description"
          },
          {
            "oldValue": {
              "description": "Error code",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SmartDetectorErrorResponse/properties/code"
          },
          {
            "oldValue": null,
            "value": {
              "description": "API error body.",
              "properties": {
                "code": {
                  "description": "Error code",
                  "type": "string"
                },
                "message": {
                  "description": "Error message indicating why the operation failed.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SmartDetectorErrorResponse/properties/error"
          },
          {
            "oldValue": {
              "description": "Error message indicating why the operation failed.",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SmartDetectorErrorResponse/properties/message"
          },
          {
            "oldValue": null,
            "value": {
              "description": "API error body.",
              "properties": {
                "code": {
                  "description": "Error code",
                  "type": "string"
                },
                "message": {
                  "description": "Error message indicating why the operation failed.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SmartDetectorErrorResponseBody"
          }
        ],
        "parameters": [
          {
            "oldValue": "The ID of the target subscription.",
            "value": "The Azure subscription Id.",
            "op": "replace",
            "from": "",
            "path": "/subscriptionId/description"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2019-06-01",
        "to": "2021-04-01"
      }
    },
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/List Smart Detector alert rules/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/List alert rules/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Delete a Smart Detector alert rule/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "Alerts on a consistent increase in memory consumption over a long period of time",
                        "op": "add",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/responses/200/body/properties/detector/description"
                      },
                      {
                        "oldValue": null,
                        "value": "Memory Leak in VM",
                        "op": "add",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/responses/200/body/properties/detector/name"
                      },
                      {
                        "oldValue": null,
                        "value": [],
                        "op": "add",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/responses/200/body/properties/detector/parameterDefinitions"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          1
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/responses/200/body/properties/detector/supportedCadences"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          "VirtualMachine"
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Get a Smart Detector alert rule/responses/200/body/properties/detector/supportedResourceTypes"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Patch alert rules/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-06-01",
                        "value": "2021-04-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Create or update a Smart Detector alert rule/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "detector": {
                                      "properties": {
                                        "added": [
                                          "supportedCadences",
                                          "parameterDefinitions"
                                        ],
                                        "modified": {
                                          "description": {
                                            "description": {
                                              "from": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                                              "to": "The Smart Detector description."
                                            },
                                            "readOnly": {
                                              "from": false,
                                              "to": true
                                            }
                                          },
                                          "imagePaths": {
                                            "readOnly": {
                                              "from": false,
                                              "to": true
                                            }
                                          },
                                          "name": {
                                            "description": {
                                              "from": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                                              "to": "The Smart Detector name."
                                            },
                                            "readOnly": {
                                              "from": false,
                                              "to": true
                                            }
                                          },
                                          "supportedResourceTypes": {
                                            "description": {
                                              "from": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                                              "to": "The Smart Detector supported resource types."
                                            },
                                            "readOnly": {
                                              "from": false,
                                              "to": true
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "frequency": {
                                      "description": {
                                        "from": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                                        "to": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "path": {
                      "subscriptionId": {
                        "description": {
                          "from": "The ID of the target subscription.",
                          "to": "The Azure subscription Id."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Smart Detector description. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector description.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/description/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/imagePaths/readOnly"
                            },
                            {
                              "oldValue": "The Smart Detector name. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector name.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/name/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector parameters definitions.'",
                                "items": {
                                  "description": "The detector parameter definition.",
                                  "properties": {
                                    "description": {
                                      "description": "The detector parameter description.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "The detector parameter display name.",
                                      "type": "string"
                                    },
                                    "isMandatory": {
                                      "description": "A value indicating whether this detector parameter is mandatory.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "The detector parameter name.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The detector parameter type.",
                                      "enum": [
                                        "String",
                                        "Integer",
                                        "Double",
                                        "Boolean",
                                        "DateTime"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "DetectorParameterType",
                                        "values": [
                                          {
                                            "description": "Defines a string parameter.",
                                            "value": "String"
                                          },
                                          {
                                            "description": "Defines an integer parameter.",
                                            "value": "Integer"
                                          },
                                          {
                                            "description": "Defines a double parameter.",
                                            "value": "Double"
                                          },
                                          {
                                            "description": "Defines a boolean parameter.",
                                            "value": "Boolean"
                                          },
                                          {
                                            "description": "Defines a DateTime parameter.",
                                            "value": "DateTime"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/parameterDefinitions"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The Smart Detector supported cadences.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedCadences"
                            },
                            {
                              "oldValue": "The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector",
                              "value": "The Smart Detector supported resource types.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/detector/properties/supportedResourceTypes/readOnly"
                            },
                            {
                              "oldValue": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.",
                              "value": "The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 1 minute, depending on the detector.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/frequency/description"
                            }
                          ]
                        }
                      }
                    },
                    "default": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Describe the format of an Error response.",
                              "value": "API error.",
                              "op": "replace",
                              "from": "",
                              "path": "/description"
                            },
                            {
                              "oldValue": {
                                "description": "Error code",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/code"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "API error body.",
                                "properties": {
                                  "code": {
                                    "description": "Error code",
                                    "type": "string"
                                  },
                                  "message": {
                                    "description": "Error message indicating why the operation failed.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/error"
                            },
                            {
                              "oldValue": {
                                "description": "Error message indicating why the operation failed.",
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/message"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {},
  "tools_b": {
    "SmartDetectorAlertRules_List": "FunctionDef(\n  name='SmartDetectorAlertRules_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='expandDetector',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all the existing Smart Detector alert rules within the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='expandDetector', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='expandDetector'),\n              ctx=Store())],\n          value=Name(id='expandDetector', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List all the existing Smart Detector alert rules within the subscription.'))])],\n  type_params=[])",
    "SmartDetectorAlertRules_ListByResourceGroup": "FunctionDef(\n  name='SmartDetectorAlertRules_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='expandDetector',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all the existing Smart Detector alert rules within the subscription and resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='expandDetector', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='expandDetector'),\n              ctx=Store())],\n          value=Name(id='expandDetector', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='List all the existing Smart Detector alert rules within the subscription and resource group.'))])],\n  type_params=[])",
    "SmartDetectorAlertRules_Get": "FunctionDef(\n  name='SmartDetectorAlertRules_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='alertRuleName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='expandDetector',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a specific Smart Detector alert rule.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules/'),\n          FormattedValue(\n            value=Name(id='alertRuleName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='alertRuleName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: alertRuleName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='expandDetector', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='expandDetector'),\n              ctx=Store())],\n          value=Name(id='expandDetector', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a specific Smart Detector alert rule.'))])],\n  type_params=[])",
    "SmartDetectorAlertRules_CreateOrUpdate": "FunctionDef(\n  name='SmartDetectorAlertRules_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='alertRuleName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a Smart Detector alert rule.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules/'),\n          FormattedValue(\n            value=Name(id='alertRuleName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='alertRuleName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: alertRuleName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a Smart Detector alert rule.'))])],\n  type_params=[])",
    "SmartDetectorAlertRules_Patch": "FunctionDef(\n  name='SmartDetectorAlertRules_Patch',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='alertRuleName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a specific Smart Detector alert rule.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules/'),\n          FormattedValue(\n            value=Name(id='alertRuleName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='alertRuleName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: alertRuleName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_Patch')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a specific Smart Detector alert rule.'))])],\n  type_params=[])",
    "SmartDetectorAlertRules_Delete": "FunctionDef(\n  name='SmartDetectorAlertRules_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='alertRuleName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Delete an existing Smart Detector alert rule.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/microsoft.alertsManagement/smartDetectorAlertRules/'),\n          FormattedValue(\n            value=Name(id='alertRuleName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='alertRuleName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: alertRuleName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SmartDetectorAlertRules_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete an existing Smart Detector alert rule.'))])],\n  type_params=[])"
  }
}