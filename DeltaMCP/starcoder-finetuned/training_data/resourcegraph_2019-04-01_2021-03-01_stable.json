{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "description": "Query result column descriptor.",
              "properties": {
                "name": {
                  "description": "Column name.",
                  "type": "string"
                },
                "type": {
                  "description": "Data type of a column in a table.",
                  "enum": [
                    "string",
                    "integer",
                    "number",
                    "boolean",
                    "object"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ColumnDataType"
                  }
                }
              },
              "required": [
                "name",
                "type"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Column"
          },
          {
            "oldValue": {
              "description": "Data type of a column in a table.",
              "enum": [
                "string",
                "integer",
                "number",
                "boolean",
                "object"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ColumnDataType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ColumnDataType"
          },
          {
            "oldValue": {
              "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
              "discriminator": "resultType",
              "properties": {
                "expression": {
                  "description": "Facet expression, same as in the corresponding facet request.",
                  "type": "string"
                },
                "resultType": {
                  "description": "Result type",
                  "type": "string"
                }
              },
              "required": [
                "expression",
                "resultType"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Facet"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                  "discriminator": "resultType",
                  "properties": {
                    "expression": {
                      "description": "Facet expression, same as in the corresponding facet request.",
                      "type": "string"
                    },
                    "resultType": {
                      "description": "Result type",
                      "type": "string"
                    }
                  },
                  "required": [
                    "expression",
                    "resultType"
                  ],
                  "type": "object"
                }
              ],
              "description": "A facet whose execution resulted in an error.",
              "properties": {
                "errors": {
                  "description": "An array containing detected facet errors with details.",
                  "items": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "properties": {
                      "code": {
                        "description": "Error code identifying the specific error.",
                        "type": "string"
                      },
                      "message": {
                        "description": "A human readable error message.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "code",
                      "message"
                    ],
                    "title": "Error details.",
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object",
              "x-ms-discriminator-value": "FacetError"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetError"
          },
          {
            "oldValue": {
              "description": "A request to compute additional statistics (facets) over the query results.",
              "properties": {
                "expression": {
                  "description": "The column or list of columns to summarize by",
                  "type": "string"
                },
                "options": {
                  "description": "The options for facet evaluation",
                  "properties": {
                    "$top": {
                      "description": "The maximum number of facet rows that should be returned.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "filter": {
                      "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                      "type": "string"
                    },
                    "sortBy": {
                      "description": "The column name or query expression to sort on. Defaults to count if not present.",
                      "type": "string"
                    },
                    "sortOrder": {
                      "default": "desc",
                      "description": "The sorting order by the selected column (count by default).",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "FacetSortOrder"
                      }
                    }
                  }
                }
              },
              "required": [
                "expression"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetRequest"
          },
          {
            "oldValue": {
              "description": "The options for facet evaluation",
              "properties": {
                "$top": {
                  "description": "The maximum number of facet rows that should be returned.",
                  "format": "int32",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "filter": {
                  "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                  "type": "string"
                },
                "sortBy": {
                  "description": "The column name or query expression to sort on. Defaults to count if not present.",
                  "type": "string"
                },
                "sortOrder": {
                  "default": "desc",
                  "description": "The sorting order by the selected column (count by default).",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "FacetSortOrder"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetRequestOptions"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                  "discriminator": "resultType",
                  "properties": {
                    "expression": {
                      "description": "Facet expression, same as in the corresponding facet request.",
                      "type": "string"
                    },
                    "resultType": {
                      "description": "Result type",
                      "type": "string"
                    }
                  },
                  "required": [
                    "expression",
                    "resultType"
                  ],
                  "type": "object"
                }
              ],
              "description": "Successfully executed facet containing additional statistics on the response of a query.",
              "properties": {
                "count": {
                  "description": "Number of records returned in the facet response.",
                  "format": "int32",
                  "type": "integer"
                },
                "data": {
                  "description": "Query output in tabular format.",
                  "properties": {
                    "columns": {
                      "description": "Query result column descriptors.",
                      "items": {
                        "description": "Query result column descriptor.",
                        "properties": {
                          "name": {
                            "description": "Column name.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Data type of a column in a table.",
                            "enum": [
                              "string",
                              "integer",
                              "number",
                              "boolean",
                              "object"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ColumnDataType"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "rows": {
                      "description": "Query result rows.",
                      "items": {
                        "description": "Query result row.",
                        "items": {
                          "description": "Cell value.",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "columns",
                    "rows"
                  ],
                  "type": "object"
                },
                "totalRecords": {
                  "description": "Number of total records in the facet results.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "totalRecords",
                "count",
                "data"
              ],
              "type": "object",
              "x-ms-discriminator-value": "FacetResult"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/FacetResult"
          },
          {
            "oldValue": {
              "description": "Resource Graph REST API operation definition.",
              "properties": {
                "display": {
                  "description": "Display metadata associated with the operation.",
                  "properties": {
                    "description": {
                      "description": "Description for the operation.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Type of operation: get, read, delete, etc.",
                      "type": "string"
                    },
                    "provider": {
                      "description": "Service provider: Microsoft Resource Graph.",
                      "type": "string"
                    },
                    "resource": {
                      "description": "Resource on which the operation is performed etc.",
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "description": "Operation name: {provider}/{resource}/{operation}",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of operations.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Operation"
          },
          {
            "oldValue": {
              "description": "Result of the request to list Resource Graph operations. It contains a list of operations and a URL link to get the next set of results.",
              "properties": {
                "nextLink": {
                  "description": "The link used to get the next page of results.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Resource Graph operations supported by the Resource Graph resource provider.",
                  "items": {
                    "description": "Resource Graph REST API operation definition.",
                    "properties": {
                      "display": {
                        "description": "Display metadata associated with the operation.",
                        "properties": {
                          "description": {
                            "description": "Description for the operation.",
                            "type": "string"
                          },
                          "operation": {
                            "description": "Type of operation: get, read, delete, etc.",
                            "type": "string"
                          },
                          "provider": {
                            "description": "Service provider: Microsoft Resource Graph.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource on which the operation is performed etc.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Operation name: {provider}/{resource}/{operation}",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The origin of operations.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationListResult"
          },
          {
            "oldValue": {
              "description": "Describes a query to be executed.",
              "properties": {
                "facets": {
                  "description": "An array of facet requests to be computed against the query result.",
                  "items": {
                    "description": "A request to compute additional statistics (facets) over the query results.",
                    "properties": {
                      "expression": {
                        "description": "The column or list of columns to summarize by",
                        "type": "string"
                      },
                      "options": {
                        "description": "The options for facet evaluation",
                        "properties": {
                          "$top": {
                            "description": "The maximum number of facet rows that should be returned.",
                            "format": "int32",
                            "maximum": 1000,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "filter": {
                            "description": "Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.",
                            "type": "string"
                          },
                          "sortBy": {
                            "description": "The column name or query expression to sort on. Defaults to count if not present.",
                            "type": "string"
                          },
                          "sortOrder": {
                            "default": "desc",
                            "description": "The sorting order by the selected column (count by default).",
                            "enum": [
                              "asc",
                              "desc"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "FacetSortOrder"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "expression"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "options": {
                  "description": "The options for query evaluation",
                  "properties": {
                    "$skip": {
                      "description": "The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.",
                      "format": "int32",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "$skipToken": {
                      "description": "Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.",
                      "type": "string"
                    },
                    "$top": {
                      "description": "The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.",
                      "format": "int32",
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                "query": {
                  "description": "The resources query.",
                  "type": "string"
                },
                "subscriptions": {
                  "description": "Azure subscriptions against which to execute the query.",
                  "items": {
                    "description": "Subscription Id.",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "subscriptions",
                "query"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryRequest"
          },
          {
            "oldValue": {
              "description": "The options for query evaluation",
              "properties": {
                "$skip": {
                  "description": "The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.",
                  "format": "int32",
                  "minimum": 0,
                  "type": "integer"
                },
                "$skipToken": {
                  "description": "Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.",
                  "type": "string"
                },
                "$top": {
                  "description": "The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.",
                  "format": "int32",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryRequestOptions"
          },
          {
            "oldValue": {
              "description": "Query result.",
              "properties": {
                "$skipToken": {
                  "description": "When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.",
                  "type": "string"
                },
                "count": {
                  "description": "Number of records returned in the current response. In the case of paging, this is the number of records in the current page.",
                  "format": "int64",
                  "type": "integer"
                },
                "data": {
                  "description": "Query output in tabular format.",
                  "properties": {
                    "columns": {
                      "description": "Query result column descriptors.",
                      "items": {
                        "description": "Query result column descriptor.",
                        "properties": {
                          "name": {
                            "description": "Column name.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Data type of a column in a table.",
                            "enum": [
                              "string",
                              "integer",
                              "number",
                              "boolean",
                              "object"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ColumnDataType"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "rows": {
                      "description": "Query result rows.",
                      "items": {
                        "description": "Query result row.",
                        "items": {
                          "description": "Cell value.",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "columns",
                    "rows"
                  ],
                  "type": "object"
                },
                "facets": {
                  "description": "Query facets.",
                  "items": {
                    "description": "A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.",
                    "discriminator": "resultType",
                    "properties": {
                      "expression": {
                        "description": "Facet expression, same as in the corresponding facet request.",
                        "type": "string"
                      },
                      "resultType": {
                        "description": "Result type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "expression",
                      "resultType"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "resultTruncated": {
                  "description": "Indicates whether the query results are truncated.",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ResultTruncated"
                  }
                },
                "totalRecords": {
                  "description": "Number of total records matching the query.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "totalRecords",
                "count",
                "resultTruncated",
                "data"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/QueryResponse"
          },
          {
            "oldValue": {
              "description": "Data on a specific change, represented by a pair of before and after resource snapshots.",
              "properties": {
                "afterSnapshot": {
                  "allOf": [
                    {
                      "description": "Data on a specific resource snapshot.",
                      "properties": {
                        "content": {
                          "description": "The resource snapshot content (in resourceChangeDetails response only).",
                          "type": "object"
                        },
                        "timestamp": {
                          "description": "The time when the snapshot was created.\nThe snapshot timestamp provides an approximation as to when a modification to a resource was detected.  There can be a difference between the actual modification time and the detection time.  This is due to differences in how operations that modify a resource are processed, versus how operation that record resource snapshots are processed.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "timestamp"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "The snapshot after the change."
                },
                "beforeSnapshot": {
                  "allOf": [
                    {
                      "description": "Data on a specific resource snapshot.",
                      "properties": {
                        "content": {
                          "description": "The resource snapshot content (in resourceChangeDetails response only).",
                          "type": "object"
                        },
                        "timestamp": {
                          "description": "The time when the snapshot was created.\nThe snapshot timestamp provides an approximation as to when a modification to a resource was detected.  There can be a difference between the actual modification time and the detection time.  This is due to differences in how operations that modify a resource are processed, versus how operation that record resource snapshots are processed.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "timestamp"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "The snapshot before the change."
                },
                "changeId": {
                  "description": "The change ID. Valid and unique within the specified resource only.",
                  "type": "string"
                }
              },
              "required": [
                "changeId",
                "beforeSnapshot",
                "afterSnapshot"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceChangeData"
          },
          {
            "oldValue": {
              "description": "The parameters for a specific change details request.",
              "properties": {
                "changeId": {
                  "description": "Specifies the change ID.",
                  "type": "string"
                },
                "resourceId": {
                  "description": "Specifies the resource for a change details request.",
                  "type": "string"
                }
              },
              "required": [
                "resourceId",
                "changeId"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceChangeDetailsRequestParameters"
          },
          {
            "oldValue": {
              "description": "A list of changes associated with a resource over a specific time interval.",
              "properties": {
                "$skipToken": {
                  "description": "Skip token that encodes the skip information while executing the current request"
                },
                "changes": {
                  "description": "The pageable value returned by the operation, i.e. a list of changes to the resource.\n\n- The list is ordered from the most recent changes to the least recent changes.\n- This list will be empty if there were no changes during the requested interval.\n- The `Before` snapshot timestamp value of the oldest change can be outside of the specified time interval.",
                  "items": {
                    "description": "Data on a specific change, represented by a pair of before and after resource snapshots.",
                    "properties": {
                      "afterSnapshot": {
                        "allOf": [
                          {
                            "description": "Data on a specific resource snapshot.",
                            "properties": {
                              "content": {
                                "description": "The resource snapshot content (in resourceChangeDetails response only).",
                                "type": "object"
                              },
                              "timestamp": {
                                "description": "The time when the snapshot was created.\nThe snapshot timestamp provides an approximation as to when a modification to a resource was detected.  There can be a difference between the actual modification time and the detection time.  This is due to differences in how operations that modify a resource are processed, versus how operation that record resource snapshots are processed.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "timestamp"
                            ],
                            "type": "object"
                          }
                        ],
                        "description": "The snapshot after the change."
                      },
                      "beforeSnapshot": {
                        "allOf": [
                          {
                            "description": "Data on a specific resource snapshot.",
                            "properties": {
                              "content": {
                                "description": "The resource snapshot content (in resourceChangeDetails response only).",
                                "type": "object"
                              },
                              "timestamp": {
                                "description": "The time when the snapshot was created.\nThe snapshot timestamp provides an approximation as to when a modification to a resource was detected.  There can be a difference between the actual modification time and the detection time.  This is due to differences in how operations that modify a resource are processed, versus how operation that record resource snapshots are processed.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "timestamp"
                            ],
                            "type": "object"
                          }
                        ],
                        "description": "The snapshot before the change."
                      },
                      "changeId": {
                        "description": "The change ID. Valid and unique within the specified resource only.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "changeId",
                      "beforeSnapshot",
                      "afterSnapshot"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceChangeList"
          },
          {
            "oldValue": {
              "description": "The parameters for a specific changes request.",
              "properties": {
                "$skipToken": {
                  "description": "Acts as the continuation token for paged responses.",
                  "type": "string"
                },
                "$top": {
                  "description": "The maximum number of changes the client can accept in a paged response.",
                  "format": "int32",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "interval": {
                  "allOf": [
                    {
                      "description": "An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. `[start, end)`.",
                      "properties": {
                        "end": {
                          "description": "A datetime indicating the exclusive/open end of the time interval, i.e. `[start, `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "start": {
                          "description": "A datetime indicating the inclusive/closed start of the time interval, i.e. `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "start",
                        "end"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Specifies the date and time interval for a changes request."
                },
                "resourceId": {
                  "description": "Specifies the resource for a changes request.",
                  "type": "string"
                }
              },
              "required": [
                "resourceId",
                "interval"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceChangesRequestParameters"
          },
          {
            "oldValue": {
              "description": "Data on a specific resource snapshot.",
              "properties": {
                "content": {
                  "description": "The resource snapshot content (in resourceChangeDetails response only).",
                  "type": "object"
                },
                "timestamp": {
                  "description": "The time when the snapshot was created.\nThe snapshot timestamp provides an approximation as to when a modification to a resource was detected.  There can be a difference between the actual modification time and the detection time.  This is due to differences in how operations that modify a resource are processed, versus how operation that record resource snapshots are processed.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "timestamp"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceSnapshotData"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "managementGroupId": {
                  "type": "string"
                },
                "options": {
                  "properties": {
                    "$skip": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "$skipToken": {
                      "type": "string"
                    },
                    "$top": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "interval": {
                      "description": "An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. `[start, end)`.",
                      "properties": {
                        "end": {
                          "description": "A datetime indicating the exclusive/open end of the time interval, i.e. `[start, `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "start": {
                          "description": "A datetime indicating the inclusive/closed start of the time interval, i.e. `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "start",
                        "end"
                      ],
                      "type": "object"
                    },
                    "resultFormat": {
                      "enum": [
                        "table",
                        "objectArray"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "query": {
                  "type": "string"
                },
                "subscriptions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": false
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ResourcesHistoryRequest"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "$skip": {
                  "format": "int32",
                  "type": "integer"
                },
                "$skipToken": {
                  "type": "string"
                },
                "$top": {
                  "format": "int32",
                  "type": "integer"
                },
                "interval": {
                  "description": "An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. `[start, end)`.",
                  "properties": {
                    "end": {
                      "description": "A datetime indicating the exclusive/open end of the time interval, i.e. `[start, `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "start": {
                      "description": "A datetime indicating the inclusive/closed start of the time interval, i.e. `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "start",
                    "end"
                  ],
                  "type": "object"
                },
                "resultFormat": {
                  "enum": [
                    "table",
                    "objectArray"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ResourcesHistoryRequestOptions"
          },
          {
            "oldValue": {
              "description": "Query result row.",
              "items": {
                "description": "Cell value.",
                "type": "object"
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Row"
          },
          {
            "oldValue": {
              "description": "Query output in tabular format.",
              "properties": {
                "columns": {
                  "description": "Query result column descriptors.",
                  "items": {
                    "description": "Query result column descriptor.",
                    "properties": {
                      "name": {
                        "description": "Column name.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Data type of a column in a table.",
                        "enum": [
                          "string",
                          "integer",
                          "number",
                          "boolean",
                          "object"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ColumnDataType"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "rows": {
                  "description": "Query result rows.",
                  "items": {
                    "description": "Query result row.",
                    "items": {
                      "description": "Cell value.",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "required": [
                "columns",
                "rows"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Table"
          }
        ],
        "parameters": [
          {
            "oldValue": "Client Api Version.",
            "value": "Api Version.",
            "op": "replace",
            "from": "",
            "path": "/ApiVersionParameter/description"
          }
        ],
        "securityDefinitions": [
          {
            "oldValue": "Azure Active Directory OAuth2 Flow.",
            "value": "Azure Active Directory OAuth2 Flow",
            "op": "replace",
            "from": "",
            "path": "/azure_auth/description"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2018-09-01-preview",
        "to": "2020-04-01-preview"
      }
    },
    "paths": {
      "added": [
        "/providers/Microsoft.ResourceGraph/resourcesHistory"
      ],
      "deleted": [
        "/providers/Microsoft.ResourceGraph/resourceChangeDetails",
        "/providers/Microsoft.ResourceGraph/resourceChanges",
        "/providers/Microsoft.ResourceGraph/resources",
        "/providers/Microsoft.ResourceGraph/operations"
      ]
    }
  },
  "tools_a": {
    "Resources": "FunctionDef(\n  name='Resources',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Queries the resources managed by Azure Resource Manager for all subscriptions specified in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Resources')),\n        keyword(\n          arg='description',\n          value=Constant(value='Queries the resources managed by Azure Resource Manager for all subscriptions specified in the request.'))])],\n  type_params=[])",
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available REST API operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available REST API operations.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Resources": "FunctionDef(\n  name='Resources',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Resources')),\n        keyword(\n          arg='description',\n          value=Constant(value='Queries the resources managed by Azure Resource Manager for scopes specified in the request.'))])],\n  type_params=[])",
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available REST API operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.ResourceGraph/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available REST API operations.'))])],\n  type_params=[])"
  }
}