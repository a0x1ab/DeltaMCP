{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "description": "The parameters to list SAS credentials of a storage account.",
              "properties": {
                "keyToSign": {
                  "description": "The key to sign the account SAS token with.",
                  "type": "string"
                },
                "signedExpiry": {
                  "description": "The time at which the shared access signature becomes invalid.",
                  "format": "date-time",
                  "type": "string",
                  "x-ms-client-name": "SharedAccessExpiryTime"
                },
                "signedIp": {
                  "description": "An IP address or a range of IP addresses from which to accept requests.",
                  "type": "string",
                  "x-ms-client-name": "IPAddressOrRange"
                },
                "signedPermission": {
                  "description": "The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).",
                  "enum": [
                    "r",
                    "d",
                    "w",
                    "l",
                    "a",
                    "c",
                    "u",
                    "p"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Permissions",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Permissions"
                  }
                },
                "signedProtocol": {
                  "description": "The protocol permitted for a request made with the account SAS.",
                  "enum": [
                    "https,http",
                    "https"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Protocols",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "HttpProtocol"
                  }
                },
                "signedResourceTypes": {
                  "description": "The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.",
                  "enum": [
                    "s",
                    "c",
                    "o"
                  ],
                  "type": "string",
                  "x-ms-client-name": "ResourceTypes",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "SignedResourceTypes"
                  }
                },
                "signedServices": {
                  "description": "The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).",
                  "enum": [
                    "b",
                    "q",
                    "t",
                    "f"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Services",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Services"
                  }
                },
                "signedStart": {
                  "description": "The time at which the SAS becomes valid.",
                  "format": "date-time",
                  "type": "string",
                  "x-ms-client-name": "SharedAccessStartTime"
                }
              },
              "required": [
                "signedServices",
                "signedResourceTypes",
                "signedPermission",
                "signedExpiry"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AccountSasParameters"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "title": "Resource",
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
                  "properties": {
                    "etag": {
                      "description": "Resource Etag.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "title": "Entity Resource",
                  "type": "object",
                  "x-ms-client-name": "AzureEntityResource"
                }
              ],
              "description": "Properties of the blob container, including Id, resource name, resource type, Etag.",
              "properties": {
                "properties": {
                  "description": "The properties of a container.",
                  "properties": {
                    "hasImmutabilityPolicy": {
                      "description": "The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "hasLegalHold": {
                      "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "immutabilityPolicy": {
                      "description": "The properties of an ImmutabilityPolicy of a blob container.",
                      "properties": {
                        "etag": {
                          "description": "ImmutabilityPolicy Etag.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "properties": {
                          "description": "The properties of an ImmutabilityPolicy of a blob container.",
                          "properties": {
                            "immutabilityPeriodSinceCreationInDays": {
                              "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                              "type": "integer"
                            },
                            "state": {
                              "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                              "enum": [
                                "Locked",
                                "Unlocked"
                              ],
                              "readOnly": true,
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ImmutabilityPolicyState"
                              }
                            }
                          },
                          "required": [
                            "immutabilityPeriodSinceCreationInDays"
                          ]
                        },
                        "updateHistory": {
                          "description": "The ImmutabilityPolicy update history of the blob container.",
                          "items": {
                            "description": "An update history of the ImmutabilityPolicy of a blob container.",
                            "properties": {
                              "immutabilityPeriodSinceCreationInDays": {
                                "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "objectIdentifier": {
                                "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "timestamp": {
                                "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "update": {
                                "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                                "enum": [
                                  "put",
                                  "lock",
                                  "extend"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ImmutabilityPolicyUpdateType"
                                }
                              },
                              "upn": {
                                "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        }
                      }
                    },
                    "lastModifiedTime": {
                      "description": "Returns the date and time the container was last modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "leaseDuration": {
                      "description": "Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.",
                      "enum": [
                        "Infinite",
                        "Fixed"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseDuration"
                      }
                    },
                    "leaseState": {
                      "description": "Lease state of the container.",
                      "enum": [
                        "Available",
                        "Leased",
                        "Expired",
                        "Breaking",
                        "Broken"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseState"
                      }
                    },
                    "leaseStatus": {
                      "description": "The lease status of the container.",
                      "enum": [
                        "Locked",
                        "Unlocked"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseStatus"
                      }
                    },
                    "legalHold": {
                      "description": "The LegalHold property of a blob container.",
                      "properties": {
                        "hasLegalHold": {
                          "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                          "readOnly": true,
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "The list of LegalHold tags of a blob container.",
                          "items": {
                            "description": "A tag of the LegalHold of a blob container.",
                            "properties": {
                              "objectIdentifier": {
                                "description": "Returns the Object ID of the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tag": {
                                "description": "The tag value.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "timestamp": {
                                "description": "Returns the date and time the tag was added.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "upn": {
                                "description": "Returns the User Principal Name of the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    },
                    "metadata": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "A name-value pair to associate with the container as metadata.",
                      "type": "object"
                    },
                    "publicAccess": {
                      "description": "Specifies whether data in the container may be accessed publicly and the level of access.",
                      "enum": [
                        "Container",
                        "Blob",
                        "None"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "PublicAccess"
                      }
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/BlobContainer"
          },
          {
            "oldValue": {
              "description": "The CheckNameAvailability operation response.",
              "properties": {
                "message": {
                  "description": "Gets an error message explaining the Reason value in more detail.",
                  "readOnly": true,
                  "type": "string"
                },
                "nameAvailable": {
                  "description": "Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "reason": {
                  "description": "Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.",
                  "enum": [
                    "AccountNameInvalid",
                    "AlreadyExists"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Reason"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CheckNameAvailabilityResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of a container.",
              "properties": {
                "hasImmutabilityPolicy": {
                  "description": "The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "hasLegalHold": {
                  "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "immutabilityPolicy": {
                  "description": "The properties of an ImmutabilityPolicy of a blob container.",
                  "properties": {
                    "etag": {
                      "description": "ImmutabilityPolicy Etag.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "properties": {
                      "description": "The properties of an ImmutabilityPolicy of a blob container.",
                      "properties": {
                        "immutabilityPeriodSinceCreationInDays": {
                          "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                          "type": "integer"
                        },
                        "state": {
                          "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                          "enum": [
                            "Locked",
                            "Unlocked"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ImmutabilityPolicyState"
                          }
                        }
                      },
                      "required": [
                        "immutabilityPeriodSinceCreationInDays"
                      ]
                    },
                    "updateHistory": {
                      "description": "The ImmutabilityPolicy update history of the blob container.",
                      "items": {
                        "description": "An update history of the ImmutabilityPolicy of a blob container.",
                        "properties": {
                          "immutabilityPeriodSinceCreationInDays": {
                            "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "objectIdentifier": {
                            "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tenantId": {
                            "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "update": {
                            "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                            "enum": [
                              "put",
                              "lock",
                              "extend"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ImmutabilityPolicyUpdateType"
                            }
                          },
                          "upn": {
                            "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  }
                },
                "lastModifiedTime": {
                  "description": "Returns the date and time the container was last modified.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "leaseDuration": {
                  "description": "Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.",
                  "enum": [
                    "Infinite",
                    "Fixed"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "LeaseDuration"
                  }
                },
                "leaseState": {
                  "description": "Lease state of the container.",
                  "enum": [
                    "Available",
                    "Leased",
                    "Expired",
                    "Breaking",
                    "Broken"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "LeaseState"
                  }
                },
                "leaseStatus": {
                  "description": "The lease status of the container.",
                  "enum": [
                    "Locked",
                    "Unlocked"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "LeaseStatus"
                  }
                },
                "legalHold": {
                  "description": "The LegalHold property of a blob container.",
                  "properties": {
                    "hasLegalHold": {
                      "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "tags": {
                      "description": "The list of LegalHold tags of a blob container.",
                      "items": {
                        "description": "A tag of the LegalHold of a blob container.",
                        "properties": {
                          "objectIdentifier": {
                            "description": "Returns the Object ID of the user who added the tag.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tag": {
                            "description": "The tag value.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tenantId": {
                            "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Returns the date and time the tag was added.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "upn": {
                            "description": "Returns the User Principal Name of the user who added the tag.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "A name-value pair to associate with the container as metadata.",
                  "type": "object"
                },
                "publicAccess": {
                  "description": "Specifies whether data in the container may be accessed publicly and the level of access.",
                  "enum": [
                    "Container",
                    "Blob",
                    "None"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "PublicAccess"
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ContainerProperties"
          },
          {
            "oldValue": {
              "description": "The custom domain assigned to this storage account. This can be set via Update.",
              "properties": {
                "name": {
                  "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                  "type": "string"
                },
                "useSubDomainName": {
                  "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CustomDomain"
          },
          {
            "oldValue": {
              "description": "Dimension of blobs, possibly be blob type or access tier.",
              "properties": {
                "displayName": {
                  "description": "Display name of dimension.",
                  "type": "string"
                },
                "name": {
                  "description": "Display name of dimension.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Dimension"
          },
          {
            "oldValue": {
              "description": "The encryption settings on the storage account.",
              "properties": {
                "keySource": {
                  "default": "Microsoft.Storage",
                  "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                  "enum": [
                    "Microsoft.Storage",
                    "Microsoft.Keyvault"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "KeySource"
                  }
                },
                "keyvaultproperties": {
                  "description": "Properties of key vault.",
                  "properties": {
                    "keyname": {
                      "description": "The name of KeyVault key.",
                      "type": "string",
                      "x-ms-client-name": "KeyName"
                    },
                    "keyvaulturi": {
                      "description": "The Uri of KeyVault.",
                      "type": "string",
                      "x-ms-client-name": "KeyVaultUri"
                    },
                    "keyversion": {
                      "description": "The version of KeyVault key.",
                      "type": "string",
                      "x-ms-client-name": "KeyVersion"
                    }
                  }
                },
                "services": {
                  "description": "A list of services that support encryption.",
                  "properties": {
                    "blob": {
                      "description": "A service that allows server-side encryption to be used.",
                      "properties": {
                        "enabled": {
                          "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                          "type": "boolean"
                        },
                        "lastEnabledTime": {
                          "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "file": {
                      "description": "A service that allows server-side encryption to be used.",
                      "properties": {
                        "enabled": {
                          "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                          "type": "boolean"
                        },
                        "lastEnabledTime": {
                          "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "queue": {
                      "description": "A service that allows server-side encryption to be used.",
                      "properties": {
                        "enabled": {
                          "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                          "type": "boolean"
                        },
                        "lastEnabledTime": {
                          "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "table": {
                      "description": "A service that allows server-side encryption to be used.",
                      "properties": {
                        "enabled": {
                          "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                          "type": "boolean"
                        },
                        "lastEnabledTime": {
                          "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "keySource"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Encryption"
          },
          {
            "oldValue": {
              "description": "A service that allows server-side encryption to be used.",
              "properties": {
                "enabled": {
                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                  "type": "boolean"
                },
                "lastEnabledTime": {
                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/EncryptionService"
          },
          {
            "oldValue": {
              "description": "A list of services that support encryption.",
              "properties": {
                "blob": {
                  "description": "A service that allows server-side encryption to be used.",
                  "properties": {
                    "enabled": {
                      "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                      "type": "boolean"
                    },
                    "lastEnabledTime": {
                      "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "file": {
                  "description": "A service that allows server-side encryption to be used.",
                  "properties": {
                    "enabled": {
                      "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                      "type": "boolean"
                    },
                    "lastEnabledTime": {
                      "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "queue": {
                  "description": "A service that allows server-side encryption to be used.",
                  "properties": {
                    "enabled": {
                      "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                      "type": "boolean"
                    },
                    "lastEnabledTime": {
                      "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "table": {
                  "description": "A service that allows server-side encryption to be used.",
                  "properties": {
                    "enabled": {
                      "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                      "type": "boolean"
                    },
                    "lastEnabledTime": {
                      "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/EncryptionServices"
          },
          {
            "oldValue": {
              "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
              "properties": {
                "blob": {
                  "description": "Gets the blob endpoint.",
                  "readOnly": true,
                  "type": "string"
                },
                "file": {
                  "description": "Gets the file endpoint.",
                  "readOnly": true,
                  "type": "string"
                },
                "queue": {
                  "description": "Gets the queue endpoint.",
                  "readOnly": true,
                  "type": "string"
                },
                "table": {
                  "description": "Gets the table endpoint.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Endpoints"
          },
          {
            "oldValue": {
              "description": "IP rule with specific IP or IP range in CIDR format.",
              "properties": {
                "action": {
                  "default": "Allow",
                  "description": "The action of IP ACL rule.",
                  "enum": [
                    "Allow"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Action"
                  }
                },
                "value": {
                  "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                  "type": "string",
                  "x-ms-client-name": "IPAddressOrRange"
                }
              },
              "required": [
                "value"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/IPRule"
          },
          {
            "oldValue": {
              "description": "Identity for the resource.",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "SystemAssigned"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "IdentityType"
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Identity"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "title": "Resource",
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
                  "properties": {
                    "etag": {
                      "description": "Resource Etag.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "title": "Entity Resource",
                  "type": "object",
                  "x-ms-client-name": "AzureEntityResource"
                }
              ],
              "description": "The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.",
              "properties": {
                "properties": {
                  "description": "The properties of an ImmutabilityPolicy of a blob container.",
                  "properties": {
                    "immutabilityPeriodSinceCreationInDays": {
                      "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                      "type": "integer"
                    },
                    "state": {
                      "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                      "enum": [
                        "Locked",
                        "Unlocked"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ImmutabilityPolicyState"
                      }
                    }
                  },
                  "required": [
                    "immutabilityPeriodSinceCreationInDays"
                  ]
                }
              },
              "required": [
                "properties"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/ImmutabilityPolicy"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an ImmutabilityPolicy of a blob container.",
              "properties": {
                "etag": {
                  "description": "ImmutabilityPolicy Etag.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of an ImmutabilityPolicy of a blob container.",
                  "properties": {
                    "immutabilityPeriodSinceCreationInDays": {
                      "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                      "type": "integer"
                    },
                    "state": {
                      "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                      "enum": [
                        "Locked",
                        "Unlocked"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ImmutabilityPolicyState"
                      }
                    }
                  },
                  "required": [
                    "immutabilityPeriodSinceCreationInDays"
                  ]
                },
                "updateHistory": {
                  "description": "The ImmutabilityPolicy update history of the blob container.",
                  "items": {
                    "description": "An update history of the ImmutabilityPolicy of a blob container.",
                    "properties": {
                      "immutabilityPeriodSinceCreationInDays": {
                        "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "objectIdentifier": {
                        "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string"
                      },
                      "update": {
                        "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                        "enum": [
                          "put",
                          "lock",
                          "extend"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ImmutabilityPolicyUpdateType"
                        }
                      },
                      "upn": {
                        "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ImmutabilityPolicyProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an ImmutabilityPolicy of a blob container.",
              "properties": {
                "immutabilityPeriodSinceCreationInDays": {
                  "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                  "type": "integer"
                },
                "state": {
                  "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                  "enum": [
                    "Locked",
                    "Unlocked"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ImmutabilityPolicyState"
                  }
                }
              },
              "required": [
                "immutabilityPeriodSinceCreationInDays"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/ImmutabilityPolicyProperty"
          },
          {
            "oldValue": {
              "description": "Properties of key vault.",
              "properties": {
                "keyname": {
                  "description": "The name of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyName"
                },
                "keyvaulturi": {
                  "description": "The Uri of KeyVault.",
                  "type": "string",
                  "x-ms-client-name": "KeyVaultUri"
                },
                "keyversion": {
                  "description": "The version of KeyVault key.",
                  "type": "string",
                  "x-ms-client-name": "KeyVersion"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/KeyVaultProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Lease Container request schema.",
              "properties": {
                "action": {
                  "description": "Specifies the lease action. Can be one of the available actions.",
                  "enum": [
                    "Acquire",
                    "Renew",
                    "Change",
                    "Release",
                    "Break"
                  ],
                  "type": "string"
                },
                "breakPeriod": {
                  "description": "Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.",
                  "type": "integer"
                },
                "leaseDuration": {
                  "description": "Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.",
                  "type": "integer"
                },
                "leaseId": {
                  "description": "Identifies the lease. Can be specified in any valid GUID string format.",
                  "type": "string"
                },
                "proposedLeaseId": {
                  "description": "Optional for acquire, required for change. Proposed lease ID, in a GUID string format.",
                  "type": "string"
                }
              },
              "required": [
                "action"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/LeaseContainerRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Lease Container response schema.",
              "properties": {
                "leaseId": {
                  "description": "Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease.",
                  "type": "string"
                },
                "leaseTimeSeconds": {
                  "description": "Approximate time remaining in the lease period, in seconds.",
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/LeaseContainerResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The LegalHold property of a blob container.",
              "properties": {
                "hasLegalHold": {
                  "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "tags": {
                  "description": "Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.",
                  "items": {
                    "maxLength": 23,
                    "minLength": 3,
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "tags"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/LegalHold"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The LegalHold property of a blob container.",
              "properties": {
                "hasLegalHold": {
                  "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "tags": {
                  "description": "The list of LegalHold tags of a blob container.",
                  "items": {
                    "description": "A tag of the LegalHold of a blob container.",
                    "properties": {
                      "objectIdentifier": {
                        "description": "Returns the Object ID of the user who added the tag.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tag": {
                        "description": "The tag value.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Returns the date and time the tag was added.",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string"
                      },
                      "upn": {
                        "description": "Returns the User Principal Name of the user who added the tag.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/LegalHoldProperties"
          },
          {
            "oldValue": {
              "description": "The List SAS credentials operation response.",
              "properties": {
                "accountSasToken": {
                  "description": "List SAS credentials of storage account.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ListAccountSasResponse"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "title": "Resource",
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
                  "properties": {
                    "etag": {
                      "description": "Resource Etag.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "title": "Entity Resource",
                  "type": "object",
                  "x-ms-client-name": "AzureEntityResource"
                }
              ],
              "description": "The blob container properties be listed out.",
              "properties": {
                "properties": {
                  "description": "The properties of a container.",
                  "properties": {
                    "hasImmutabilityPolicy": {
                      "description": "The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "hasLegalHold": {
                      "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "immutabilityPolicy": {
                      "description": "The properties of an ImmutabilityPolicy of a blob container.",
                      "properties": {
                        "etag": {
                          "description": "ImmutabilityPolicy Etag.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "properties": {
                          "description": "The properties of an ImmutabilityPolicy of a blob container.",
                          "properties": {
                            "immutabilityPeriodSinceCreationInDays": {
                              "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                              "type": "integer"
                            },
                            "state": {
                              "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                              "enum": [
                                "Locked",
                                "Unlocked"
                              ],
                              "readOnly": true,
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ImmutabilityPolicyState"
                              }
                            }
                          },
                          "required": [
                            "immutabilityPeriodSinceCreationInDays"
                          ]
                        },
                        "updateHistory": {
                          "description": "The ImmutabilityPolicy update history of the blob container.",
                          "items": {
                            "description": "An update history of the ImmutabilityPolicy of a blob container.",
                            "properties": {
                              "immutabilityPeriodSinceCreationInDays": {
                                "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "objectIdentifier": {
                                "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "timestamp": {
                                "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "update": {
                                "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                                "enum": [
                                  "put",
                                  "lock",
                                  "extend"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ImmutabilityPolicyUpdateType"
                                }
                              },
                              "upn": {
                                "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        }
                      }
                    },
                    "lastModifiedTime": {
                      "description": "Returns the date and time the container was last modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "leaseDuration": {
                      "description": "Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.",
                      "enum": [
                        "Infinite",
                        "Fixed"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseDuration"
                      }
                    },
                    "leaseState": {
                      "description": "Lease state of the container.",
                      "enum": [
                        "Available",
                        "Leased",
                        "Expired",
                        "Breaking",
                        "Broken"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseState"
                      }
                    },
                    "leaseStatus": {
                      "description": "The lease status of the container.",
                      "enum": [
                        "Locked",
                        "Unlocked"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "LeaseStatus"
                      }
                    },
                    "legalHold": {
                      "description": "The LegalHold property of a blob container.",
                      "properties": {
                        "hasLegalHold": {
                          "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                          "readOnly": true,
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "The list of LegalHold tags of a blob container.",
                          "items": {
                            "description": "A tag of the LegalHold of a blob container.",
                            "properties": {
                              "objectIdentifier": {
                                "description": "Returns the Object ID of the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tag": {
                                "description": "The tag value.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "timestamp": {
                                "description": "Returns the date and time the tag was added.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "upn": {
                                "description": "Returns the User Principal Name of the user who added the tag.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    },
                    "metadata": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "A name-value pair to associate with the container as metadata.",
                      "type": "object"
                    },
                    "publicAccess": {
                      "description": "Specifies whether data in the container may be accessed publicly and the level of access.",
                      "enum": [
                        "Container",
                        "Blob",
                        "None"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "PublicAccess"
                      }
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ListContainerItem"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The list of blob containers.",
              "properties": {
                "value": {
                  "description": "The list of blob containers.",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                            "properties": {
                              "id": {
                                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "title": "Resource",
                            "type": "object",
                            "x-ms-azure-resource": true
                          }
                        ],
                        "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
                        "properties": {
                          "etag": {
                            "description": "Resource Etag.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "title": "Entity Resource",
                        "type": "object",
                        "x-ms-client-name": "AzureEntityResource"
                      }
                    ],
                    "description": "The blob container properties be listed out.",
                    "properties": {
                      "properties": {
                        "description": "The properties of a container.",
                        "properties": {
                          "hasImmutabilityPolicy": {
                            "description": "The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "hasLegalHold": {
                            "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "immutabilityPolicy": {
                            "description": "The properties of an ImmutabilityPolicy of a blob container.",
                            "properties": {
                              "etag": {
                                "description": "ImmutabilityPolicy Etag.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "properties": {
                                "description": "The properties of an ImmutabilityPolicy of a blob container.",
                                "properties": {
                                  "immutabilityPeriodSinceCreationInDays": {
                                    "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                                    "type": "integer"
                                  },
                                  "state": {
                                    "description": "The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.",
                                    "enum": [
                                      "Locked",
                                      "Unlocked"
                                    ],
                                    "readOnly": true,
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ImmutabilityPolicyState"
                                    }
                                  }
                                },
                                "required": [
                                  "immutabilityPeriodSinceCreationInDays"
                                ]
                              },
                              "updateHistory": {
                                "description": "The ImmutabilityPolicy update history of the blob container.",
                                "items": {
                                  "description": "An update history of the ImmutabilityPolicy of a blob container.",
                                  "properties": {
                                    "immutabilityPeriodSinceCreationInDays": {
                                      "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                                      "readOnly": true,
                                      "type": "integer"
                                    },
                                    "objectIdentifier": {
                                      "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tenantId": {
                                      "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                                      "format": "date-time",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "update": {
                                      "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                                      "enum": [
                                        "put",
                                        "lock",
                                        "extend"
                                      ],
                                      "readOnly": true,
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ImmutabilityPolicyUpdateType"
                                      }
                                    },
                                    "upn": {
                                      "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              }
                            }
                          },
                          "lastModifiedTime": {
                            "description": "Returns the date and time the container was last modified.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "leaseDuration": {
                            "description": "Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.",
                            "enum": [
                              "Infinite",
                              "Fixed"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "LeaseDuration"
                            }
                          },
                          "leaseState": {
                            "description": "Lease state of the container.",
                            "enum": [
                              "Available",
                              "Leased",
                              "Expired",
                              "Breaking",
                              "Broken"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "LeaseState"
                            }
                          },
                          "leaseStatus": {
                            "description": "The lease status of the container.",
                            "enum": [
                              "Locked",
                              "Unlocked"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "LeaseStatus"
                            }
                          },
                          "legalHold": {
                            "description": "The LegalHold property of a blob container.",
                            "properties": {
                              "hasLegalHold": {
                                "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "tags": {
                                "description": "The list of LegalHold tags of a blob container.",
                                "items": {
                                  "description": "A tag of the LegalHold of a blob container.",
                                  "properties": {
                                    "objectIdentifier": {
                                      "description": "Returns the Object ID of the user who added the tag.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tag": {
                                      "description": "The tag value.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tenantId": {
                                      "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "description": "Returns the date and time the tag was added.",
                                      "format": "date-time",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "upn": {
                                      "description": "Returns the User Principal Name of the user who added the tag.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              }
                            }
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "A name-value pair to associate with the container as metadata.",
                            "type": "object"
                          },
                          "publicAccess": {
                            "description": "Specifies whether data in the container may be accessed publicly and the level of access.",
                            "enum": [
                              "Container",
                              "Blob",
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "PublicAccess"
                            }
                          }
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ListContainerItems"
          },
          {
            "oldValue": {
              "description": "The List service SAS credentials operation response.",
              "properties": {
                "serviceSasToken": {
                  "description": "List service SAS credentials of specific resource.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ListServiceSasResponse"
          },
          {
            "oldValue": {
              "description": "Metric specification of operation.",
              "properties": {
                "aggregationType": {
                  "description": "Aggregation type could be Average.",
                  "type": "string"
                },
                "category": {
                  "description": "The category this metric specification belong to, could be Capacity.",
                  "type": "string"
                },
                "dimensions": {
                  "description": "Dimensions of blobs, including blob type and access tier.",
                  "items": {
                    "description": "Dimension of blobs, possibly be blob type or access tier.",
                    "properties": {
                      "displayName": {
                        "description": "Display name of dimension.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Display name of dimension.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "displayDescription": {
                  "description": "Display description of metric specification.",
                  "type": "string"
                },
                "displayName": {
                  "description": "Display name of metric specification.",
                  "type": "string"
                },
                "fillGapWithZero": {
                  "description": "The property to decide fill gap with zero or not.",
                  "type": "boolean"
                },
                "name": {
                  "description": "Name of metric specification.",
                  "type": "string"
                },
                "resourceIdDimensionNameOverride": {
                  "description": "Account Resource Id.",
                  "type": "string"
                },
                "unit": {
                  "description": "Unit could be Bytes or Count.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricSpecification"
          },
          {
            "oldValue": {
              "description": "Network rule set",
              "properties": {
                "bypass": {
                  "default": "AzureServices",
                  "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                  "enum": [
                    "None",
                    "Logging",
                    "Metrics",
                    "AzureServices"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Bypass",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Bypass"
                  }
                },
                "defaultAction": {
                  "default": "Allow",
                  "description": "Specifies the default action of allow or deny when no other rules match.",
                  "enum": [
                    "Allow",
                    "Deny"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "DefaultAction"
                  }
                },
                "ipRules": {
                  "description": "Sets the IP ACL rules",
                  "items": {
                    "description": "IP rule with specific IP or IP range in CIDR format.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of IP ACL rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "value": {
                        "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                        "type": "string",
                        "x-ms-client-name": "IPAddressOrRange"
                      }
                    },
                    "required": [
                      "value"
                    ]
                  },
                  "type": "array"
                },
                "virtualNetworkRules": {
                  "description": "Sets the virtual network rules",
                  "items": {
                    "description": "Virtual Network rule.",
                    "properties": {
                      "action": {
                        "default": "Allow",
                        "description": "The action of virtual network rule.",
                        "enum": [
                          "Allow"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Action"
                        }
                      },
                      "id": {
                        "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                        "type": "string",
                        "x-ms-client-name": "VirtualNetworkResourceId"
                      },
                      "state": {
                        "description": "Gets the state of virtual network rule.",
                        "enum": [
                          "provisioning",
                          "deprovisioning",
                          "succeeded",
                          "failed",
                          "networkSourceDeleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "State"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "defaultAction"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/NetworkRuleSet"
          },
          {
            "oldValue": {
              "description": "Storage REST API operation definition.",
              "properties": {
                "display": {
                  "description": "Display metadata associated with the operation.",
                  "properties": {
                    "operation": {
                      "description": "Type of operation: get, read, delete, etc.",
                      "type": "string"
                    },
                    "provider": {
                      "description": "Service provider: Microsoft Storage.",
                      "type": "string"
                    },
                    "resource": {
                      "description": "Resource on which the operation is performed etc.",
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "description": "Operation name: {provider}/{resource}/{operation}",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of operations.",
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of operation, include metric specifications.",
                  "properties": {
                    "serviceSpecification": {
                      "description": "One property of operation, include metric specifications.",
                      "properties": {
                        "metricSpecifications": {
                          "description": "Metric specifications of operation.",
                          "items": {
                            "description": "Metric specification of operation.",
                            "properties": {
                              "aggregationType": {
                                "description": "Aggregation type could be Average.",
                                "type": "string"
                              },
                              "category": {
                                "description": "The category this metric specification belong to, could be Capacity.",
                                "type": "string"
                              },
                              "dimensions": {
                                "description": "Dimensions of blobs, including blob type and access tier.",
                                "items": {
                                  "description": "Dimension of blobs, possibly be blob type or access tier.",
                                  "properties": {
                                    "displayName": {
                                      "description": "Display name of dimension.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Display name of dimension.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "displayDescription": {
                                "description": "Display description of metric specification.",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Display name of metric specification.",
                                "type": "string"
                              },
                              "fillGapWithZero": {
                                "description": "The property to decide fill gap with zero or not.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name of metric specification.",
                                "type": "string"
                              },
                              "resourceIdDimensionNameOverride": {
                                "description": "Account Resource Id.",
                                "type": "string"
                              },
                              "unit": {
                                "description": "Unit could be Bytes or Count.",
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Operation"
          },
          {
            "oldValue": {
              "description": "Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.",
              "properties": {
                "value": {
                  "description": "List of Storage operations supported by the Storage resource provider.",
                  "items": {
                    "description": "Storage REST API operation definition.",
                    "properties": {
                      "display": {
                        "description": "Display metadata associated with the operation.",
                        "properties": {
                          "operation": {
                            "description": "Type of operation: get, read, delete, etc.",
                            "type": "string"
                          },
                          "provider": {
                            "description": "Service provider: Microsoft Storage.",
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource on which the operation is performed etc.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Operation name: {provider}/{resource}/{operation}",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The origin of operations.",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Properties of operation, include metric specifications.",
                        "properties": {
                          "serviceSpecification": {
                            "description": "One property of operation, include metric specifications.",
                            "properties": {
                              "metricSpecifications": {
                                "description": "Metric specifications of operation.",
                                "items": {
                                  "description": "Metric specification of operation.",
                                  "properties": {
                                    "aggregationType": {
                                      "description": "Aggregation type could be Average.",
                                      "type": "string"
                                    },
                                    "category": {
                                      "description": "The category this metric specification belong to, could be Capacity.",
                                      "type": "string"
                                    },
                                    "dimensions": {
                                      "description": "Dimensions of blobs, including blob type and access tier.",
                                      "items": {
                                        "description": "Dimension of blobs, possibly be blob type or access tier.",
                                        "properties": {
                                          "displayName": {
                                            "description": "Display name of dimension.",
                                            "type": "string"
                                          },
                                          "name": {
                                            "description": "Display name of dimension.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "type": "array"
                                    },
                                    "displayDescription": {
                                      "description": "Display description of metric specification.",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "Display name of metric specification.",
                                      "type": "string"
                                    },
                                    "fillGapWithZero": {
                                      "description": "The property to decide fill gap with zero or not.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "Name of metric specification.",
                                      "type": "string"
                                    },
                                    "resourceIdDimensionNameOverride": {
                                      "description": "Account Resource Id.",
                                      "type": "string"
                                    },
                                    "unit": {
                                      "description": "Unit could be Bytes or Count.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationListResult"
          },
          {
            "oldValue": {
              "description": "Properties of operation, include metric specifications.",
              "properties": {
                "serviceSpecification": {
                  "description": "One property of operation, include metric specifications.",
                  "properties": {
                    "metricSpecifications": {
                      "description": "Metric specifications of operation.",
                      "items": {
                        "description": "Metric specification of operation.",
                        "properties": {
                          "aggregationType": {
                            "description": "Aggregation type could be Average.",
                            "type": "string"
                          },
                          "category": {
                            "description": "The category this metric specification belong to, could be Capacity.",
                            "type": "string"
                          },
                          "dimensions": {
                            "description": "Dimensions of blobs, including blob type and access tier.",
                            "items": {
                              "description": "Dimension of blobs, possibly be blob type or access tier.",
                              "properties": {
                                "displayName": {
                                  "description": "Display name of dimension.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Display name of dimension.",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "displayDescription": {
                            "description": "Display description of metric specification.",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Display name of metric specification.",
                            "type": "string"
                          },
                          "fillGapWithZero": {
                            "description": "The property to decide fill gap with zero or not.",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Name of metric specification.",
                            "type": "string"
                          },
                          "resourceIdDimensionNameOverride": {
                            "description": "Account Resource Id.",
                            "type": "string"
                          },
                          "unit": {
                            "description": "Unit could be Bytes or Count.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationProperties"
          },
          {
            "oldValue": {
              "description": "Describes a storage resource.",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string"
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags assigned to a resource; can be used for viewing and grouping a resource (across resource groups).",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Resource"
          },
          {
            "oldValue": {
              "description": "The restriction because of which SKU cannot be used.",
              "properties": {
                "reasonCode": {
                  "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                  "enum": [
                    "QuotaId",
                    "NotAvailableForSubscription"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReasonCode"
                  }
                },
                "type": {
                  "description": "The type of restrictions. As of now only possible value for this is location.",
                  "readOnly": true,
                  "type": "string"
                },
                "values": {
                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Restriction"
          },
          {
            "oldValue": {
              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
              "properties": {
                "name": {
                  "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SKUCapability"
          },
          {
            "oldValue": {
              "description": "The parameters to list service SAS credentials of a specific resource.",
              "properties": {
                "canonicalizedResource": {
                  "description": "The canonical path to the signed resource.",
                  "type": "string"
                },
                "endPk": {
                  "description": "The end of partition key.",
                  "type": "string",
                  "x-ms-client-name": "PartitionKeyEnd"
                },
                "endRk": {
                  "description": "The end of row key.",
                  "type": "string",
                  "x-ms-client-name": "RowKeyEnd"
                },
                "keyToSign": {
                  "description": "The key to sign the account SAS token with.",
                  "type": "string"
                },
                "rscc": {
                  "description": "The response header override for cache control.",
                  "type": "string",
                  "x-ms-client-name": "CacheControl"
                },
                "rscd": {
                  "description": "The response header override for content disposition.",
                  "type": "string",
                  "x-ms-client-name": "ContentDisposition"
                },
                "rsce": {
                  "description": "The response header override for content encoding.",
                  "type": "string",
                  "x-ms-client-name": "ContentEncoding"
                },
                "rscl": {
                  "description": "The response header override for content language.",
                  "type": "string",
                  "x-ms-client-name": "ContentLanguage"
                },
                "rsct": {
                  "description": "The response header override for content type.",
                  "type": "string",
                  "x-ms-client-name": "ContentType"
                },
                "signedExpiry": {
                  "description": "The time at which the shared access signature becomes invalid.",
                  "format": "date-time",
                  "type": "string",
                  "x-ms-client-name": "SharedAccessExpiryTime"
                },
                "signedIdentifier": {
                  "description": "A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.",
                  "maxLength": 64,
                  "type": "string",
                  "x-ms-client-name": "Identifier"
                },
                "signedIp": {
                  "description": "An IP address or a range of IP addresses from which to accept requests.",
                  "type": "string",
                  "x-ms-client-name": "IPAddressOrRange"
                },
                "signedPermission": {
                  "description": "The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).",
                  "enum": [
                    "r",
                    "d",
                    "w",
                    "l",
                    "a",
                    "c",
                    "u",
                    "p"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Permissions",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Permissions"
                  }
                },
                "signedProtocol": {
                  "description": "The protocol permitted for a request made with the account SAS.",
                  "enum": [
                    "https,http",
                    "https"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Protocols",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "HttpProtocol"
                  }
                },
                "signedResource": {
                  "description": "The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).",
                  "enum": [
                    "b",
                    "c",
                    "f",
                    "s"
                  ],
                  "type": "string",
                  "x-ms-client-name": "Resource",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "signedResource"
                  }
                },
                "signedStart": {
                  "description": "The time at which the SAS becomes valid.",
                  "format": "date-time",
                  "type": "string",
                  "x-ms-client-name": "SharedAccessStartTime"
                },
                "startPk": {
                  "description": "The start of partition key.",
                  "type": "string",
                  "x-ms-client-name": "PartitionKeyStart"
                },
                "startRk": {
                  "description": "The start of row key.",
                  "type": "string",
                  "x-ms-client-name": "RowKeyStart"
                }
              },
              "required": [
                "canonicalizedResource",
                "signedResource"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ServiceSasParameters"
          },
          {
            "oldValue": {
              "description": "One property of operation, include metric specifications.",
              "properties": {
                "metricSpecifications": {
                  "description": "Metric specifications of operation.",
                  "items": {
                    "description": "Metric specification of operation.",
                    "properties": {
                      "aggregationType": {
                        "description": "Aggregation type could be Average.",
                        "type": "string"
                      },
                      "category": {
                        "description": "The category this metric specification belong to, could be Capacity.",
                        "type": "string"
                      },
                      "dimensions": {
                        "description": "Dimensions of blobs, including blob type and access tier.",
                        "items": {
                          "description": "Dimension of blobs, possibly be blob type or access tier.",
                          "properties": {
                            "displayName": {
                              "description": "Display name of dimension.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Display name of dimension.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "displayDescription": {
                        "description": "Display description of metric specification.",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Display name of metric specification.",
                        "type": "string"
                      },
                      "fillGapWithZero": {
                        "description": "The property to decide fill gap with zero or not.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of metric specification.",
                        "type": "string"
                      },
                      "resourceIdDimensionNameOverride": {
                        "description": "Account Resource Id.",
                        "type": "string"
                      },
                      "unit": {
                        "description": "Unit could be Bytes or Count.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ServiceSpecification"
          },
          {
            "oldValue": {
              "description": "The SKU of the storage account.",
              "properties": {
                "capabilities": {
                  "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                  "items": {
                    "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                    "properties": {
                      "name": {
                        "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "kind": {
                  "description": "Indicates the type of storage account.",
                  "enum": [
                    "Storage",
                    "StorageV2",
                    "BlobStorage"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "locations": {
                  "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "name": {
                  "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                  "enum": [
                    "Standard_LRS",
                    "Standard_GRS",
                    "Standard_RAGRS",
                    "Standard_ZRS",
                    "Premium_LRS"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SkuName"
                  }
                },
                "resourceType": {
                  "description": "The type of the resource, usually it is 'storageAccounts'.",
                  "readOnly": true,
                  "type": "string"
                },
                "restrictions": {
                  "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                  "items": {
                    "description": "The restriction because of which SKU cannot be used.",
                    "properties": {
                      "reasonCode": {
                        "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                        "enum": [
                          "QuotaId",
                          "NotAvailableForSubscription"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReasonCode"
                        }
                      },
                      "type": {
                        "description": "The type of restrictions. As of now only possible value for this is location.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "values": {
                        "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                },
                "tier": {
                  "description": "Gets the sku tier. This is based on the SKU name.",
                  "enum": [
                    "Standard",
                    "Premium"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SkuTier"
                  }
                }
              },
              "required": [
                "name"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Sku"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "Describes a storage resource.",
                  "properties": {
                    "id": {
                      "description": "Resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Tags assigned to a resource; can be used for viewing and grouping a resource (across resource groups).",
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "The storage account.",
              "properties": {
                "identity": {
                  "description": "Identity for the resource.",
                  "properties": {
                    "principalId": {
                      "description": "The principal ID of resource identity.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The tenant ID of resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "The identity type.",
                      "enum": [
                        "SystemAssigned"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "IdentityType"
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "kind": {
                  "description": "Gets the Kind.",
                  "enum": [
                    "Storage",
                    "StorageV2",
                    "BlobStorage"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "properties": {
                  "description": "Properties of the storage account.",
                  "properties": {
                    "accessTier": {
                      "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                      "enum": [
                        "Hot",
                        "Cool"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AccessTier"
                      }
                    },
                    "creationTime": {
                      "description": "Gets the creation date and time of the storage account in UTC.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "customDomain": {
                      "description": "The custom domain assigned to this storage account. This can be set via Update.",
                      "properties": {
                        "name": {
                          "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                          "type": "string"
                        },
                        "useSubDomainName": {
                          "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "encryption": {
                      "description": "The encryption settings on the storage account.",
                      "properties": {
                        "keySource": {
                          "default": "Microsoft.Storage",
                          "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                          "enum": [
                            "Microsoft.Storage",
                            "Microsoft.Keyvault"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "KeySource"
                          }
                        },
                        "keyvaultproperties": {
                          "description": "Properties of key vault.",
                          "properties": {
                            "keyname": {
                              "description": "The name of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyName"
                            },
                            "keyvaulturi": {
                              "description": "The Uri of KeyVault.",
                              "type": "string",
                              "x-ms-client-name": "KeyVaultUri"
                            },
                            "keyversion": {
                              "description": "The version of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyVersion"
                            }
                          }
                        },
                        "services": {
                          "description": "A list of services that support encryption.",
                          "properties": {
                            "blob": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "file": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "queue": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "table": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "keySource"
                      ]
                    },
                    "lastGeoFailoverTime": {
                      "description": "Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "networkAcls": {
                      "description": "Network rule set",
                      "properties": {
                        "bypass": {
                          "default": "AzureServices",
                          "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                          "enum": [
                            "None",
                            "Logging",
                            "Metrics",
                            "AzureServices"
                          ],
                          "type": "string",
                          "x-ms-client-name": "Bypass",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "Bypass"
                          }
                        },
                        "defaultAction": {
                          "default": "Allow",
                          "description": "Specifies the default action of allow or deny when no other rules match.",
                          "enum": [
                            "Allow",
                            "Deny"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "DefaultAction"
                          }
                        },
                        "ipRules": {
                          "description": "Sets the IP ACL rules",
                          "items": {
                            "description": "IP rule with specific IP or IP range in CIDR format.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of IP ACL rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "value": {
                                "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                "type": "string",
                                "x-ms-client-name": "IPAddressOrRange"
                              }
                            },
                            "required": [
                              "value"
                            ]
                          },
                          "type": "array"
                        },
                        "virtualNetworkRules": {
                          "description": "Sets the virtual network rules",
                          "items": {
                            "description": "Virtual Network rule.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of virtual network rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "id": {
                                "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                "type": "string",
                                "x-ms-client-name": "VirtualNetworkResourceId"
                              },
                              "state": {
                                "description": "Gets the state of virtual network rule.",
                                "enum": [
                                  "provisioning",
                                  "deprovisioning",
                                  "succeeded",
                                  "failed",
                                  "networkSourceDeleted"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "State"
                                }
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "defaultAction"
                      ]
                    },
                    "primaryEndpoints": {
                      "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                      "properties": {
                        "blob": {
                          "description": "Gets the blob endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "file": {
                          "description": "Gets the file endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "queue": {
                          "description": "Gets the queue endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "table": {
                          "description": "Gets the table endpoint.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "primaryLocation": {
                      "description": "Gets the location of the primary data center for the storage account.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "Gets the status of the storage account at the time the operation was called.",
                      "enum": [
                        "Creating",
                        "ResolvingDNS",
                        "Succeeded"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ProvisioningState"
                      }
                    },
                    "secondaryEndpoints": {
                      "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                      "properties": {
                        "blob": {
                          "description": "Gets the blob endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "file": {
                          "description": "Gets the file endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "queue": {
                          "description": "Gets the queue endpoint.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "table": {
                          "description": "Gets the table endpoint.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "secondaryLocation": {
                      "description": "Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "statusOfPrimary": {
                      "description": "Gets the status indicating whether the primary location of the storage account is available or unavailable.",
                      "enum": [
                        "available",
                        "unavailable"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AccountStatus"
                      }
                    },
                    "statusOfSecondary": {
                      "description": "Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.",
                      "enum": [
                        "available",
                        "unavailable"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AccountStatus"
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "default": false,
                      "description": "Allows https traffic only to storage service if sets to true.",
                      "type": "boolean",
                      "x-ms-client-name": "EnableHttpsTrafficOnly"
                    }
                  }
                },
                "sku": {
                  "description": "The SKU of the storage account.",
                  "properties": {
                    "capabilities": {
                      "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                      "items": {
                        "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "properties": {
                          "name": {
                            "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "kind": {
                      "description": "Indicates the type of storage account.",
                      "enum": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "Kind"
                      }
                    },
                    "locations": {
                      "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "name": {
                      "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                      "enum": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    },
                    "resourceType": {
                      "description": "The type of the resource, usually it is 'storageAccounts'.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "restrictions": {
                      "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                      "items": {
                        "description": "The restriction because of which SKU cannot be used.",
                        "properties": {
                          "reasonCode": {
                            "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                            "enum": [
                              "QuotaId",
                              "NotAvailableForSubscription"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReasonCode"
                            }
                          },
                          "type": {
                            "description": "The type of restrictions. As of now only possible value for this is location.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "values": {
                            "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "tier": {
                      "description": "Gets the sku tier. This is based on the SKU name.",
                      "enum": [
                        "Standard",
                        "Premium"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuTier"
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccount"
          },
          {
            "oldValue": {
              "description": "The parameters used to check the availability of the storage account name.",
              "properties": {
                "name": {
                  "description": "The storage account name.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of resource, Microsoft.Storage/storageAccounts",
                  "enum": [
                    "Microsoft.Storage/storageAccounts"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Type"
                  }
                }
              },
              "required": [
                "name",
                "type"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountCheckNameAvailabilityParameters"
          },
          {
            "oldValue": {
              "description": "The parameters used when creating a storage account.",
              "properties": {
                "identity": {
                  "description": "Identity for the resource.",
                  "properties": {
                    "principalId": {
                      "description": "The principal ID of resource identity.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The tenant ID of resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "The identity type.",
                      "enum": [
                        "SystemAssigned"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "IdentityType"
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "kind": {
                  "description": "Required. Indicates the type of storage account.",
                  "enum": [
                    "Storage",
                    "StorageV2",
                    "BlobStorage"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "location": {
                  "description": "Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.",
                  "type": "string"
                },
                "properties": {
                  "description": "The parameters used to create the storage account.",
                  "properties": {
                    "accessTier": {
                      "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                      "enum": [
                        "Hot",
                        "Cool"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AccessTier"
                      }
                    },
                    "customDomain": {
                      "description": "The custom domain assigned to this storage account. This can be set via Update.",
                      "properties": {
                        "name": {
                          "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                          "type": "string"
                        },
                        "useSubDomainName": {
                          "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "encryption": {
                      "description": "The encryption settings on the storage account.",
                      "properties": {
                        "keySource": {
                          "default": "Microsoft.Storage",
                          "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                          "enum": [
                            "Microsoft.Storage",
                            "Microsoft.Keyvault"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "KeySource"
                          }
                        },
                        "keyvaultproperties": {
                          "description": "Properties of key vault.",
                          "properties": {
                            "keyname": {
                              "description": "The name of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyName"
                            },
                            "keyvaulturi": {
                              "description": "The Uri of KeyVault.",
                              "type": "string",
                              "x-ms-client-name": "KeyVaultUri"
                            },
                            "keyversion": {
                              "description": "The version of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyVersion"
                            }
                          }
                        },
                        "services": {
                          "description": "A list of services that support encryption.",
                          "properties": {
                            "blob": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "file": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "queue": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "table": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "keySource"
                      ]
                    },
                    "networkAcls": {
                      "description": "Network rule set",
                      "properties": {
                        "bypass": {
                          "default": "AzureServices",
                          "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                          "enum": [
                            "None",
                            "Logging",
                            "Metrics",
                            "AzureServices"
                          ],
                          "type": "string",
                          "x-ms-client-name": "Bypass",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "Bypass"
                          }
                        },
                        "defaultAction": {
                          "default": "Allow",
                          "description": "Specifies the default action of allow or deny when no other rules match.",
                          "enum": [
                            "Allow",
                            "Deny"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "DefaultAction"
                          }
                        },
                        "ipRules": {
                          "description": "Sets the IP ACL rules",
                          "items": {
                            "description": "IP rule with specific IP or IP range in CIDR format.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of IP ACL rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "value": {
                                "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                "type": "string",
                                "x-ms-client-name": "IPAddressOrRange"
                              }
                            },
                            "required": [
                              "value"
                            ]
                          },
                          "type": "array"
                        },
                        "virtualNetworkRules": {
                          "description": "Sets the virtual network rules",
                          "items": {
                            "description": "Virtual Network rule.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of virtual network rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "id": {
                                "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                "type": "string",
                                "x-ms-client-name": "VirtualNetworkResourceId"
                              },
                              "state": {
                                "description": "Gets the state of virtual network rule.",
                                "enum": [
                                  "provisioning",
                                  "deprovisioning",
                                  "succeeded",
                                  "failed",
                                  "networkSourceDeleted"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "State"
                                }
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "defaultAction"
                      ]
                    },
                    "supportsHttpsTrafficOnly": {
                      "default": false,
                      "description": "Allows https traffic only to storage service if sets to true.",
                      "type": "boolean",
                      "x-ms-client-name": "EnableHttpsTrafficOnly"
                    }
                  }
                },
                "sku": {
                  "description": "The SKU of the storage account.",
                  "properties": {
                    "capabilities": {
                      "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                      "items": {
                        "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "properties": {
                          "name": {
                            "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "kind": {
                      "description": "Indicates the type of storage account.",
                      "enum": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "Kind"
                      }
                    },
                    "locations": {
                      "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "name": {
                      "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                      "enum": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    },
                    "resourceType": {
                      "description": "The type of the resource, usually it is 'storageAccounts'.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "restrictions": {
                      "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                      "items": {
                        "description": "The restriction because of which SKU cannot be used.",
                        "properties": {
                          "reasonCode": {
                            "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                            "enum": [
                              "QuotaId",
                              "NotAvailableForSubscription"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReasonCode"
                            }
                          },
                          "type": {
                            "description": "The type of restrictions. As of now only possible value for this is location.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "values": {
                            "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "tier": {
                      "description": "Gets the sku tier. This is based on the SKU name.",
                      "enum": [
                        "Standard",
                        "Premium"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuTier"
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.",
                  "type": "object"
                }
              },
              "required": [
                "sku",
                "kind",
                "location"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountCreateParameters"
          },
          {
            "oldValue": {
              "description": "An access key for the storage account.",
              "properties": {
                "keyName": {
                  "description": "Name of the key.",
                  "readOnly": true,
                  "type": "string"
                },
                "permissions": {
                  "description": "Permissions for the key -- read-only or full permissions.",
                  "enum": [
                    "Read",
                    "Full"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "KeyPermission"
                  }
                },
                "value": {
                  "description": "Base 64-encoded value of the key.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountKey"
          },
          {
            "oldValue": {
              "description": "The response from the ListKeys operation.",
              "properties": {
                "keys": {
                  "description": "Gets the list of storage account keys and their properties for the specified storage account.",
                  "items": {
                    "description": "An access key for the storage account.",
                    "properties": {
                      "keyName": {
                        "description": "Name of the key.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "permissions": {
                        "description": "Permissions for the key -- read-only or full permissions.",
                        "enum": [
                          "Read",
                          "Full"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "KeyPermission"
                        }
                      },
                      "value": {
                        "description": "Base 64-encoded value of the key.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountListKeysResult"
          },
          {
            "oldValue": {
              "description": "The response from the List Storage Accounts operation.",
              "properties": {
                "value": {
                  "description": "Gets the list of storage accounts and their properties.",
                  "items": {
                    "allOf": [
                      {
                        "description": "Describes a storage resource.",
                        "properties": {
                          "id": {
                            "description": "Resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Tags assigned to a resource; can be used for viewing and grouping a resource (across resource groups).",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "The storage account.",
                    "properties": {
                      "identity": {
                        "description": "Identity for the resource.",
                        "properties": {
                          "principalId": {
                            "description": "The principal ID of resource identity.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tenantId": {
                            "description": "The tenant ID of resource.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The identity type.",
                            "enum": [
                              "SystemAssigned"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "IdentityType"
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      "kind": {
                        "description": "Gets the Kind.",
                        "enum": [
                          "Storage",
                          "StorageV2",
                          "BlobStorage"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "properties": {
                        "description": "Properties of the storage account.",
                        "properties": {
                          "accessTier": {
                            "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                            "enum": [
                              "Hot",
                              "Cool"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "AccessTier"
                            }
                          },
                          "creationTime": {
                            "description": "Gets the creation date and time of the storage account in UTC.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "customDomain": {
                            "description": "The custom domain assigned to this storage account. This can be set via Update.",
                            "properties": {
                              "name": {
                                "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                                "type": "string"
                              },
                              "useSubDomainName": {
                                "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "encryption": {
                            "description": "The encryption settings on the storage account.",
                            "properties": {
                              "keySource": {
                                "default": "Microsoft.Storage",
                                "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                                "enum": [
                                  "Microsoft.Storage",
                                  "Microsoft.Keyvault"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "KeySource"
                                }
                              },
                              "keyvaultproperties": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyname": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyName"
                                  },
                                  "keyvaulturi": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVaultUri"
                                  },
                                  "keyversion": {
                                    "description": "The version of KeyVault key.",
                                    "type": "string",
                                    "x-ms-client-name": "KeyVersion"
                                  }
                                }
                              },
                              "services": {
                                "description": "A list of services that support encryption.",
                                "properties": {
                                  "blob": {
                                    "description": "A service that allows server-side encryption to be used.",
                                    "properties": {
                                      "enabled": {
                                        "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                        "type": "boolean"
                                      },
                                      "lastEnabledTime": {
                                        "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                        "format": "date-time",
                                        "readOnly": true,
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "file": {
                                    "description": "A service that allows server-side encryption to be used.",
                                    "properties": {
                                      "enabled": {
                                        "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                        "type": "boolean"
                                      },
                                      "lastEnabledTime": {
                                        "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                        "format": "date-time",
                                        "readOnly": true,
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "queue": {
                                    "description": "A service that allows server-side encryption to be used.",
                                    "properties": {
                                      "enabled": {
                                        "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                        "type": "boolean"
                                      },
                                      "lastEnabledTime": {
                                        "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                        "format": "date-time",
                                        "readOnly": true,
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "table": {
                                    "description": "A service that allows server-side encryption to be used.",
                                    "properties": {
                                      "enabled": {
                                        "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                        "type": "boolean"
                                      },
                                      "lastEnabledTime": {
                                        "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                        "format": "date-time",
                                        "readOnly": true,
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "keySource"
                            ]
                          },
                          "lastGeoFailoverTime": {
                            "description": "Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "networkAcls": {
                            "description": "Network rule set",
                            "properties": {
                              "bypass": {
                                "default": "AzureServices",
                                "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                                "enum": [
                                  "None",
                                  "Logging",
                                  "Metrics",
                                  "AzureServices"
                                ],
                                "type": "string",
                                "x-ms-client-name": "Bypass",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "Bypass"
                                }
                              },
                              "defaultAction": {
                                "default": "Allow",
                                "description": "Specifies the default action of allow or deny when no other rules match.",
                                "enum": [
                                  "Allow",
                                  "Deny"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "DefaultAction"
                                }
                              },
                              "ipRules": {
                                "description": "Sets the IP ACL rules",
                                "items": {
                                  "description": "IP rule with specific IP or IP range in CIDR format.",
                                  "properties": {
                                    "action": {
                                      "default": "Allow",
                                      "description": "The action of IP ACL rule.",
                                      "enum": [
                                        "Allow"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "Action"
                                      }
                                    },
                                    "value": {
                                      "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                      "type": "string",
                                      "x-ms-client-name": "IPAddressOrRange"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ]
                                },
                                "type": "array"
                              },
                              "virtualNetworkRules": {
                                "description": "Sets the virtual network rules",
                                "items": {
                                  "description": "Virtual Network rule.",
                                  "properties": {
                                    "action": {
                                      "default": "Allow",
                                      "description": "The action of virtual network rule.",
                                      "enum": [
                                        "Allow"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "Action"
                                      }
                                    },
                                    "id": {
                                      "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                      "type": "string",
                                      "x-ms-client-name": "VirtualNetworkResourceId"
                                    },
                                    "state": {
                                      "description": "Gets the state of virtual network rule.",
                                      "enum": [
                                        "provisioning",
                                        "deprovisioning",
                                        "succeeded",
                                        "failed",
                                        "networkSourceDeleted"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "State"
                                      }
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "defaultAction"
                            ]
                          },
                          "primaryEndpoints": {
                            "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                            "properties": {
                              "blob": {
                                "description": "Gets the blob endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "file": {
                                "description": "Gets the file endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "queue": {
                                "description": "Gets the queue endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "table": {
                                "description": "Gets the table endpoint.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "primaryLocation": {
                            "description": "Gets the location of the primary data center for the storage account.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "Gets the status of the storage account at the time the operation was called.",
                            "enum": [
                              "Creating",
                              "ResolvingDNS",
                              "Succeeded"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ProvisioningState"
                            }
                          },
                          "secondaryEndpoints": {
                            "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                            "properties": {
                              "blob": {
                                "description": "Gets the blob endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "file": {
                                "description": "Gets the file endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "queue": {
                                "description": "Gets the queue endpoint.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "table": {
                                "description": "Gets the table endpoint.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "secondaryLocation": {
                            "description": "Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "statusOfPrimary": {
                            "description": "Gets the status indicating whether the primary location of the storage account is available or unavailable.",
                            "enum": [
                              "available",
                              "unavailable"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "AccountStatus"
                            }
                          },
                          "statusOfSecondary": {
                            "description": "Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.",
                            "enum": [
                              "available",
                              "unavailable"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "AccountStatus"
                            }
                          },
                          "supportsHttpsTrafficOnly": {
                            "default": false,
                            "description": "Allows https traffic only to storage service if sets to true.",
                            "type": "boolean",
                            "x-ms-client-name": "EnableHttpsTrafficOnly"
                          }
                        }
                      },
                      "sku": {
                        "description": "The SKU of the storage account.",
                        "properties": {
                          "capabilities": {
                            "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                            "items": {
                              "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                              "properties": {
                                "name": {
                                  "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "value": {
                                  "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "kind": {
                            "description": "Indicates the type of storage account.",
                            "enum": [
                              "Storage",
                              "StorageV2",
                              "BlobStorage"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Kind"
                            }
                          },
                          "locations": {
                            "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "name": {
                            "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                            "enum": [
                              "Standard_LRS",
                              "Standard_GRS",
                              "Standard_RAGRS",
                              "Standard_ZRS",
                              "Premium_LRS"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SkuName"
                            }
                          },
                          "resourceType": {
                            "description": "The type of the resource, usually it is 'storageAccounts'.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "restrictions": {
                            "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                            "items": {
                              "description": "The restriction because of which SKU cannot be used.",
                              "properties": {
                                "reasonCode": {
                                  "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                                  "enum": [
                                    "QuotaId",
                                    "NotAvailableForSubscription"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReasonCode"
                                  }
                                },
                                "type": {
                                  "description": "The type of restrictions. As of now only possible value for this is location.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "values": {
                                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "readOnly": true,
                                  "type": "array"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "tier": {
                            "description": "Gets the sku tier. This is based on the SKU name.",
                            "enum": [
                              "Standard",
                              "Premium"
                            ],
                            "readOnly": true,
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SkuTier"
                            }
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountListResult"
          },
          {
            "oldValue": {
              "description": "Properties of the storage account.",
              "properties": {
                "accessTier": {
                  "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                  "enum": [
                    "Hot",
                    "Cool"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AccessTier"
                  }
                },
                "creationTime": {
                  "description": "Gets the creation date and time of the storage account in UTC.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "customDomain": {
                  "description": "The custom domain assigned to this storage account. This can be set via Update.",
                  "properties": {
                    "name": {
                      "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                      "type": "string"
                    },
                    "useSubDomainName": {
                      "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "encryption": {
                  "description": "The encryption settings on the storage account.",
                  "properties": {
                    "keySource": {
                      "default": "Microsoft.Storage",
                      "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                      "enum": [
                        "Microsoft.Storage",
                        "Microsoft.Keyvault"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "KeySource"
                      }
                    },
                    "keyvaultproperties": {
                      "description": "Properties of key vault.",
                      "properties": {
                        "keyname": {
                          "description": "The name of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyName"
                        },
                        "keyvaulturi": {
                          "description": "The Uri of KeyVault.",
                          "type": "string",
                          "x-ms-client-name": "KeyVaultUri"
                        },
                        "keyversion": {
                          "description": "The version of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyVersion"
                        }
                      }
                    },
                    "services": {
                      "description": "A list of services that support encryption.",
                      "properties": {
                        "blob": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "file": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "queue": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "table": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "keySource"
                  ]
                },
                "lastGeoFailoverTime": {
                  "description": "Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "networkAcls": {
                  "description": "Network rule set",
                  "properties": {
                    "bypass": {
                      "default": "AzureServices",
                      "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                      "enum": [
                        "None",
                        "Logging",
                        "Metrics",
                        "AzureServices"
                      ],
                      "type": "string",
                      "x-ms-client-name": "Bypass",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "Bypass"
                      }
                    },
                    "defaultAction": {
                      "default": "Allow",
                      "description": "Specifies the default action of allow or deny when no other rules match.",
                      "enum": [
                        "Allow",
                        "Deny"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "DefaultAction"
                      }
                    },
                    "ipRules": {
                      "description": "Sets the IP ACL rules",
                      "items": {
                        "description": "IP rule with specific IP or IP range in CIDR format.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of IP ACL rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "value": {
                            "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                            "type": "string",
                            "x-ms-client-name": "IPAddressOrRange"
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "type": "array"
                    },
                    "virtualNetworkRules": {
                      "description": "Sets the virtual network rules",
                      "items": {
                        "description": "Virtual Network rule.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of virtual network rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "id": {
                            "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                            "type": "string",
                            "x-ms-client-name": "VirtualNetworkResourceId"
                          },
                          "state": {
                            "description": "Gets the state of virtual network rule.",
                            "enum": [
                              "provisioning",
                              "deprovisioning",
                              "succeeded",
                              "failed",
                              "networkSourceDeleted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "State"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "defaultAction"
                  ]
                },
                "primaryEndpoints": {
                  "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                  "properties": {
                    "blob": {
                      "description": "Gets the blob endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "file": {
                      "description": "Gets the file endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "queue": {
                      "description": "Gets the queue endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "table": {
                      "description": "Gets the table endpoint.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "primaryLocation": {
                  "description": "Gets the location of the primary data center for the storage account.",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "Gets the status of the storage account at the time the operation was called.",
                  "enum": [
                    "Creating",
                    "ResolvingDNS",
                    "Succeeded"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ProvisioningState"
                  }
                },
                "secondaryEndpoints": {
                  "description": "The URIs that are used to perform a retrieval of a public blob, queue, or table object.",
                  "properties": {
                    "blob": {
                      "description": "Gets the blob endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "file": {
                      "description": "Gets the file endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "queue": {
                      "description": "Gets the queue endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "table": {
                      "description": "Gets the table endpoint.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "secondaryLocation": {
                  "description": "Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
                  "readOnly": true,
                  "type": "string"
                },
                "statusOfPrimary": {
                  "description": "Gets the status indicating whether the primary location of the storage account is available or unavailable.",
                  "enum": [
                    "available",
                    "unavailable"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AccountStatus"
                  }
                },
                "statusOfSecondary": {
                  "description": "Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.",
                  "enum": [
                    "available",
                    "unavailable"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AccountStatus"
                  }
                },
                "supportsHttpsTrafficOnly": {
                  "default": false,
                  "description": "Allows https traffic only to storage service if sets to true.",
                  "type": "boolean",
                  "x-ms-client-name": "EnableHttpsTrafficOnly"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountProperties"
          },
          {
            "oldValue": {
              "description": "The parameters used to create the storage account.",
              "properties": {
                "accessTier": {
                  "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                  "enum": [
                    "Hot",
                    "Cool"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AccessTier"
                  }
                },
                "customDomain": {
                  "description": "The custom domain assigned to this storage account. This can be set via Update.",
                  "properties": {
                    "name": {
                      "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                      "type": "string"
                    },
                    "useSubDomainName": {
                      "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "encryption": {
                  "description": "The encryption settings on the storage account.",
                  "properties": {
                    "keySource": {
                      "default": "Microsoft.Storage",
                      "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                      "enum": [
                        "Microsoft.Storage",
                        "Microsoft.Keyvault"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "KeySource"
                      }
                    },
                    "keyvaultproperties": {
                      "description": "Properties of key vault.",
                      "properties": {
                        "keyname": {
                          "description": "The name of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyName"
                        },
                        "keyvaulturi": {
                          "description": "The Uri of KeyVault.",
                          "type": "string",
                          "x-ms-client-name": "KeyVaultUri"
                        },
                        "keyversion": {
                          "description": "The version of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyVersion"
                        }
                      }
                    },
                    "services": {
                      "description": "A list of services that support encryption.",
                      "properties": {
                        "blob": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "file": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "queue": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "table": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "keySource"
                  ]
                },
                "networkAcls": {
                  "description": "Network rule set",
                  "properties": {
                    "bypass": {
                      "default": "AzureServices",
                      "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                      "enum": [
                        "None",
                        "Logging",
                        "Metrics",
                        "AzureServices"
                      ],
                      "type": "string",
                      "x-ms-client-name": "Bypass",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "Bypass"
                      }
                    },
                    "defaultAction": {
                      "default": "Allow",
                      "description": "Specifies the default action of allow or deny when no other rules match.",
                      "enum": [
                        "Allow",
                        "Deny"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "DefaultAction"
                      }
                    },
                    "ipRules": {
                      "description": "Sets the IP ACL rules",
                      "items": {
                        "description": "IP rule with specific IP or IP range in CIDR format.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of IP ACL rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "value": {
                            "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                            "type": "string",
                            "x-ms-client-name": "IPAddressOrRange"
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "type": "array"
                    },
                    "virtualNetworkRules": {
                      "description": "Sets the virtual network rules",
                      "items": {
                        "description": "Virtual Network rule.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of virtual network rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "id": {
                            "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                            "type": "string",
                            "x-ms-client-name": "VirtualNetworkResourceId"
                          },
                          "state": {
                            "description": "Gets the state of virtual network rule.",
                            "enum": [
                              "provisioning",
                              "deprovisioning",
                              "succeeded",
                              "failed",
                              "networkSourceDeleted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "State"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "defaultAction"
                  ]
                },
                "supportsHttpsTrafficOnly": {
                  "default": false,
                  "description": "Allows https traffic only to storage service if sets to true.",
                  "type": "boolean",
                  "x-ms-client-name": "EnableHttpsTrafficOnly"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountPropertiesCreateParameters"
          },
          {
            "oldValue": {
              "description": "The parameters used when updating a storage account.",
              "properties": {
                "accessTier": {
                  "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                  "enum": [
                    "Hot",
                    "Cool"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AccessTier"
                  }
                },
                "customDomain": {
                  "description": "The custom domain assigned to this storage account. This can be set via Update.",
                  "properties": {
                    "name": {
                      "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                      "type": "string"
                    },
                    "useSubDomainName": {
                      "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "encryption": {
                  "description": "The encryption settings on the storage account.",
                  "properties": {
                    "keySource": {
                      "default": "Microsoft.Storage",
                      "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                      "enum": [
                        "Microsoft.Storage",
                        "Microsoft.Keyvault"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "KeySource"
                      }
                    },
                    "keyvaultproperties": {
                      "description": "Properties of key vault.",
                      "properties": {
                        "keyname": {
                          "description": "The name of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyName"
                        },
                        "keyvaulturi": {
                          "description": "The Uri of KeyVault.",
                          "type": "string",
                          "x-ms-client-name": "KeyVaultUri"
                        },
                        "keyversion": {
                          "description": "The version of KeyVault key.",
                          "type": "string",
                          "x-ms-client-name": "KeyVersion"
                        }
                      }
                    },
                    "services": {
                      "description": "A list of services that support encryption.",
                      "properties": {
                        "blob": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "file": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "queue": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "table": {
                          "description": "A service that allows server-side encryption to be used.",
                          "properties": {
                            "enabled": {
                              "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                              "type": "boolean"
                            },
                            "lastEnabledTime": {
                              "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "keySource"
                  ]
                },
                "networkAcls": {
                  "description": "Network rule set",
                  "properties": {
                    "bypass": {
                      "default": "AzureServices",
                      "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                      "enum": [
                        "None",
                        "Logging",
                        "Metrics",
                        "AzureServices"
                      ],
                      "type": "string",
                      "x-ms-client-name": "Bypass",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "Bypass"
                      }
                    },
                    "defaultAction": {
                      "default": "Allow",
                      "description": "Specifies the default action of allow or deny when no other rules match.",
                      "enum": [
                        "Allow",
                        "Deny"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "DefaultAction"
                      }
                    },
                    "ipRules": {
                      "description": "Sets the IP ACL rules",
                      "items": {
                        "description": "IP rule with specific IP or IP range in CIDR format.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of IP ACL rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "value": {
                            "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                            "type": "string",
                            "x-ms-client-name": "IPAddressOrRange"
                          }
                        },
                        "required": [
                          "value"
                        ]
                      },
                      "type": "array"
                    },
                    "virtualNetworkRules": {
                      "description": "Sets the virtual network rules",
                      "items": {
                        "description": "Virtual Network rule.",
                        "properties": {
                          "action": {
                            "default": "Allow",
                            "description": "The action of virtual network rule.",
                            "enum": [
                              "Allow"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Action"
                            }
                          },
                          "id": {
                            "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                            "type": "string",
                            "x-ms-client-name": "VirtualNetworkResourceId"
                          },
                          "state": {
                            "description": "Gets the state of virtual network rule.",
                            "enum": [
                              "provisioning",
                              "deprovisioning",
                              "succeeded",
                              "failed",
                              "networkSourceDeleted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "State"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "defaultAction"
                  ]
                },
                "supportsHttpsTrafficOnly": {
                  "default": false,
                  "description": "Allows https traffic only to storage service if sets to true.",
                  "type": "boolean",
                  "x-ms-client-name": "EnableHttpsTrafficOnly"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountPropertiesUpdateParameters"
          },
          {
            "oldValue": {
              "description": "The parameters used to regenerate the storage account key.",
              "properties": {
                "keyName": {
                  "description": "The name of storage keys that want to be regenerated, possible values are key1, key2.",
                  "type": "string"
                }
              },
              "required": [
                "keyName"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountRegenerateKeyParameters"
          },
          {
            "oldValue": {
              "description": "The parameters that can be provided when updating the storage account properties.",
              "properties": {
                "identity": {
                  "description": "Identity for the resource.",
                  "properties": {
                    "principalId": {
                      "description": "The principal ID of resource identity.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The tenant ID of resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "The identity type.",
                      "enum": [
                        "SystemAssigned"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "IdentityType"
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "kind": {
                  "description": "Optional. Indicates the type of storage account. Currently only StorageV2 value supported by server.",
                  "enum": [
                    "Storage",
                    "StorageV2",
                    "BlobStorage"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "properties": {
                  "description": "The parameters used when updating a storage account.",
                  "properties": {
                    "accessTier": {
                      "description": "Required for storage accounts where kind = BlobStorage. The access tier used for billing.",
                      "enum": [
                        "Hot",
                        "Cool"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AccessTier"
                      }
                    },
                    "customDomain": {
                      "description": "The custom domain assigned to this storage account. This can be set via Update.",
                      "properties": {
                        "name": {
                          "description": "Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
                          "type": "string"
                        },
                        "useSubDomainName": {
                          "description": "Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "encryption": {
                      "description": "The encryption settings on the storage account.",
                      "properties": {
                        "keySource": {
                          "default": "Microsoft.Storage",
                          "description": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault",
                          "enum": [
                            "Microsoft.Storage",
                            "Microsoft.Keyvault"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "KeySource"
                          }
                        },
                        "keyvaultproperties": {
                          "description": "Properties of key vault.",
                          "properties": {
                            "keyname": {
                              "description": "The name of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyName"
                            },
                            "keyvaulturi": {
                              "description": "The Uri of KeyVault.",
                              "type": "string",
                              "x-ms-client-name": "KeyVaultUri"
                            },
                            "keyversion": {
                              "description": "The version of KeyVault key.",
                              "type": "string",
                              "x-ms-client-name": "KeyVersion"
                            }
                          }
                        },
                        "services": {
                          "description": "A list of services that support encryption.",
                          "properties": {
                            "blob": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "file": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "queue": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "table": {
                              "description": "A service that allows server-side encryption to be used.",
                              "properties": {
                                "enabled": {
                                  "description": "A boolean indicating whether or not the service encrypts the data as it is stored.",
                                  "type": "boolean"
                                },
                                "lastEnabledTime": {
                                  "description": "Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.",
                                  "format": "date-time",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "keySource"
                      ]
                    },
                    "networkAcls": {
                      "description": "Network rule set",
                      "properties": {
                        "bypass": {
                          "default": "AzureServices",
                          "description": "Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.",
                          "enum": [
                            "None",
                            "Logging",
                            "Metrics",
                            "AzureServices"
                          ],
                          "type": "string",
                          "x-ms-client-name": "Bypass",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "Bypass"
                          }
                        },
                        "defaultAction": {
                          "default": "Allow",
                          "description": "Specifies the default action of allow or deny when no other rules match.",
                          "enum": [
                            "Allow",
                            "Deny"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "DefaultAction"
                          }
                        },
                        "ipRules": {
                          "description": "Sets the IP ACL rules",
                          "items": {
                            "description": "IP rule with specific IP or IP range in CIDR format.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of IP ACL rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "value": {
                                "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
                                "type": "string",
                                "x-ms-client-name": "IPAddressOrRange"
                              }
                            },
                            "required": [
                              "value"
                            ]
                          },
                          "type": "array"
                        },
                        "virtualNetworkRules": {
                          "description": "Sets the virtual network rules",
                          "items": {
                            "description": "Virtual Network rule.",
                            "properties": {
                              "action": {
                                "default": "Allow",
                                "description": "The action of virtual network rule.",
                                "enum": [
                                  "Allow"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "Action"
                                }
                              },
                              "id": {
                                "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                                "type": "string",
                                "x-ms-client-name": "VirtualNetworkResourceId"
                              },
                              "state": {
                                "description": "Gets the state of virtual network rule.",
                                "enum": [
                                  "provisioning",
                                  "deprovisioning",
                                  "succeeded",
                                  "failed",
                                  "networkSourceDeleted"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "State"
                                }
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "defaultAction"
                      ]
                    },
                    "supportsHttpsTrafficOnly": {
                      "default": false,
                      "description": "Allows https traffic only to storage service if sets to true.",
                      "type": "boolean",
                      "x-ms-client-name": "EnableHttpsTrafficOnly"
                    }
                  }
                },
                "sku": {
                  "description": "The SKU of the storage account.",
                  "properties": {
                    "capabilities": {
                      "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                      "items": {
                        "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "properties": {
                          "name": {
                            "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "kind": {
                      "description": "Indicates the type of storage account.",
                      "enum": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "Kind"
                      }
                    },
                    "locations": {
                      "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "name": {
                      "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                      "enum": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    },
                    "resourceType": {
                      "description": "The type of the resource, usually it is 'storageAccounts'.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "restrictions": {
                      "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                      "items": {
                        "description": "The restriction because of which SKU cannot be used.",
                        "properties": {
                          "reasonCode": {
                            "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                            "enum": [
                              "QuotaId",
                              "NotAvailableForSubscription"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReasonCode"
                            }
                          },
                          "type": {
                            "description": "The type of restrictions. As of now only possible value for this is location.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "values": {
                            "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "tier": {
                      "description": "Gets the sku tier. This is based on the SKU name.",
                      "enum": [
                        "Standard",
                        "Premium"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuTier"
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.",
                  "type": "object"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageAccountUpdateParameters"
          },
          {
            "oldValue": {
              "description": "The response from the List Storage SKUs operation.",
              "properties": {
                "value": {
                  "description": "Get the list result of storage SKUs and their properties.",
                  "items": {
                    "description": "The SKU of the storage account.",
                    "properties": {
                      "capabilities": {
                        "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                        "items": {
                          "description": "The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                          "properties": {
                            "name": {
                              "description": "The name of capability, The capability information in the specified sku, including file encryption, network acls, change notification, etc.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "A string value to indicate states of given capability. Possibly 'true' or 'false'.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "kind": {
                        "description": "Indicates the type of storage account.",
                        "enum": [
                          "Storage",
                          "StorageV2",
                          "BlobStorage"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "locations": {
                        "description": "The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "name": {
                        "description": "Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.",
                        "enum": [
                          "Standard_LRS",
                          "Standard_GRS",
                          "Standard_RAGRS",
                          "Standard_ZRS",
                          "Premium_LRS"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SkuName"
                        }
                      },
                      "resourceType": {
                        "description": "The type of the resource, usually it is 'storageAccounts'.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "restrictions": {
                        "description": "The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.",
                        "items": {
                          "description": "The restriction because of which SKU cannot be used.",
                          "properties": {
                            "reasonCode": {
                              "description": "The reason for the restriction. As of now this can be \"QuotaId\" or \"NotAvailableForSubscription\". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \"NotAvailableForSubscription\" is related to capacity at DC.",
                              "enum": [
                                "QuotaId",
                                "NotAvailableForSubscription"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReasonCode"
                              }
                            },
                            "type": {
                              "description": "The type of restrictions. As of now only possible value for this is location.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "values": {
                              "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                              "items": {
                                "type": "string"
                              },
                              "readOnly": true,
                              "type": "array"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "tier": {
                        "description": "Gets the sku tier. This is based on the SKU name.",
                        "enum": [
                          "Standard",
                          "Premium"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SkuTier"
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/StorageSkuListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A tag of the LegalHold of a blob container.",
              "properties": {
                "objectIdentifier": {
                  "description": "Returns the Object ID of the user who added the tag.",
                  "readOnly": true,
                  "type": "string"
                },
                "tag": {
                  "description": "The tag value.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "Returns the Tenant ID that issued the token for the user who added the tag.",
                  "readOnly": true,
                  "type": "string"
                },
                "timestamp": {
                  "description": "Returns the date and time the tag was added.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "upn": {
                  "description": "Returns the User Principal Name of the user who added the tag.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/TagProperty"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An update history of the ImmutabilityPolicy of a blob container.",
              "properties": {
                "immutabilityPeriodSinceCreationInDays": {
                  "description": "The immutability period for the blobs in the container since the policy creation, in days.",
                  "readOnly": true,
                  "type": "integer"
                },
                "objectIdentifier": {
                  "description": "Returns the Object ID of the user who updated the ImmutabilityPolicy.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.",
                  "readOnly": true,
                  "type": "string"
                },
                "timestamp": {
                  "description": "Returns the date and time the ImmutabilityPolicy was updated.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "update": {
                  "description": "The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.",
                  "enum": [
                    "put",
                    "lock",
                    "extend"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ImmutabilityPolicyUpdateType"
                  }
                },
                "upn": {
                  "description": "Returns the User Principal Name of the user who updated the ImmutabilityPolicy.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/UpdateHistoryProperty"
          },
          {
            "oldValue": {
              "description": "Describes Storage Resource Usage.",
              "properties": {
                "currentValue": {
                  "description": "Gets the current count of the allocated resources in the subscription.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer"
                },
                "limit": {
                  "description": "Gets the maximum count of the resources that can be allocated in the subscription.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer"
                },
                "name": {
                  "description": "The usage names that can be used; currently limited to StorageAccount.",
                  "properties": {
                    "localizedValue": {
                      "description": "Gets a localized string describing the resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "Gets a string describing the resource name.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "unit": {
                  "description": "Gets the unit of measurement.",
                  "enum": [
                    "Count",
                    "Bytes",
                    "Seconds",
                    "Percent",
                    "CountsPerSecond",
                    "BytesPerSecond"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "UsageUnit"
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Usage"
          },
          {
            "oldValue": {
              "description": "The response from the List Usages operation.",
              "properties": {
                "value": {
                  "description": "Gets or sets the list of Storage Resource Usages.",
                  "items": {
                    "description": "Describes Storage Resource Usage.",
                    "properties": {
                      "currentValue": {
                        "description": "Gets the current count of the allocated resources in the subscription.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "limit": {
                        "description": "Gets the maximum count of the resources that can be allocated in the subscription.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "name": {
                        "description": "The usage names that can be used; currently limited to StorageAccount.",
                        "properties": {
                          "localizedValue": {
                            "description": "Gets a localized string describing the resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "Gets a string describing the resource name.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "unit": {
                        "description": "Gets the unit of measurement.",
                        "enum": [
                          "Count",
                          "Bytes",
                          "Seconds",
                          "Percent",
                          "CountsPerSecond",
                          "BytesPerSecond"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "UsageUnit"
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/UsageListResult"
          },
          {
            "oldValue": {
              "description": "The usage names that can be used; currently limited to StorageAccount.",
              "properties": {
                "localizedValue": {
                  "description": "Gets a localized string describing the resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "Gets a string describing the resource name.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/UsageName"
          },
          {
            "oldValue": {
              "description": "Virtual Network rule.",
              "properties": {
                "action": {
                  "default": "Allow",
                  "description": "The action of virtual network rule.",
                  "enum": [
                    "Allow"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Action"
                  }
                },
                "id": {
                  "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
                  "type": "string",
                  "x-ms-client-name": "VirtualNetworkResourceId"
                },
                "state": {
                  "description": "Gets the state of virtual network rule.",
                  "enum": [
                    "provisioning",
                    "deprovisioning",
                    "succeeded",
                    "failed",
                    "networkSourceDeleted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "State"
                  }
                }
              },
              "required": [
                "id"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VirtualNetworkRule"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
              "in": "path",
              "maxLength": 24,
              "minLength": 3,
              "name": "accountName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/AccountName"
          },
          {
            "oldValue": {
              "description": "Client Api Version.",
              "in": "query",
              "name": "api-version",
              "required": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApiVersionParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.",
              "in": "path",
              "maxLength": 63,
              "minLength": 3,
              "name": "containerName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ContainerName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'",
              "enum": [
                "default"
              ],
              "in": "path",
              "name": "immutabilityPolicyName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ImmutabilityPolicyName"
          },
          {
            "oldValue": {
              "description": "The name of the resource group within the user's subscription. The name is case insensitive.",
              "in": "path",
              "maxLength": 90,
              "minLength": 1,
              "name": "resourceGroupName",
              "pattern": "^[-\\w\\._\\(\\)]+$",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceGroupName"
          },
          {
            "oldValue": {
              "description": "Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionIdParameter"
          }
        ],
        "produces": [
          {
            "oldValue": "text/json",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/1"
          }
        ]
      }
    },
    "info": {
      "extensions": {
        "deleted": [
          "x-ms-code-generation-settings"
        ]
      },
      "title": {
        "from": "StorageManagement",
        "to": "StorageManagementClient"
      },
      "version": {
        "from": "2017-10-01",
        "to": "2018-02-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus",
        "/providers/Microsoft.Storage/operations",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "BlobContainers_List": "FunctionDef(\n  name='BlobContainers_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.'))])],\n  type_params=[])",
    "BlobContainers_Create": "FunctionDef(\n  name='BlobContainers_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. '))])],\n  type_params=[])",
    "BlobContainers_Update": "FunctionDef(\n  name='BlobContainers_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. \")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. \"))])],\n  type_params=[])",
    "BlobContainers_Get": "FunctionDef(\n  name='BlobContainers_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Gets properties of a specified container. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets properties of a specified container. '))])],\n  type_params=[])",
    "BlobContainers_Delete": "FunctionDef(\n  name='BlobContainers_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes specified container under its account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes specified container under its account.'))])],\n  type_params=[])",
    "BlobContainers_SetLegalHold": "FunctionDef(\n  name='BlobContainers_SetLegalHold',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/setLegalHold')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_SetLegalHold')),\n        keyword(\n          arg='description',\n          value=Constant(value='Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.'))])],\n  type_params=[])",
    "BlobContainers_ClearLegalHold": "FunctionDef(\n  name='BlobContainers_ClearLegalHold',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/clearLegalHold')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_ClearLegalHold')),\n        keyword(\n          arg='description',\n          value=Constant(value='Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.'))])],\n  type_params=[])",
    "BlobContainers_CreateOrUpdateImmutabilityPolicy": "FunctionDef(\n  name='BlobContainers_CreateOrUpdateImmutabilityPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='immutabilityPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='If_Match',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/immutabilityPolicies/'),\n          FormattedValue(\n            value=Name(id='immutabilityPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='immutabilityPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: immutabilityPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='header_value', ctx=Store())],\n      value=IfExp(\n        test=Compare(\n          left=Name(id='If_Match', ctx=Load()),\n          ops=[\n            IsNot()],\n          comparators=[\n            Constant(value=None)]),\n        body=Name(id='If_Match', ctx=Load()),\n        orelse=Call(\n          func=Attribute(\n            value=Name(id='os', ctx=Load()),\n            attr='getenv',\n            ctx=Load()),\n          args=[\n            Constant(value='IF_MATCH')],\n          keywords=[]))),\n    If(\n      test=Compare(\n        left=Name(id='header_value', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='headers', ctx=Load()),\n              slice=Constant(value='If-Match'),\n              ctx=Store())],\n          value=Name(id='header_value', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_CreateOrUpdateImmutabilityPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.'))])],\n  type_params=[])",
    "BlobContainers_GetImmutabilityPolicy": "FunctionDef(\n  name='BlobContainers_GetImmutabilityPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='immutabilityPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='If_Match',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the existing immutability policy along with the corresponding ETag in response headers and body.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/immutabilityPolicies/'),\n          FormattedValue(\n            value=Name(id='immutabilityPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='immutabilityPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: immutabilityPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='header_value', ctx=Store())],\n      value=IfExp(\n        test=Compare(\n          left=Name(id='If_Match', ctx=Load()),\n          ops=[\n            IsNot()],\n          comparators=[\n            Constant(value=None)]),\n        body=Name(id='If_Match', ctx=Load()),\n        orelse=Call(\n          func=Attribute(\n            value=Name(id='os', ctx=Load()),\n            attr='getenv',\n            ctx=Load()),\n          args=[\n            Constant(value='IF_MATCH')],\n          keywords=[]))),\n    If(\n      test=Compare(\n        left=Name(id='header_value', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='headers', ctx=Load()),\n              slice=Constant(value='If-Match'),\n              ctx=Store())],\n          value=Name(id='header_value', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_GetImmutabilityPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the existing immutability policy along with the corresponding ETag in response headers and body.'))])],\n  type_params=[])",
    "BlobContainers_DeleteImmutabilityPolicy": "FunctionDef(\n  name='BlobContainers_DeleteImmutabilityPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='immutabilityPolicyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='If_Match',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/immutabilityPolicies/'),\n          FormattedValue(\n            value=Name(id='immutabilityPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='immutabilityPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: immutabilityPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='header_value', ctx=Store())],\n      value=IfExp(\n        test=Compare(\n          left=Name(id='If_Match', ctx=Load()),\n          ops=[\n            IsNot()],\n          comparators=[\n            Constant(value=None)]),\n        body=Name(id='If_Match', ctx=Load()),\n        orelse=Call(\n          func=Attribute(\n            value=Name(id='os', ctx=Load()),\n            attr='getenv',\n            ctx=Load()),\n          args=[\n            Constant(value='IF_MATCH')],\n          keywords=[]))),\n    If(\n      test=Compare(\n        left=Name(id='header_value', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='headers', ctx=Load()),\n              slice=Constant(value='If-Match'),\n              ctx=Store())],\n          value=Name(id='header_value', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_DeleteImmutabilityPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.'))])],\n  type_params=[])",
    "BlobContainers_LockImmutabilityPolicy": "FunctionDef(\n  name='BlobContainers_LockImmutabilityPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='If_Match',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/immutabilityPolicies/default/lock')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='header_value', ctx=Store())],\n      value=IfExp(\n        test=Compare(\n          left=Name(id='If_Match', ctx=Load()),\n          ops=[\n            IsNot()],\n          comparators=[\n            Constant(value=None)]),\n        body=Name(id='If_Match', ctx=Load()),\n        orelse=Call(\n          func=Attribute(\n            value=Name(id='os', ctx=Load()),\n            attr='getenv',\n            ctx=Load()),\n          args=[\n            Constant(value='IF_MATCH')],\n          keywords=[]))),\n    If(\n      test=Compare(\n        left=Name(id='header_value', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='headers', ctx=Load()),\n              slice=Constant(value='If-Match'),\n              ctx=Store())],\n          value=Name(id='header_value', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_LockImmutabilityPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.'))])],\n  type_params=[])",
    "BlobContainers_ExtendImmutabilityPolicy": "FunctionDef(\n  name='BlobContainers_ExtendImmutabilityPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='If_Match',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/immutabilityPolicies/default/extend')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='header_value', ctx=Store())],\n      value=IfExp(\n        test=Compare(\n          left=Name(id='If_Match', ctx=Load()),\n          ops=[\n            IsNot()],\n          comparators=[\n            Constant(value=None)]),\n        body=Name(id='If_Match', ctx=Load()),\n        orelse=Call(\n          func=Attribute(\n            value=Name(id='os', ctx=Load()),\n            attr='getenv',\n            ctx=Load()),\n          args=[\n            Constant(value='IF_MATCH')],\n          keywords=[]))),\n    If(\n      test=Compare(\n        left=Name(id='header_value', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='headers', ctx=Load()),\n              slice=Constant(value='If-Match'),\n              ctx=Store())],\n          value=Name(id='header_value', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_ExtendImmutabilityPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.'))])],\n  type_params=[])",
    "BlobContainers_Lease": "FunctionDef(\n  name='BlobContainers_Lease',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='containerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Storage/storageAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/blobServices/default/containers/'),\n          FormattedValue(\n            value=Name(id='containerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/lease')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='containerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: containerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BlobContainers_Lease')),\n        keyword(\n          arg='description',\n          value=Constant(value='The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.'))])],\n  type_params=[])"
  }
}