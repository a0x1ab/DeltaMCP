{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "description": "Error Response.",
              "properties": {
                "code": {
                  "description": "Error code.",
                  "type": "string"
                },
                "message": {
                  "description": "Error message indicating why the operation failed.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Enum to indicate the operation type of the event.",
              "enum": [
                "Create",
                "Replace",
                "Delete",
                "SystemOperation"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "OperationType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/OperationType"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "title": "Resource",
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                  "title": "Proxy Resource",
                  "type": "object"
                }
              ],
              "description": "A private endpoint connection",
              "properties": {
                "properties": {
                  "description": "Properties of a private endpoint connection.",
                  "properties": {
                    "groupId": {
                      "description": "Group id of the private endpoint.",
                      "type": "string"
                    },
                    "privateEndpoint": {
                      "description": "Private endpoint which the connection belongs to.",
                      "properties": {
                        "id": {
                          "description": "Resource id of the private endpoint.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "privateLinkServiceConnectionState": {
                      "description": "Connection State of the Private Endpoint Connection.",
                      "properties": {
                        "actionsRequired": {
                          "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                          "readOnly": true,
                          "type": "string"
                        },
                        "description": {
                          "description": "The private link service connection description.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The private link service connection status.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the private endpoint.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateEndpointConnection"
          },
          {
            "oldValue": {
              "description": "A list of private endpoint connections",
              "properties": {
                "value": {
                  "description": "Array of private endpoint connections",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                            "properties": {
                              "id": {
                                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "title": "Resource",
                            "type": "object",
                            "x-ms-azure-resource": true
                          }
                        ],
                        "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                        "title": "Proxy Resource",
                        "type": "object"
                      }
                    ],
                    "description": "A private endpoint connection",
                    "properties": {
                      "properties": {
                        "description": "Properties of a private endpoint connection.",
                        "properties": {
                          "groupId": {
                            "description": "Group id of the private endpoint.",
                            "type": "string"
                          },
                          "privateEndpoint": {
                            "description": "Private endpoint which the connection belongs to.",
                            "properties": {
                              "id": {
                                "description": "Resource id of the private endpoint.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "privateLinkServiceConnectionState": {
                            "description": "Connection State of the Private Endpoint Connection.",
                            "properties": {
                              "actionsRequired": {
                                "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                                "readOnly": true,
                                "type": "string"
                              },
                              "description": {
                                "description": "The private link service connection description.",
                                "type": "string"
                              },
                              "status": {
                                "description": "The private link service connection status.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the private endpoint.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateEndpointConnectionListResult"
          },
          {
            "oldValue": {
              "description": "Properties of a private endpoint connection.",
              "properties": {
                "groupId": {
                  "description": "Group id of the private endpoint.",
                  "type": "string"
                },
                "privateEndpoint": {
                  "description": "Private endpoint which the connection belongs to.",
                  "properties": {
                    "id": {
                      "description": "Resource id of the private endpoint.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "privateLinkServiceConnectionState": {
                  "description": "Connection State of the Private Endpoint Connection.",
                  "properties": {
                    "actionsRequired": {
                      "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                      "readOnly": true,
                      "type": "string"
                    },
                    "description": {
                      "description": "The private link service connection description.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The private link service connection status.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Provisioning state of the private endpoint.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateEndpointConnectionProperties"
          },
          {
            "oldValue": {
              "description": "Private endpoint which the connection belongs to.",
              "properties": {
                "id": {
                  "description": "Resource id of the private endpoint.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateEndpointProperty"
          },
          {
            "oldValue": {
              "description": "Connection State of the Private Endpoint Connection.",
              "properties": {
                "actionsRequired": {
                  "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                  "readOnly": true,
                  "type": "string"
                },
                "description": {
                  "description": "The private link service connection description.",
                  "type": "string"
                },
                "status": {
                  "description": "The private link service connection status.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateLinkServiceConnectionStateProperty"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure Cosmos DB MongoDB collection event",
              "properties": {
                "id": {
                  "description": "The unique resource Identifier of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of an Azure Cosmos DB MongoDB collection event",
                  "properties": {
                    "resource": {
                      "description": "The resource of an Azure Cosmos DB MongoDB collection event",
                      "properties": {
                        "_rid": {
                          "description": "A system generated property. A unique identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "eventTimestamp": {
                          "description": "The time when this collection event happened.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "operationType": {
                          "description": "Enum to indicate the operation type of the event.",
                          "enum": [
                            "Create",
                            "Replace",
                            "Delete",
                            "SystemOperation"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "OperationType"
                          }
                        },
                        "ownerId": {
                          "description": "The name of this MongoDB collection.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "ownerResourceId": {
                          "description": "The resource ID of this MongoDB collection.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of Azure resource.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbCollectionGetResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an Azure Cosmos DB MongoDB collection event",
              "properties": {
                "resource": {
                  "description": "The resource of an Azure Cosmos DB MongoDB collection event",
                  "properties": {
                    "_rid": {
                      "description": "A system generated property. A unique identifier.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "eventTimestamp": {
                      "description": "The time when this collection event happened.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "operationType": {
                      "description": "Enum to indicate the operation type of the event.",
                      "enum": [
                        "Create",
                        "Replace",
                        "Delete",
                        "SystemOperation"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "OperationType"
                      }
                    },
                    "ownerId": {
                      "description": "The name of this MongoDB collection.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ownerResourceId": {
                      "description": "The resource ID of this MongoDB collection.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbCollectionProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the MongoDB collection events and their properties.",
              "properties": {
                "value": {
                  "description": "List of MongoDB collection events and their properties.",
                  "items": {
                    "description": "An Azure Cosmos DB MongoDB collection event",
                    "properties": {
                      "id": {
                        "description": "The unique resource Identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of an Azure Cosmos DB MongoDB collection event",
                        "properties": {
                          "resource": {
                            "description": "The resource of an Azure Cosmos DB MongoDB collection event",
                            "properties": {
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "eventTimestamp": {
                                "description": "The time when this collection event happened.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "operationType": {
                                "description": "Enum to indicate the operation type of the event.",
                                "enum": [
                                  "Create",
                                  "Replace",
                                  "Delete",
                                  "SystemOperation"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "OperationType"
                                }
                              },
                              "ownerId": {
                                "description": "The name of this MongoDB collection.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "ownerResourceId": {
                                "description": "The resource ID of this MongoDB collection.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbCollectionsListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure Cosmos DB MongoDB database event",
              "properties": {
                "id": {
                  "description": "The unique resource Identifier of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of an Azure Cosmos DB MongoDB database event",
                  "properties": {
                    "resource": {
                      "description": "The resource of an Azure Cosmos DB MongoDB database event",
                      "properties": {
                        "_rid": {
                          "description": "A system generated property. A unique identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "eventTimestamp": {
                          "description": "The time when this database event happened.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "operationType": {
                          "description": "Enum to indicate the operation type of the event.",
                          "enum": [
                            "Create",
                            "Replace",
                            "Delete",
                            "SystemOperation"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "OperationType"
                          }
                        },
                        "ownerId": {
                          "description": "The name of this MongoDB database.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "ownerResourceId": {
                          "description": "The resource ID of this MongoDB database.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of Azure resource.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbDatabaseGetResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an Azure Cosmos DB MongoDB database event",
              "properties": {
                "resource": {
                  "description": "The resource of an Azure Cosmos DB MongoDB database event",
                  "properties": {
                    "_rid": {
                      "description": "A system generated property. A unique identifier.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "eventTimestamp": {
                      "description": "The time when this database event happened.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "operationType": {
                      "description": "Enum to indicate the operation type of the event.",
                      "enum": [
                        "Create",
                        "Replace",
                        "Delete",
                        "SystemOperation"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "OperationType"
                      }
                    },
                    "ownerId": {
                      "description": "The name of this MongoDB database.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ownerResourceId": {
                      "description": "The resource ID of this MongoDB database.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbDatabaseProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the MongoDB database events and their properties.",
              "properties": {
                "value": {
                  "description": "List of MongoDB database events and their properties.",
                  "items": {
                    "description": "An Azure Cosmos DB MongoDB database event",
                    "properties": {
                      "id": {
                        "description": "The unique resource Identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of an Azure Cosmos DB MongoDB database event",
                        "properties": {
                          "resource": {
                            "description": "The resource of an Azure Cosmos DB MongoDB database event",
                            "properties": {
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "eventTimestamp": {
                                "description": "The time when this database event happened.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "operationType": {
                                "description": "Enum to indicate the operation type of the event.",
                                "enum": [
                                  "Create",
                                  "Replace",
                                  "Delete",
                                  "SystemOperation"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "OperationType"
                                }
                              },
                              "ownerId": {
                                "description": "The name of this MongoDB database.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "ownerResourceId": {
                                "description": "The resource ID of this MongoDB database.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbDatabasesListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the restorable MongoDB resources.",
              "properties": {
                "value": {
                  "description": "List of restorable MongoDB resources, including the database and collection names.",
                  "items": {
                    "description": "Specific Databases to restore.",
                    "properties": {
                      "collectionNames": {
                        "description": "The names of the collections available for restore.",
                        "items": {
                          "description": "The name of the collection.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "databaseName": {
                        "description": "The name of the database available for restore.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableMongodbResourcesListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure Cosmos DB SQL container event",
              "properties": {
                "id": {
                  "description": "The unique resource Identifier of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of an Azure Cosmos DB SQL container event",
                  "properties": {
                    "resource": {
                      "description": "The resource of an Azure Cosmos DB SQL container event",
                      "properties": {
                        "_rid": {
                          "description": "A system generated property. A unique identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "container": {
                          "allOf": [
                            {
                              "description": "Cosmos DB SQL container resource object",
                              "properties": {
                                "conflictResolutionPolicy": {
                                  "description": "The conflict resolution policy for the container.",
                                  "properties": {
                                    "conflictResolutionPath": {
                                      "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                      "type": "string"
                                    },
                                    "conflictResolutionProcedure": {
                                      "description": "The procedure to resolve conflicts in the case of custom mode.",
                                      "type": "string"
                                    },
                                    "mode": {
                                      "default": "LastWriterWins",
                                      "description": "Indicates the conflict resolution mode.",
                                      "enum": [
                                        "LastWriterWins",
                                        "Custom"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ConflictResolutionMode"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "defaultTtl": {
                                  "description": "Default time to live",
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "Name of the Cosmos DB SQL container",
                                  "type": "string"
                                },
                                "indexingPolicy": {
                                  "description": "Cosmos DB indexing policy",
                                  "properties": {
                                    "automatic": {
                                      "description": "Indicates if the indexing policy is automatic",
                                      "type": "boolean"
                                    },
                                    "compositeIndexes": {
                                      "description": "List of composite path list",
                                      "items": {
                                        "description": "List of composite path",
                                        "items": {
                                          "properties": {
                                            "order": {
                                              "description": "Sort order for composite paths.",
                                              "enum": [
                                                "Ascending",
                                                "Descending"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "CompositePathSortOrder"
                                              }
                                            },
                                            "path": {
                                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "type": "array"
                                    },
                                    "excludedPaths": {
                                      "description": "List of paths to exclude from indexing",
                                      "items": {
                                        "properties": {
                                          "path": {
                                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "includedPaths": {
                                      "description": "List of paths to include in the indexing",
                                      "items": {
                                        "description": "The paths that are included in indexing",
                                        "properties": {
                                          "indexes": {
                                            "description": "List of indexes for this path",
                                            "items": {
                                              "description": "The indexes for the path.",
                                              "properties": {
                                                "dataType": {
                                                  "default": "String",
                                                  "description": "The datatype for which the indexing behavior is applied to.",
                                                  "enum": [
                                                    "String",
                                                    "Number",
                                                    "Point",
                                                    "Polygon",
                                                    "LineString",
                                                    "MultiPolygon"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "DataType"
                                                  }
                                                },
                                                "kind": {
                                                  "default": "Hash",
                                                  "description": "Indicates the type of index.",
                                                  "enum": [
                                                    "Hash",
                                                    "Range",
                                                    "Spatial"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "IndexKind"
                                                  }
                                                },
                                                "precision": {
                                                  "description": "The precision of the index. -1 is maximum precision.",
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "path": {
                                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "indexingMode": {
                                      "default": "Consistent",
                                      "description": "Indicates the indexing mode.",
                                      "enum": [
                                        "Consistent",
                                        "Lazy",
                                        "None"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "IndexingMode"
                                      }
                                    },
                                    "spatialIndexes": {
                                      "description": "List of spatial specifics",
                                      "items": {
                                        "properties": {
                                          "path": {
                                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                            "type": "string"
                                          },
                                          "types": {
                                            "description": "List of path's spatial type",
                                            "items": {
                                              "description": "Indicates the spatial type of index.",
                                              "enum": [
                                                "Point",
                                                "LineString",
                                                "Polygon",
                                                "MultiPolygon"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "SpatialType"
                                              }
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "partitionKey": {
                                  "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                  "properties": {
                                    "kind": {
                                      "default": "Hash",
                                      "description": "Indicates the kind of algorithm used for partitioning",
                                      "enum": [
                                        "Hash",
                                        "Range"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "PartitionKind"
                                      }
                                    },
                                    "paths": {
                                      "description": "List of paths using which data within the container can be partitioned",
                                      "items": {
                                        "description": "A path. These typically start with root (/path)",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "version": {
                                      "description": "Indicates the version of the partition key definition",
                                      "format": "int32",
                                      "maximum": 2,
                                      "minimum": 1,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "uniqueKeyPolicy": {
                                  "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                  "properties": {
                                    "uniqueKeys": {
                                      "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                      "items": {
                                        "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                        "properties": {
                                          "paths": {
                                            "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                            "items": {
                                              "description": "A path. These typically start with root (/path)",
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                              "properties": {
                                "_etag": {
                                  "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "_rid": {
                                  "description": "A system generated property. A unique identifier.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "_ts": {
                                  "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                  "readOnly": true
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "Cosmos DB SQL container resource object",
                          "properties": {
                            "_self": {
                              "description": "A system generated property that specifies the addressable path of the container resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "eventTimestamp": {
                          "description": "The when this container event happened.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "operationType": {
                          "description": "Enum to indicate the operation type of the event.",
                          "enum": [
                            "Create",
                            "Replace",
                            "Delete",
                            "SystemOperation"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "OperationType"
                          }
                        },
                        "ownerId": {
                          "description": "The name of this SQL container.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "ownerResourceId": {
                          "description": "The resource ID of this SQL container.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of Azure resource.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlContainerGetResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an Azure Cosmos DB SQL container event",
              "properties": {
                "resource": {
                  "description": "The resource of an Azure Cosmos DB SQL container event",
                  "properties": {
                    "_rid": {
                      "description": "A system generated property. A unique identifier.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "container": {
                      "allOf": [
                        {
                          "description": "Cosmos DB SQL container resource object",
                          "properties": {
                            "conflictResolutionPolicy": {
                              "description": "The conflict resolution policy for the container.",
                              "properties": {
                                "conflictResolutionPath": {
                                  "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                  "type": "string"
                                },
                                "conflictResolutionProcedure": {
                                  "description": "The procedure to resolve conflicts in the case of custom mode.",
                                  "type": "string"
                                },
                                "mode": {
                                  "default": "LastWriterWins",
                                  "description": "Indicates the conflict resolution mode.",
                                  "enum": [
                                    "LastWriterWins",
                                    "Custom"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ConflictResolutionMode"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "defaultTtl": {
                              "description": "Default time to live",
                              "type": "integer"
                            },
                            "id": {
                              "description": "Name of the Cosmos DB SQL container",
                              "type": "string"
                            },
                            "indexingPolicy": {
                              "description": "Cosmos DB indexing policy",
                              "properties": {
                                "automatic": {
                                  "description": "Indicates if the indexing policy is automatic",
                                  "type": "boolean"
                                },
                                "compositeIndexes": {
                                  "description": "List of composite path list",
                                  "items": {
                                    "description": "List of composite path",
                                    "items": {
                                      "properties": {
                                        "order": {
                                          "description": "Sort order for composite paths.",
                                          "enum": [
                                            "Ascending",
                                            "Descending"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "CompositePathSortOrder"
                                          }
                                        },
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "excludedPaths": {
                                  "description": "List of paths to exclude from indexing",
                                  "items": {
                                    "properties": {
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "includedPaths": {
                                  "description": "List of paths to include in the indexing",
                                  "items": {
                                    "description": "The paths that are included in indexing",
                                    "properties": {
                                      "indexes": {
                                        "description": "List of indexes for this path",
                                        "items": {
                                          "description": "The indexes for the path.",
                                          "properties": {
                                            "dataType": {
                                              "default": "String",
                                              "description": "The datatype for which the indexing behavior is applied to.",
                                              "enum": [
                                                "String",
                                                "Number",
                                                "Point",
                                                "Polygon",
                                                "LineString",
                                                "MultiPolygon"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "DataType"
                                              }
                                            },
                                            "kind": {
                                              "default": "Hash",
                                              "description": "Indicates the type of index.",
                                              "enum": [
                                                "Hash",
                                                "Range",
                                                "Spatial"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "IndexKind"
                                              }
                                            },
                                            "precision": {
                                              "description": "The precision of the index. -1 is maximum precision.",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "indexingMode": {
                                  "default": "Consistent",
                                  "description": "Indicates the indexing mode.",
                                  "enum": [
                                    "Consistent",
                                    "Lazy",
                                    "None"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "IndexingMode"
                                  }
                                },
                                "spatialIndexes": {
                                  "description": "List of spatial specifics",
                                  "items": {
                                    "properties": {
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      },
                                      "types": {
                                        "description": "List of path's spatial type",
                                        "items": {
                                          "description": "Indicates the spatial type of index.",
                                          "enum": [
                                            "Point",
                                            "LineString",
                                            "Polygon",
                                            "MultiPolygon"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "SpatialType"
                                          }
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "partitionKey": {
                              "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                              "properties": {
                                "kind": {
                                  "default": "Hash",
                                  "description": "Indicates the kind of algorithm used for partitioning",
                                  "enum": [
                                    "Hash",
                                    "Range"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "PartitionKind"
                                  }
                                },
                                "paths": {
                                  "description": "List of paths using which data within the container can be partitioned",
                                  "items": {
                                    "description": "A path. These typically start with root (/path)",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "version": {
                                  "description": "Indicates the version of the partition key definition",
                                  "format": "int32",
                                  "maximum": 2,
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "uniqueKeyPolicy": {
                              "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                              "properties": {
                                "uniqueKeys": {
                                  "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                  "items": {
                                    "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                    "properties": {
                                      "paths": {
                                        "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                        "items": {
                                          "description": "A path. These typically start with root (/path)",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                          "properties": {
                            "_etag": {
                              "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_rid": {
                              "description": "A system generated property. A unique identifier.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_ts": {
                              "description": "A system generated property that denotes the last updated timestamp of the resource.",
                              "readOnly": true
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "description": "Cosmos DB SQL container resource object",
                      "properties": {
                        "_self": {
                          "description": "A system generated property that specifies the addressable path of the container resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "eventTimestamp": {
                      "description": "The when this container event happened.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "operationType": {
                      "description": "Enum to indicate the operation type of the event.",
                      "enum": [
                        "Create",
                        "Replace",
                        "Delete",
                        "SystemOperation"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "OperationType"
                      }
                    },
                    "ownerId": {
                      "description": "The name of this SQL container.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ownerResourceId": {
                      "description": "The resource ID of this SQL container.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlContainerProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the SQL container events and their properties.",
              "properties": {
                "value": {
                  "description": "List of SQL container events and their properties.",
                  "items": {
                    "description": "An Azure Cosmos DB SQL container event",
                    "properties": {
                      "id": {
                        "description": "The unique resource Identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of an Azure Cosmos DB SQL container event",
                        "properties": {
                          "resource": {
                            "description": "The resource of an Azure Cosmos DB SQL container event",
                            "properties": {
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "container": {
                                "allOf": [
                                  {
                                    "description": "Cosmos DB SQL container resource object",
                                    "properties": {
                                      "conflictResolutionPolicy": {
                                        "description": "The conflict resolution policy for the container.",
                                        "properties": {
                                          "conflictResolutionPath": {
                                            "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                            "type": "string"
                                          },
                                          "conflictResolutionProcedure": {
                                            "description": "The procedure to resolve conflicts in the case of custom mode.",
                                            "type": "string"
                                          },
                                          "mode": {
                                            "default": "LastWriterWins",
                                            "description": "Indicates the conflict resolution mode.",
                                            "enum": [
                                              "LastWriterWins",
                                              "Custom"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ConflictResolutionMode"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "defaultTtl": {
                                        "description": "Default time to live",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "Name of the Cosmos DB SQL container",
                                        "type": "string"
                                      },
                                      "indexingPolicy": {
                                        "description": "Cosmos DB indexing policy",
                                        "properties": {
                                          "automatic": {
                                            "description": "Indicates if the indexing policy is automatic",
                                            "type": "boolean"
                                          },
                                          "compositeIndexes": {
                                            "description": "List of composite path list",
                                            "items": {
                                              "description": "List of composite path",
                                              "items": {
                                                "properties": {
                                                  "order": {
                                                    "description": "Sort order for composite paths.",
                                                    "enum": [
                                                      "Ascending",
                                                      "Descending"
                                                    ],
                                                    "type": "string",
                                                    "x-ms-enum": {
                                                      "modelAsString": true,
                                                      "name": "CompositePathSortOrder"
                                                    }
                                                  },
                                                  "path": {
                                                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "type": "array"
                                          },
                                          "excludedPaths": {
                                            "description": "List of paths to exclude from indexing",
                                            "items": {
                                              "properties": {
                                                "path": {
                                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "includedPaths": {
                                            "description": "List of paths to include in the indexing",
                                            "items": {
                                              "description": "The paths that are included in indexing",
                                              "properties": {
                                                "indexes": {
                                                  "description": "List of indexes for this path",
                                                  "items": {
                                                    "description": "The indexes for the path.",
                                                    "properties": {
                                                      "dataType": {
                                                        "default": "String",
                                                        "description": "The datatype for which the indexing behavior is applied to.",
                                                        "enum": [
                                                          "String",
                                                          "Number",
                                                          "Point",
                                                          "Polygon",
                                                          "LineString",
                                                          "MultiPolygon"
                                                        ],
                                                        "type": "string",
                                                        "x-ms-enum": {
                                                          "modelAsString": true,
                                                          "name": "DataType"
                                                        }
                                                      },
                                                      "kind": {
                                                        "default": "Hash",
                                                        "description": "Indicates the type of index.",
                                                        "enum": [
                                                          "Hash",
                                                          "Range",
                                                          "Spatial"
                                                        ],
                                                        "type": "string",
                                                        "x-ms-enum": {
                                                          "modelAsString": true,
                                                          "name": "IndexKind"
                                                        }
                                                      },
                                                      "precision": {
                                                        "description": "The precision of the index. -1 is maximum precision.",
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "path": {
                                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "indexingMode": {
                                            "default": "Consistent",
                                            "description": "Indicates the indexing mode.",
                                            "enum": [
                                              "Consistent",
                                              "Lazy",
                                              "None"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "IndexingMode"
                                            }
                                          },
                                          "spatialIndexes": {
                                            "description": "List of spatial specifics",
                                            "items": {
                                              "properties": {
                                                "path": {
                                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                  "type": "string"
                                                },
                                                "types": {
                                                  "description": "List of path's spatial type",
                                                  "items": {
                                                    "description": "Indicates the spatial type of index.",
                                                    "enum": [
                                                      "Point",
                                                      "LineString",
                                                      "Polygon",
                                                      "MultiPolygon"
                                                    ],
                                                    "type": "string",
                                                    "x-ms-enum": {
                                                      "modelAsString": true,
                                                      "name": "SpatialType"
                                                    }
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "partitionKey": {
                                        "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                        "properties": {
                                          "kind": {
                                            "default": "Hash",
                                            "description": "Indicates the kind of algorithm used for partitioning",
                                            "enum": [
                                              "Hash",
                                              "Range"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "PartitionKind"
                                            }
                                          },
                                          "paths": {
                                            "description": "List of paths using which data within the container can be partitioned",
                                            "items": {
                                              "description": "A path. These typically start with root (/path)",
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "version": {
                                            "description": "Indicates the version of the partition key definition",
                                            "format": "int32",
                                            "maximum": 2,
                                            "minimum": 1,
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "uniqueKeyPolicy": {
                                        "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                        "properties": {
                                          "uniqueKeys": {
                                            "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                            "items": {
                                              "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                              "properties": {
                                                "paths": {
                                                  "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                                  "items": {
                                                    "description": "A path. These typically start with root (/path)",
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "id"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                    "properties": {
                                      "_etag": {
                                        "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                        "readOnly": true,
                                        "type": "string"
                                      },
                                      "_rid": {
                                        "description": "A system generated property. A unique identifier.",
                                        "readOnly": true,
                                        "type": "string"
                                      },
                                      "_ts": {
                                        "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                        "readOnly": true
                                      }
                                    },
                                    "type": "object"
                                  }
                                ],
                                "description": "Cosmos DB SQL container resource object",
                                "properties": {
                                  "_self": {
                                    "description": "A system generated property that specifies the addressable path of the container resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "eventTimestamp": {
                                "description": "The when this container event happened.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "operationType": {
                                "description": "Enum to indicate the operation type of the event.",
                                "enum": [
                                  "Create",
                                  "Replace",
                                  "Delete",
                                  "SystemOperation"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "OperationType"
                                }
                              },
                              "ownerId": {
                                "description": "The name of this SQL container.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "ownerResourceId": {
                                "description": "The resource ID of this SQL container.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlContainersListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure Cosmos DB SQL database event",
              "properties": {
                "id": {
                  "description": "The unique resource Identifier of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the ARM resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of an Azure Cosmos DB SQL database event",
                  "properties": {
                    "resource": {
                      "description": "The resource of an Azure Cosmos DB SQL database event",
                      "properties": {
                        "_rid": {
                          "description": "A system generated property. A unique identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "database": {
                          "allOf": [
                            {
                              "description": "Cosmos DB SQL database resource object",
                              "properties": {
                                "id": {
                                  "description": "Name of the Cosmos DB SQL database",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                              "properties": {
                                "_etag": {
                                  "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "_rid": {
                                  "description": "A system generated property. A unique identifier.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "_ts": {
                                  "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                  "readOnly": true
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "Cosmos DB SQL database resource object",
                          "properties": {
                            "_colls": {
                              "description": "A system generated property that specified the addressable path of the collections resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_self": {
                              "description": "A system generated property that specifies the addressable path of the database resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_users": {
                              "description": "A system generated property that specifies the addressable path of the users resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "eventTimestamp": {
                          "description": "The time when this database event happened.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "operationType": {
                          "description": "Enum to indicate the operation type of the event.",
                          "enum": [
                            "Create",
                            "Replace",
                            "Delete",
                            "SystemOperation"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "OperationType"
                          }
                        },
                        "ownerId": {
                          "description": "The name of the SQL database.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "ownerResourceId": {
                          "description": "The resource ID of the SQL database.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of Azure resource.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlDatabaseGetResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of an Azure Cosmos DB SQL database event",
              "properties": {
                "resource": {
                  "description": "The resource of an Azure Cosmos DB SQL database event",
                  "properties": {
                    "_rid": {
                      "description": "A system generated property. A unique identifier.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "database": {
                      "allOf": [
                        {
                          "description": "Cosmos DB SQL database resource object",
                          "properties": {
                            "id": {
                              "description": "Name of the Cosmos DB SQL database",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                          "properties": {
                            "_etag": {
                              "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_rid": {
                              "description": "A system generated property. A unique identifier.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "_ts": {
                              "description": "A system generated property that denotes the last updated timestamp of the resource.",
                              "readOnly": true
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "description": "Cosmos DB SQL database resource object",
                      "properties": {
                        "_colls": {
                          "description": "A system generated property that specified the addressable path of the collections resource.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "_self": {
                          "description": "A system generated property that specifies the addressable path of the database resource.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "_users": {
                          "description": "A system generated property that specifies the addressable path of the users resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "eventTimestamp": {
                      "description": "The time when this database event happened.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "operationType": {
                      "description": "Enum to indicate the operation type of the event.",
                      "enum": [
                        "Create",
                        "Replace",
                        "Delete",
                        "SystemOperation"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "OperationType"
                      }
                    },
                    "ownerId": {
                      "description": "The name of the SQL database.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "ownerResourceId": {
                      "description": "The resource ID of the SQL database.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlDatabaseProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the SQL database events and their properties.",
              "properties": {
                "value": {
                  "description": "List of SQL database events and their properties.",
                  "items": {
                    "description": "An Azure Cosmos DB SQL database event",
                    "properties": {
                      "id": {
                        "description": "The unique resource Identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of an Azure Cosmos DB SQL database event",
                        "properties": {
                          "resource": {
                            "description": "The resource of an Azure Cosmos DB SQL database event",
                            "properties": {
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "database": {
                                "allOf": [
                                  {
                                    "description": "Cosmos DB SQL database resource object",
                                    "properties": {
                                      "id": {
                                        "description": "Name of the Cosmos DB SQL database",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "id"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                    "properties": {
                                      "_etag": {
                                        "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                        "readOnly": true,
                                        "type": "string"
                                      },
                                      "_rid": {
                                        "description": "A system generated property. A unique identifier.",
                                        "readOnly": true,
                                        "type": "string"
                                      },
                                      "_ts": {
                                        "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                        "readOnly": true
                                      }
                                    },
                                    "type": "object"
                                  }
                                ],
                                "description": "Cosmos DB SQL database resource object",
                                "properties": {
                                  "_colls": {
                                    "description": "A system generated property that specified the addressable path of the collections resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "_self": {
                                    "description": "A system generated property that specifies the addressable path of the database resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "_users": {
                                    "description": "A system generated property that specifies the addressable path of the users resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "eventTimestamp": {
                                "description": "The time when this database event happened.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "operationType": {
                                "description": "Enum to indicate the operation type of the event.",
                                "enum": [
                                  "Create",
                                  "Replace",
                                  "Delete",
                                  "SystemOperation"
                                ],
                                "readOnly": true,
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "OperationType"
                                }
                              },
                              "ownerId": {
                                "description": "The name of the SQL database.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "ownerResourceId": {
                                "description": "The resource ID of the SQL database.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlDatabasesListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The List operation response, that contains the restorable SQL resources.",
              "properties": {
                "value": {
                  "description": "List of restorable SQL resources, including the database and collection names.",
                  "items": {
                    "description": "Specific Databases to restore.",
                    "properties": {
                      "collectionNames": {
                        "description": "The names of the collections available for restore.",
                        "items": {
                          "description": "The name of the collection.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "databaseName": {
                        "description": "The name of the database available for restore.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/RestorableSqlResourcesListResult"
          }
        ],
        "parameters": [
          {
            "oldValue": {
              "description": "The name of the private endpoint connection.",
              "in": "path",
              "name": "privateEndpointConnectionName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PrivateEndpointConnectionNameParameter"
          },
          {
            "oldValue": {
              "description": "Cosmos DB database account name.",
              "in": "path",
              "maxLength": 50,
              "minLength": 3,
              "name": "accountName",
              "pattern": "^[a-z0-9]+(-[a-z0-9]+)*",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/accountNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource ID of the MongoDB database.",
              "in": "query",
              "name": "restorableMongodbDatabaseRid",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/restorableMongodbDatabaseRidParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource ID of the SQL database.",
              "in": "query",
              "name": "restorableSqlDatabaseRid",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/restorableSqlDatabaseRidParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The location where the restorable resources are located.",
              "in": "query",
              "name": "restoreLocation",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/restoreLocationParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The timestamp when the restorable resources existed.",
              "in": "query",
              "name": "restoreTimestampInUtc",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/restoreTimestampInUtcParameter"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2019-08-01-preview",
        "to": "2020-06-01-preview"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbResources",
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlContainers",
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlDatabases",
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlResources",
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbCollections",
        "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbDatabases"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections"
      ]
    }
  },
  "tools_a": {
    "PrivateEndpointConnections_ListByDatabaseAccount": "FunctionDef(\n  name='PrivateEndpointConnections_ListByDatabaseAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all private endpoint connections on a Cosmos DB account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/databaseAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_ListByDatabaseAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='List all private endpoint connections on a Cosmos DB account.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Get": "FunctionDef(\n  name='PrivateEndpointConnections_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a private endpoint connection.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/databaseAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a private endpoint connection.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_CreateOrUpdate": "FunctionDef(\n  name='PrivateEndpointConnections_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Approve or reject a private endpoint connection with a given name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/databaseAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Approve or reject a private endpoint connection with a given name.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Delete": "FunctionDef(\n  name='PrivateEndpointConnections_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes a private endpoint connection with a given name.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/databaseAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes a private endpoint connection with a given name.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "RestorableSqlDatabases_List": "FunctionDef(\n  name='RestorableSqlDatabases_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableSqlDatabases')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableSqlDatabases_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\"))])],\n  type_params=[])",
    "RestorableSqlContainers_List": "FunctionDef(\n  name='RestorableSqlContainers_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='restorableSqlDatabaseRid',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableSqlContainers')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restorableSqlDatabaseRid', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restorableSqlDatabaseRid'),\n              ctx=Store())],\n          value=Name(id='restorableSqlDatabaseRid', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableSqlContainers_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\"))])],\n  type_params=[])",
    "RestorableSqlResources_List": "FunctionDef(\n  name='RestorableSqlResources_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='restoreLocation',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='restoreTimestampInUtc',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value=\"Return a list of database and container combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableSqlResources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restoreLocation', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restoreLocation'),\n              ctx=Store())],\n          value=Name(id='restoreLocation', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restoreTimestampInUtc', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restoreTimestampInUtc'),\n              ctx=Store())],\n          value=Name(id='restoreTimestampInUtc', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableSqlResources_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Return a list of database and container combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\"))])],\n  type_params=[])",
    "RestorableMongodbDatabases_List": "FunctionDef(\n  name='RestorableMongodbDatabases_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires  'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableMongodbDatabases')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableMongodbDatabases_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires  'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\"))])],\n  type_params=[])",
    "RestorableMongodbCollections_List": "FunctionDef(\n  name='RestorableMongodbCollections_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='restorableMongodbDatabaseRid',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableMongodbCollections')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restorableMongodbDatabaseRid', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restorableMongodbDatabaseRid'),\n              ctx=Store())],\n          value=Name(id='restorableMongodbDatabaseRid', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableMongodbCollections_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\"))])],\n  type_params=[])",
    "RestorableMongodbResources_List": "FunctionDef(\n  name='RestorableMongodbResources_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='instanceId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='restoreLocation',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='restoreTimestampInUtc',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value=\"Return a list of database and collection combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.DocumentDB/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableDatabaseAccounts/'),\n          FormattedValue(\n            value=Name(id='instanceId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restorableMongodbResources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='instanceId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: instanceId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restoreLocation', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restoreLocation'),\n              ctx=Store())],\n          value=Name(id='restoreLocation', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='restoreTimestampInUtc', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='restoreTimestampInUtc'),\n              ctx=Store())],\n          value=Name(id='restoreTimestampInUtc', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='RestorableMongodbResources_List')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Return a list of database and collection combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\"))])],\n  type_params=[])"
  }
}