{
  "oasdiff": {
    "paths": {
      "deleted": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits": {
          "operations": {
            "deleted": {
              "get": {
                "tags": [
                  "QuotaInformation"
                ],
                "description": "Get a list of current service limits (quota) and usages of all the resources. The response from List API can be leveraged to submit quota update requests.",
                "operationId": "Quota_List",
                "x-ms-examples": {
                  "Quotas_listUsagesForCompute": {
                    "$ref": "./examples/getComputeUsages.json"
                  },
                  "Quotas_listUsagesMachineLearningServices": {
                    "$ref": "./examples/getMachineLearningServicesUsages.json"
                  },
                  "Quotas_listUsagesForMsSql": {
                    "$ref": "./examples/getMsSqlUsages.json"
                  }
                },
                "parameters": [
                  {
                    "$ref": "#/parameters/SubscriptionIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ProviderIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/LocationIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. Quota information will be returned as response with pagination.",
                    "schema": {
                      "$ref": "#/definitions/QuotaLimits"
                    },
                    "headers": {
                      "ETag": {
                        "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                        "type": "string"
                      }
                    }
                  },
                  "default": {
                    "description": "Error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ExceptionResponse"
                    }
                  }
                },
                "x-ms-pageable": {
                  "nextLinkName": "nextLink"
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}": {
          "operations": {
            "deleted": {
              "put": {
                "tags": [
                  "QuotaInformation"
                ],
                "description": "Create or update the service limits (quota) of a resource to requested value.\n Steps:\r\n  1. Make the Get request to get the quota information for specific resource.\r\n  2. To increase the quota, update the limit field in the response from Get request to new value.\r\n  3. Submit the JSON to the quota request API to update the quota.\r\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.",
                "operationId": "Quota_CreateOrUpdate",
                "x-ms-examples": {
                  "Quotas_Request_ForCompute": {
                    "$ref": "./examples/putComputeOneSkuQuotaRequest.json"
                  },
                  "Quotas_Request_ForMachineLearningServices_DedicatedResource": {
                    "$ref": "./examples/putMachineLearningServicesQuotaRequestDedicated.json"
                  },
                  "Quotas_Request_ForMachineLearningServices_LowPriorityResource": {
                    "$ref": "./examples/putMachineLearningServicesQuotaRequestLowPriority.json"
                  }
                },
                "x-ms-long-running-operation": true,
                "x-ms-long-running-operation-options": {
                  "final-state-via": "location"
                },
                "parameters": [
                  {
                    "$ref": "#/parameters/SubscriptionIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ProviderIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/LocationIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ResourceNameInParameters"
                  },
                  {
                    "$ref": "#/parameters/ApiVersionParameter"
                  },
                  {
                    "name": "createQuotaRequest",
                    "in": "body",
                    "description": "Quota requests payload.",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/CurrentQuotaLimitBase"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. Returns Quota requests details.",
                    "schema": {
                      "$ref": "#/definitions/QuotaRequestOneResourceSubmitResponse"
                    }
                  },
                  "201": {
                    "description": "The request is accepted and is being processed. Please use requestId to check the status.",
                    "schema": {
                      "$ref": "#/definitions/QuotaRequestSubmitResponse201"
                    }
                  },
                  "default": {
                    "description": "Error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ExceptionResponse"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Quota_CreateOrUpdate": "FunctionDef(name='Quota_CreateOrUpdate', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='providerId', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='resourceName', annotation=Name(id='str', ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create or update the service limits (quota) of a resource to requested value.  Steps:    1. Make the Get request to get the quota information for specific resource.    2. To increase the quota, update the limit field in the response from Get request to new value.    3. Submit the JSON to the quota request API to update the quota.    The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Capacity/resourceProviders/'), FormattedValue(value=Name(id='providerId', ctx=Load()), conversion=-1), Constant(value='/locations/'), FormattedValue(value=Name(id='location', ctx=Load()), conversion=-1), Constant(value='/serviceLimits/'), FormattedValue(value=Name(id='resourceName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='providerId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: providerId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: location')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Quota_CreateOrUpdate')), keyword(arg='description', value=Constant(value='Create or update the service limits (quota) of a resource to requested value.\\n Steps:\\r\\n  1. Make the Get request to get the quota information for specific resource.\\r\\n  2. To increase the quota, update the limit field in the response from Get request to new value.\\r\\n  3. Submit the JSON to the quota request API to update the quota.\\r\\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.'))])])"
  },
  "tools_b": {}
}