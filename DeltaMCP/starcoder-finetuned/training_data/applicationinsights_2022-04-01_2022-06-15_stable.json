{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "A header to add to the WebTest.",
              "properties": {
                "key": {
                  "description": "The name of the header.",
                  "type": "string",
                  "x-ms-client-name": "headerFieldName"
                },
                "value": {
                  "description": "The value of the header.",
                  "type": "string",
                  "x-ms-client-name": "headerFieldValue"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/HeaderField"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A container holding only the Tags for a resource, allowing the user to update the tags on a WebTest instance.",
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/TagsResource"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An Application Insights WebTest definition.",
              "properties": {
                "kind": {
                  "default": "ping",
                  "description": "The kind of WebTest that this web test watches. Choices are ping, multistep and standard.",
                  "enum": [
                    "ping",
                    "multistep",
                    "standard"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WebTestKind"
                  }
                },
                "properties": {
                  "description": "Metadata describing a web test for an Azure resource.",
                  "properties": {
                    "Configuration": {
                      "description": "An XML configuration specification for a WebTest.",
                      "properties": {
                        "WebTest": {
                          "description": "The XML specification of a WebTest to run against an application.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "Description": {
                      "description": "User defined description for this WebTest.",
                      "type": "string"
                    },
                    "Enabled": {
                      "description": "Is the test actively being monitored.",
                      "type": "boolean"
                    },
                    "Frequency": {
                      "default": 300,
                      "description": "Interval in seconds between test runs for this WebTest. Default value is 300.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "Kind": {
                      "default": "ping",
                      "description": "The kind of web test this is, valid choices are ping, multistep and standard.",
                      "enum": [
                        "ping",
                        "multistep",
                        "standard"
                      ],
                      "type": "string",
                      "x-ms-client-name": "WebTestKind",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WebTestKind"
                      }
                    },
                    "Locations": {
                      "description": "A list of where to physically run the tests from to give global coverage for accessibility of your application.",
                      "items": {
                        "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
                        "properties": {
                          "Id": {
                            "description": "Location ID for the WebTest to run from.",
                            "type": "string",
                            "x-ms-client-name": "location"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": [
                        "Id"
                      ]
                    },
                    "Name": {
                      "description": "User defined name if this WebTest.",
                      "type": "string",
                      "x-ms-client-name": "WebTestName"
                    },
                    "Request": {
                      "description": "The collection of request properties",
                      "properties": {
                        "FollowRedirects": {
                          "description": "Follow redirects for this web test.",
                          "type": "boolean"
                        },
                        "Headers": {
                          "description": "List of headers and their values to add to the WebTest call.",
                          "items": {
                            "description": "A header to add to the WebTest.",
                            "properties": {
                              "key": {
                                "description": "The name of the header.",
                                "type": "string",
                                "x-ms-client-name": "headerFieldName"
                              },
                              "value": {
                                "description": "The value of the header.",
                                "type": "string",
                                "x-ms-client-name": "headerFieldValue"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array",
                          "x-ms-identifiers": [
                            "key"
                          ]
                        },
                        "HttpVerb": {
                          "description": "Http verb to use for this web test.",
                          "type": "string"
                        },
                        "ParseDependentRequests": {
                          "description": "Parse Dependent request for this WebTest.",
                          "type": "boolean"
                        },
                        "RequestBody": {
                          "description": "Base64 encoded string body to send with this web test.",
                          "type": "string"
                        },
                        "RequestUrl": {
                          "description": "Url location to test.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "RetryEnabled": {
                      "description": "Allow for retries should this WebTest fail.",
                      "type": "boolean"
                    },
                    "SyntheticMonitorId": {
                      "description": "Unique ID of this WebTest. This is typically the same value as the Name field.",
                      "type": "string"
                    },
                    "Timeout": {
                      "default": 30,
                      "description": "Seconds until this WebTest will timeout and fail. Default value is 30.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "ValidationRules": {
                      "description": "The collection of validation rule properties",
                      "properties": {
                        "ContentValidation": {
                          "description": "The collection of content validation properties",
                          "properties": {
                            "ContentMatch": {
                              "description": "Content to look for in the return of the WebTest.  Must not be null or empty.",
                              "type": "string"
                            },
                            "IgnoreCase": {
                              "description": "When set, this value makes the ContentMatch validation case insensitive.",
                              "type": "boolean"
                            },
                            "PassIfTextFound": {
                              "description": "When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "ExpectedHttpStatusCode": {
                          "description": "Validate that the WebTest returns the http status code provided.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "IgnoreHttpStatusCode": {
                          "description": "When set, validation will ignore the status code.",
                          "type": "boolean"
                        },
                        "SSLCertRemainingLifetimeCheck": {
                          "description": "A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "SSLCheck": {
                          "description": "Checks to see if the SSL cert is still valid.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "Name",
                    "Kind",
                    "Locations",
                    "SyntheticMonitorId"
                  ]
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/WebTest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
              "properties": {
                "Id": {
                  "description": "Location ID for the WebTest to run from.",
                  "type": "string",
                  "x-ms-client-name": "location"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/WebTestGeolocation"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata describing a web test for an Azure resource.",
              "properties": {
                "Configuration": {
                  "description": "An XML configuration specification for a WebTest.",
                  "properties": {
                    "WebTest": {
                      "description": "The XML specification of a WebTest to run against an application.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "User defined description for this WebTest.",
                  "type": "string"
                },
                "Enabled": {
                  "description": "Is the test actively being monitored.",
                  "type": "boolean"
                },
                "Frequency": {
                  "default": 300,
                  "description": "Interval in seconds between test runs for this WebTest. Default value is 300.",
                  "format": "int32",
                  "type": "integer"
                },
                "Kind": {
                  "default": "ping",
                  "description": "The kind of web test this is, valid choices are ping, multistep and standard.",
                  "enum": [
                    "ping",
                    "multistep",
                    "standard"
                  ],
                  "type": "string",
                  "x-ms-client-name": "WebTestKind",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WebTestKind"
                  }
                },
                "Locations": {
                  "description": "A list of where to physically run the tests from to give global coverage for accessibility of your application.",
                  "items": {
                    "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
                    "properties": {
                      "Id": {
                        "description": "Location ID for the WebTest to run from.",
                        "type": "string",
                        "x-ms-client-name": "location"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": [
                    "Id"
                  ]
                },
                "Name": {
                  "description": "User defined name if this WebTest.",
                  "type": "string",
                  "x-ms-client-name": "WebTestName"
                },
                "Request": {
                  "description": "The collection of request properties",
                  "properties": {
                    "FollowRedirects": {
                      "description": "Follow redirects for this web test.",
                      "type": "boolean"
                    },
                    "Headers": {
                      "description": "List of headers and their values to add to the WebTest call.",
                      "items": {
                        "description": "A header to add to the WebTest.",
                        "properties": {
                          "key": {
                            "description": "The name of the header.",
                            "type": "string",
                            "x-ms-client-name": "headerFieldName"
                          },
                          "value": {
                            "description": "The value of the header.",
                            "type": "string",
                            "x-ms-client-name": "headerFieldValue"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": [
                        "key"
                      ]
                    },
                    "HttpVerb": {
                      "description": "Http verb to use for this web test.",
                      "type": "string"
                    },
                    "ParseDependentRequests": {
                      "description": "Parse Dependent request for this WebTest.",
                      "type": "boolean"
                    },
                    "RequestBody": {
                      "description": "Base64 encoded string body to send with this web test.",
                      "type": "string"
                    },
                    "RequestUrl": {
                      "description": "Url location to test.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "RetryEnabled": {
                  "description": "Allow for retries should this WebTest fail.",
                  "type": "boolean"
                },
                "SyntheticMonitorId": {
                  "description": "Unique ID of this WebTest. This is typically the same value as the Name field.",
                  "type": "string"
                },
                "Timeout": {
                  "default": 30,
                  "description": "Seconds until this WebTest will timeout and fail. Default value is 30.",
                  "format": "int32",
                  "type": "integer"
                },
                "ValidationRules": {
                  "description": "The collection of validation rule properties",
                  "properties": {
                    "ContentValidation": {
                      "description": "The collection of content validation properties",
                      "properties": {
                        "ContentMatch": {
                          "description": "Content to look for in the return of the WebTest.  Must not be null or empty.",
                          "type": "string"
                        },
                        "IgnoreCase": {
                          "description": "When set, this value makes the ContentMatch validation case insensitive.",
                          "type": "boolean"
                        },
                        "PassIfTextFound": {
                          "description": "When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "ExpectedHttpStatusCode": {
                      "description": "Validate that the WebTest returns the http status code provided.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "IgnoreHttpStatusCode": {
                      "description": "When set, validation will ignore the status code.",
                      "type": "boolean"
                    },
                    "SSLCertRemainingLifetimeCheck": {
                      "description": "A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "SSLCheck": {
                      "description": "Checks to see if the SSL cert is still valid.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "Kind",
                "Locations",
                "SyntheticMonitorId"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/WebTestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure resource object",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/WebtestsResource"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                          "properties": {
                            "id": {
                              "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the resource",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "title": "Resource",
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                      "properties": {
                        "location": {
                          "description": "The geo-location where the resource lives",
                          "type": "string",
                          "x-ms-mutability": [
                            "read",
                            "create"
                          ]
                        },
                        "tags": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Resource tags.",
                          "type": "object",
                          "x-ms-mutability": [
                            "read",
                            "create",
                            "update"
                          ]
                        }
                      },
                      "required": [
                        "location"
                      ],
                      "title": "Tracked Resource",
                      "type": "object"
                    }
                  ],
                  "description": "An azure resource object",
                  "properties": {
                    "etag": {
                      "description": "Resource etag",
                      "type": "string"
                    },
                    "identity": {
                      "allOf": [
                        {
                          "description": "Managed service identity (system assigned and/or user assigned identities)",
                          "properties": {
                            "principalId": {
                              "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                              "format": "uuid",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tenantId": {
                              "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                              "format": "uuid",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
                              "enum": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned",
                                "SystemAssigned,UserAssigned"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ManagedServiceIdentityType"
                              }
                            },
                            "userAssignedIdentities": {
                              "additionalProperties": {
                                "description": "User assigned identity properties",
                                "properties": {
                                  "clientId": {
                                    "description": "The client ID of the assigned identity.",
                                    "format": "uuid",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "principalId": {
                                    "description": "The principal ID of the assigned identity.",
                                    "format": "uuid",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "description": "The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
                              "title": "User-Assigned Identities",
                              "type": "object"
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Identity used for BYOS"
                    },
                    "kind": {
                      "description": "The kind of workbook. Only valid value is shared.",
                      "enum": [
                        "shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "WorkbookSharedTypeKind"
                      }
                    }
                  },
                  "type": "object",
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A workbook definition.",
              "properties": {
                "properties": {
                  "description": "Properties that contain a workbook.",
                  "properties": {
                    "category": {
                      "description": "Workbook category, as defined by the user at creation time.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the workbook.",
                      "type": "string",
                      "x-nullable": true
                    },
                    "displayName": {
                      "description": "The user-defined name (display name) of the workbook.",
                      "type": "string"
                    },
                    "revision": {
                      "description": "The unique revision id for this workbook definition",
                      "readOnly": true,
                      "type": "string",
                      "x-nullable": true
                    },
                    "serializedData": {
                      "description": "Configuration of this particular workbook. Configuration data is a string containing valid JSON",
                      "type": "string",
                      "x-nullable": true
                    },
                    "sourceId": {
                      "description": "ResourceId for a source resource.",
                      "type": "string"
                    },
                    "storageUri": {
                      "description": "The resourceId to the storage account when bring your own storage is used",
                      "type": "string",
                      "x-nullable": true
                    },
                    "tags": {
                      "description": "Being deprecated, please use the other tags field",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timeModified": {
                      "description": "Date and time in UTC of the last modification that was made to this workbook definition.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "userId": {
                      "description": "Unique user id of the specific user that owns this workbook.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "version": {
                      "description": "Workbook schema version format, like 'Notebook/1.0', which should match the workbook in serializedData",
                      "type": "string"
                    }
                  },
                  "required": [
                    "displayName",
                    "category",
                    "serializedData"
                  ],
                  "type": "object"
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Workbook"
          },
          {
            "oldValue": {
              "description": "Error response.",
              "properties": {
                "error": {
                  "description": "Error definition.",
                  "properties": {
                    "code": {
                      "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "innererror": {
                      "description": "Error details",
                      "properties": {
                        "trace": {
                          "description": "detailed error trace",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Description of the error.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookError"
          },
          {
            "oldValue": {
              "description": "Error definition.",
              "properties": {
                "code": {
                  "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                  "readOnly": true,
                  "type": "string"
                },
                "innererror": {
                  "description": "Error details",
                  "properties": {
                    "trace": {
                      "description": "detailed error trace",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "message": {
                  "description": "Description of the error.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookErrorDefinition"
          },
          {
            "oldValue": {
              "description": "Error details",
              "properties": {
                "trace": {
                  "description": "detailed error trace",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookInnerErrorTrace"
          },
          {
            "oldValue": {
              "description": "Properties that contain a workbook.",
              "properties": {
                "category": {
                  "description": "Workbook category, as defined by the user at creation time.",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the workbook.",
                  "type": "string",
                  "x-nullable": true
                },
                "displayName": {
                  "description": "The user-defined name (display name) of the workbook.",
                  "type": "string"
                },
                "revision": {
                  "description": "The unique revision id for this workbook definition",
                  "readOnly": true,
                  "type": "string",
                  "x-nullable": true
                },
                "serializedData": {
                  "description": "Configuration of this particular workbook. Configuration data is a string containing valid JSON",
                  "type": "string",
                  "x-nullable": true
                },
                "sourceId": {
                  "description": "ResourceId for a source resource.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "The resourceId to the storage account when bring your own storage is used",
                  "type": "string",
                  "x-nullable": true
                },
                "tags": {
                  "description": "Being deprecated, please use the other tags field",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "timeModified": {
                  "description": "Date and time in UTC of the last modification that was made to this workbook definition.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "userId": {
                  "description": "Unique user id of the specific user that owns this workbook.",
                  "readOnly": true,
                  "type": "string"
                },
                "version": {
                  "description": "Workbook schema version format, like 'Notebook/1.0', which should match the workbook in serializedData",
                  "type": "string"
                }
              },
              "required": [
                "displayName",
                "category",
                "serializedData"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookProperties"
          },
          {
            "oldValue": {
              "description": "Properties that contain a workbook for PATCH operation.",
              "properties": {
                "category": {
                  "description": "Workbook category, as defined by the user at creation time.",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the workbook.",
                  "type": "string",
                  "x-nullable": true
                },
                "displayName": {
                  "description": "The user-defined name (display name) of the workbook.",
                  "type": "string"
                },
                "revision": {
                  "description": "The unique revision id for this workbook definition",
                  "type": "string",
                  "x-nullable": true
                },
                "serializedData": {
                  "description": "Configuration of this particular workbook. Configuration data is a string containing valid JSON",
                  "type": "string"
                },
                "tags": {
                  "description": "A list of 0 or more tags that are associated with this workbook definition",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookPropertiesUpdateParameters"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                      "properties": {
                        "id": {
                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the resource",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "title": "Resource",
                      "type": "object",
                      "x-ms-azure-resource": true
                    }
                  ],
                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                  "properties": {
                    "location": {
                      "description": "The geo-location where the resource lives",
                      "type": "string",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "type": "object",
                      "x-ms-mutability": [
                        "read",
                        "create",
                        "update"
                      ]
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "title": "Tracked Resource",
                  "type": "object"
                }
              ],
              "description": "An azure resource object",
              "properties": {
                "etag": {
                  "description": "Resource etag",
                  "type": "string"
                },
                "identity": {
                  "allOf": [
                    {
                      "description": "Managed service identity (system assigned and/or user assigned identities)",
                      "properties": {
                        "principalId": {
                          "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                          "format": "uuid",
                          "readOnly": true,
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                          "format": "uuid",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
                          "enum": [
                            "None",
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned,UserAssigned"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ManagedServiceIdentityType"
                          }
                        },
                        "userAssignedIdentities": {
                          "additionalProperties": {
                            "description": "User assigned identity properties",
                            "properties": {
                              "clientId": {
                                "description": "The client ID of the assigned identity.",
                                "format": "uuid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "principalId": {
                                "description": "The principal ID of the assigned identity.",
                                "format": "uuid",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "description": "The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
                          "title": "User-Assigned Identities",
                          "type": "object"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Identity used for BYOS"
                },
                "kind": {
                  "description": "The kind of workbook. Only valid value is shared.",
                  "enum": [
                    "shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "WorkbookSharedTypeKind"
                  }
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookResource"
          },
          {
            "oldValue": {
              "description": "The parameters that can be provided when updating workbook properties properties.",
              "properties": {
                "kind": {
                  "description": "The kind of workbook. Only valid value is shared.",
                  "enum": [
                    "shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "WorkbookUpdateSharedTypeKind"
                  }
                },
                "properties": {
                  "description": "Properties that contain a workbook for PATCH operation.",
                  "properties": {
                    "category": {
                      "description": "Workbook category, as defined by the user at creation time.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the workbook.",
                      "type": "string",
                      "x-nullable": true
                    },
                    "displayName": {
                      "description": "The user-defined name (display name) of the workbook.",
                      "type": "string"
                    },
                    "revision": {
                      "description": "The unique revision id for this workbook definition",
                      "type": "string",
                      "x-nullable": true
                    },
                    "serializedData": {
                      "description": "Configuration of this particular workbook. Configuration data is a string containing valid JSON",
                      "type": "string"
                    },
                    "tags": {
                      "description": "A list of 0 or more tags that are associated with this workbook definition",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags.",
                  "type": "object",
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookUpdateParameters"
          },
          {
            "oldValue": {
              "description": "Workbook list result.",
              "properties": {
                "nextLink": {
                  "type": "string"
                },
                "value": {
                  "description": "An array of workbooks.",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                "properties": {
                                  "id": {
                                    "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the resource",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "title": "Resource",
                                "type": "object",
                                "x-ms-azure-resource": true
                              }
                            ],
                            "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                            "properties": {
                              "location": {
                                "description": "The geo-location where the resource lives",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "tags": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Resource tags.",
                                "type": "object",
                                "x-ms-mutability": [
                                  "read",
                                  "create",
                                  "update"
                                ]
                              }
                            },
                            "required": [
                              "location"
                            ],
                            "title": "Tracked Resource",
                            "type": "object"
                          }
                        ],
                        "description": "An azure resource object",
                        "properties": {
                          "etag": {
                            "description": "Resource etag",
                            "type": "string"
                          },
                          "identity": {
                            "allOf": [
                              {
                                "description": "Managed service identity (system assigned and/or user assigned identities)",
                                "properties": {
                                  "principalId": {
                                    "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                                    "format": "uuid",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                                    "format": "uuid",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
                                    "enum": [
                                      "None",
                                      "SystemAssigned",
                                      "UserAssigned",
                                      "SystemAssigned,UserAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ManagedServiceIdentityType"
                                    }
                                  },
                                  "userAssignedIdentities": {
                                    "additionalProperties": {
                                      "description": "User assigned identity properties",
                                      "properties": {
                                        "clientId": {
                                          "description": "The client ID of the assigned identity.",
                                          "format": "uuid",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "principalId": {
                                          "description": "The principal ID of the assigned identity.",
                                          "format": "uuid",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "description": "The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
                                    "title": "User-Assigned Identities",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            ],
                            "description": "Identity used for BYOS"
                          },
                          "kind": {
                            "description": "The kind of workbook. Only valid value is shared.",
                            "enum": [
                              "shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "WorkbookSharedTypeKind"
                            }
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "A workbook definition.",
                    "properties": {
                      "properties": {
                        "description": "Properties that contain a workbook.",
                        "properties": {
                          "category": {
                            "description": "Workbook category, as defined by the user at creation time.",
                            "type": "string"
                          },
                          "description": {
                            "description": "The description of the workbook.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "displayName": {
                            "description": "The user-defined name (display name) of the workbook.",
                            "type": "string"
                          },
                          "revision": {
                            "description": "The unique revision id for this workbook definition",
                            "readOnly": true,
                            "type": "string",
                            "x-nullable": true
                          },
                          "serializedData": {
                            "description": "Configuration of this particular workbook. Configuration data is a string containing valid JSON",
                            "type": "string",
                            "x-nullable": true
                          },
                          "sourceId": {
                            "description": "ResourceId for a source resource.",
                            "type": "string"
                          },
                          "storageUri": {
                            "description": "The resourceId to the storage account when bring your own storage is used",
                            "type": "string",
                            "x-nullable": true
                          },
                          "tags": {
                            "description": "Being deprecated, please use the other tags field",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "timeModified": {
                            "description": "Date and time in UTC of the last modification that was made to this workbook definition.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userId": {
                            "description": "Unique user id of the specific user that owns this workbook.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "version": {
                            "description": "Workbook schema version format, like 'Notebook/1.0', which should match the workbook in serializedData",
                            "type": "string"
                          }
                        },
                        "required": [
                          "displayName",
                          "category",
                          "serializedData"
                        ],
                        "type": "object"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbooksListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A list of 0 or more Application Insights WebTest definitions.",
              "properties": {
                "nextLink": {
                  "description": "The link to get the next part of the returned list of WebTest, should the return set be too large for a single request. May be null.",
                  "type": "string"
                },
                "value": {
                  "description": "Set of Application Insights WebTest definitions.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An Application Insights WebTest definition.",
                    "properties": {
                      "kind": {
                        "default": "ping",
                        "description": "The kind of WebTest that this web test watches. Choices are ping, multistep and standard.",
                        "enum": [
                          "ping",
                          "multistep",
                          "standard"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "WebTestKind"
                        }
                      },
                      "properties": {
                        "description": "Metadata describing a web test for an Azure resource.",
                        "properties": {
                          "Configuration": {
                            "description": "An XML configuration specification for a WebTest.",
                            "properties": {
                              "WebTest": {
                                "description": "The XML specification of a WebTest to run against an application.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "Description": {
                            "description": "User defined description for this WebTest.",
                            "type": "string"
                          },
                          "Enabled": {
                            "description": "Is the test actively being monitored.",
                            "type": "boolean"
                          },
                          "Frequency": {
                            "default": 300,
                            "description": "Interval in seconds between test runs for this WebTest. Default value is 300.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "Kind": {
                            "default": "ping",
                            "description": "The kind of web test this is, valid choices are ping, multistep and standard.",
                            "enum": [
                              "ping",
                              "multistep",
                              "standard"
                            ],
                            "type": "string",
                            "x-ms-client-name": "WebTestKind",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WebTestKind"
                            }
                          },
                          "Locations": {
                            "description": "A list of where to physically run the tests from to give global coverage for accessibility of your application.",
                            "items": {
                              "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
                              "properties": {
                                "Id": {
                                  "description": "Location ID for the WebTest to run from.",
                                  "type": "string",
                                  "x-ms-client-name": "location"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": [
                              "Id"
                            ]
                          },
                          "Name": {
                            "description": "User defined name if this WebTest.",
                            "type": "string",
                            "x-ms-client-name": "WebTestName"
                          },
                          "Request": {
                            "description": "The collection of request properties",
                            "properties": {
                              "FollowRedirects": {
                                "description": "Follow redirects for this web test.",
                                "type": "boolean"
                              },
                              "Headers": {
                                "description": "List of headers and their values to add to the WebTest call.",
                                "items": {
                                  "description": "A header to add to the WebTest.",
                                  "properties": {
                                    "key": {
                                      "description": "The name of the header.",
                                      "type": "string",
                                      "x-ms-client-name": "headerFieldName"
                                    },
                                    "value": {
                                      "description": "The value of the header.",
                                      "type": "string",
                                      "x-ms-client-name": "headerFieldValue"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "HttpVerb": {
                                "description": "Http verb to use for this web test.",
                                "type": "string"
                              },
                              "ParseDependentRequests": {
                                "description": "Parse Dependent request for this WebTest.",
                                "type": "boolean"
                              },
                              "RequestBody": {
                                "description": "Base64 encoded string body to send with this web test.",
                                "type": "string"
                              },
                              "RequestUrl": {
                                "description": "Url location to test.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "RetryEnabled": {
                            "description": "Allow for retries should this WebTest fail.",
                            "type": "boolean"
                          },
                          "SyntheticMonitorId": {
                            "description": "Unique ID of this WebTest. This is typically the same value as the Name field.",
                            "type": "string"
                          },
                          "Timeout": {
                            "default": 30,
                            "description": "Seconds until this WebTest will timeout and fail. Default value is 30.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "ValidationRules": {
                            "description": "The collection of validation rule properties",
                            "properties": {
                              "ContentValidation": {
                                "description": "The collection of content validation properties",
                                "properties": {
                                  "ContentMatch": {
                                    "description": "Content to look for in the return of the WebTest.  Must not be null or empty.",
                                    "type": "string"
                                  },
                                  "IgnoreCase": {
                                    "description": "When set, this value makes the ContentMatch validation case insensitive.",
                                    "type": "boolean"
                                  },
                                  "PassIfTextFound": {
                                    "description": "When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "ExpectedHttpStatusCode": {
                                "description": "Validate that the WebTest returns the http status code provided.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "IgnoreHttpStatusCode": {
                                "description": "When set, validation will ignore the status code.",
                                "type": "boolean"
                              },
                              "SSLCertRemainingLifetimeCheck": {
                                "description": "A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "SSLCheck": {
                                "description": "Checks to see if the SSL cert is still valid.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "Name",
                          "Kind",
                          "Locations",
                          "SyntheticMonitorId"
                        ]
                      }
                    }
                  },
                  "type": "array"
                }
              },
              "required": [
                "value"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/webTestListResult"
          }
        ],
        "parameters": [
          {
            "oldValue": {
              "description": "Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks.",
              "in": "query",
              "name": "canFetchContent",
              "required": false,
              "type": "boolean",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CanFetchWorkbookContentParameter"
          },
          {
            "oldValue": {
              "description": "Category of workbook to return.",
              "enum": [
                "workbook",
                "TSG",
                "performance",
                "retention"
              ],
              "in": "query",
              "name": "category",
              "required": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "CategoryType"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CategoryParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the Application Insights component resource.",
              "in": "path",
              "name": "componentName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ComponentNameParameter"
          },
          {
            "oldValue": {
              "description": "Azure Resource Id that will fetch all linked workbooks.",
              "in": "query",
              "name": "sourceId",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SourceIdParameter"
          },
          {
            "oldValue": {
              "collectionFormat": "csv",
              "description": "Tags presents on each workbook returned.",
              "in": "query",
              "items": {
                "type": "string"
              },
              "name": "tags",
              "required": false,
              "type": "array",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TagsParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the Application Insights WebTest resource.",
              "in": "path",
              "name": "webTestName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/WebTestNameParameter"
          },
          {
            "oldValue": {
              "description": "The name of the resource.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookResourceNamePropertyParameter"
          },
          {
            "oldValue": {
              "description": "The id of the workbook's revision.",
              "in": "path",
              "name": "revisionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookRevisionIdParameter"
          }
        ]
      }
    },
    "info": {
      "description": {
        "from": "Azure workbook resource type.",
        "to": "Azure Application Insights client for web tests."
      },
      "version": {
        "from": "2022-04-01",
        "to": "2022-06-15"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/webtests",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{componentName}/webtests",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions/{revisionId}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/workbooks",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "WebTests_ListByResourceGroup": "FunctionDef(\n  name='WebTests_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get all Application Insights web tests defined for the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all Application Insights web tests defined for the specified resource group.'))])],\n  type_params=[])",
    "WebTests_Get": "FunctionDef(\n  name='WebTests_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='webTestName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a specific Application Insights web test definition.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests/'),\n          FormattedValue(\n            value=Name(id='webTestName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='webTestName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: webTestName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a specific Application Insights web test definition.'))])],\n  type_params=[])",
    "WebTests_CreateOrUpdate": "FunctionDef(\n  name='WebTests_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='webTestName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an Application Insights web test definition.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests/'),\n          FormattedValue(\n            value=Name(id='webTestName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='webTestName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: webTestName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an Application Insights web test definition.'))])],\n  type_params=[])",
    "WebTests_UpdateTags": "FunctionDef(\n  name='WebTests_UpdateTags',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='webTestName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the tags associated with an Application Insights web test.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests/'),\n          FormattedValue(\n            value=Name(id='webTestName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='webTestName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: webTestName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_UpdateTags')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates the tags associated with an Application Insights web test.'))])],\n  type_params=[])",
    "WebTests_Delete": "FunctionDef(\n  name='WebTests_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='webTestName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an Application Insights web test.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests/'),\n          FormattedValue(\n            value=Name(id='webTestName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='webTestName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: webTestName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an Application Insights web test.'))])],\n  type_params=[])",
    "WebTests_List": "FunctionDef(\n  name='WebTests_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get all Application Insights web test definitions for the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/webtests')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all Application Insights web test definitions for the specified subscription.'))])],\n  type_params=[])",
    "WebTests_ListByComponent": "FunctionDef(\n  name='WebTests_ListByComponent',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='componentName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get all Application Insights web tests defined for the specified component.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/components/'),\n          FormattedValue(\n            value=Name(id='componentName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/webtests')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='componentName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: componentName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WebTests_ListByComponent')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all Application Insights web tests defined for the specified component.'))])],\n  type_params=[])"
  }
}