{
  "input": {
    "oas_diff": {
      "extensions": {
        "modified": {
          "definitions": [
            {
              "oldValue": null,
              "value": {
                "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags",
                "properties": {
                  "id": {
                    "description": "The unique resource identifier of the database account.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the database account.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of Azure resource.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-ms-azure-resource": true
              },
              "op": "add",
              "from": "",
              "path": "/ARMProxyResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The core properties of ARM resources.",
                "properties": {
                  "id": {
                    "description": "The unique resource identifier of the ARM resource.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "location": {
                    "description": "The location of the resource group to which the resource belongs.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the ARM resource.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of Azure resource.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-ms-azure-resource": true
              },
              "op": "add",
              "from": "",
              "path": "/ARMResourceProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB resource auto-upgrade policy",
                "properties": {
                  "throughputPolicy": {
                    "description": "Cosmos DB resource throughput policy",
                    "properties": {
                      "incrementPercent": {
                        "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                        "type": "integer"
                      },
                      "isEnabled": {
                        "description": "Determines whether the ThroughputPolicy is active or not",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/AutoUpgradePolicyResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB capability object",
                "properties": {
                  "name": {
                    "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Capability"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB Cassandra keyspace.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB Cassandra keyspace resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB Cassandra keyspace",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB Cassandra keyspace resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB Cassandra keyspace",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB Cassandra keyspace resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB Cassandra keyspace",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB Cassandra keyspace.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB Cassandra keyspace resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB Cassandra keyspace",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the Cassandra keyspaces and their properties.",
                "properties": {
                  "value": {
                    "description": "List of Cassandra keyspaces and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB Cassandra keyspace.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB Cassandra keyspace resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB Cassandra keyspace",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra keyspace resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB Cassandra keyspace",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraKeyspaceResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra table partition key",
                "properties": {
                  "name": {
                    "description": "Name of the Cosmos DB Cassandra table partition key",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraPartitionKey"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra table schema",
                "properties": {
                  "clusterKeys": {
                    "description": "List of cluster key.",
                    "items": {
                      "description": "Cosmos DB Cassandra table cluster key",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB Cassandra table cluster key",
                          "type": "string"
                        },
                        "orderBy": {
                          "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "columns": {
                    "description": "List of Cassandra table columns.",
                    "items": {
                      "description": "Cosmos DB Cassandra table column",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB Cassandra table column",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of the Cosmos DB Cassandra table column",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "partitionKeys": {
                    "description": "List of partition key.",
                    "items": {
                      "description": "Cosmos DB Cassandra table partition key",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB Cassandra table partition key",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraSchema"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB Cassandra table.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB Cassandra table resource object",
                        "properties": {
                          "defaultTtl": {
                            "description": "Time to live of the Cosmos DB Cassandra table",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB Cassandra table",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Cosmos DB Cassandra table schema",
                            "properties": {
                              "clusterKeys": {
                                "description": "List of cluster key.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table cluster key",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table cluster key",
                                      "type": "string"
                                    },
                                    "orderBy": {
                                      "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "columns": {
                                "description": "List of Cassandra table columns.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table column",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table column",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of the Cosmos DB Cassandra table column",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "partitionKeys": {
                                "description": "List of partition key.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table partition key",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table partition key",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB Cassandra table resource object",
                    "properties": {
                      "defaultTtl": {
                        "description": "Time to live of the Cosmos DB Cassandra table",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB Cassandra table",
                        "type": "string"
                      },
                      "schema": {
                        "description": "Cosmos DB Cassandra table schema",
                        "properties": {
                          "clusterKeys": {
                            "description": "List of cluster key.",
                            "items": {
                              "description": "Cosmos DB Cassandra table cluster key",
                              "properties": {
                                "name": {
                                  "description": "Name of the Cosmos DB Cassandra table cluster key",
                                  "type": "string"
                                },
                                "orderBy": {
                                  "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "columns": {
                            "description": "List of Cassandra table columns.",
                            "items": {
                              "description": "Cosmos DB Cassandra table column",
                              "properties": {
                                "name": {
                                  "description": "Name of the Cosmos DB Cassandra table column",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type of the Cosmos DB Cassandra table column",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "partitionKeys": {
                            "description": "List of partition key.",
                            "items": {
                              "description": "Cosmos DB Cassandra table partition key",
                              "properties": {
                                "name": {
                                  "description": "Name of the Cosmos DB Cassandra table partition key",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB Cassandra table",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB Cassandra table resource object",
                        "properties": {
                          "defaultTtl": {
                            "description": "Time to live of the Cosmos DB Cassandra table",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB Cassandra table",
                            "type": "string"
                          },
                          "schema": {
                            "description": "Cosmos DB Cassandra table schema",
                            "properties": {
                              "clusterKeys": {
                                "description": "List of cluster key.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table cluster key",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table cluster key",
                                      "type": "string"
                                    },
                                    "orderBy": {
                                      "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "columns": {
                                "description": "List of Cassandra table columns.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table column",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table column",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of the Cosmos DB Cassandra table column",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "partitionKeys": {
                                "description": "List of partition key.",
                                "items": {
                                  "description": "Cosmos DB Cassandra table partition key",
                                  "properties": {
                                    "name": {
                                      "description": "Name of the Cosmos DB Cassandra table partition key",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB Cassandra table.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB Cassandra table",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB Cassandra table resource object",
                            "properties": {
                              "defaultTtl": {
                                "description": "Time to live of the Cosmos DB Cassandra table",
                                "type": "integer"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB Cassandra table",
                                "type": "string"
                              },
                              "schema": {
                                "description": "Cosmos DB Cassandra table schema",
                                "properties": {
                                  "clusterKeys": {
                                    "description": "List of cluster key.",
                                    "items": {
                                      "description": "Cosmos DB Cassandra table cluster key",
                                      "properties": {
                                        "name": {
                                          "description": "Name of the Cosmos DB Cassandra table cluster key",
                                          "type": "string"
                                        },
                                        "orderBy": {
                                          "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "columns": {
                                    "description": "List of Cassandra table columns.",
                                    "items": {
                                      "description": "Cosmos DB Cassandra table column",
                                      "properties": {
                                        "name": {
                                          "description": "Name of the Cosmos DB Cassandra table column",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "Type of the Cosmos DB Cassandra table column",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "partitionKeys": {
                                    "description": "List of partition key.",
                                    "items": {
                                      "description": "Cosmos DB Cassandra table partition key",
                                      "properties": {
                                        "name": {
                                          "description": "Name of the Cosmos DB Cassandra table partition key",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the Cassandra tables and their properties.",
                "properties": {
                  "value": {
                    "description": "List of Cassandra tables and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB Cassandra table.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB Cassandra table",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB Cassandra table resource object",
                                  "properties": {
                                    "defaultTtl": {
                                      "description": "Time to live of the Cosmos DB Cassandra table",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB Cassandra table",
                                      "type": "string"
                                    },
                                    "schema": {
                                      "description": "Cosmos DB Cassandra table schema",
                                      "properties": {
                                        "clusterKeys": {
                                          "description": "List of cluster key.",
                                          "items": {
                                            "description": "Cosmos DB Cassandra table cluster key",
                                            "properties": {
                                              "name": {
                                                "description": "Name of the Cosmos DB Cassandra table cluster key",
                                                "type": "string"
                                              },
                                              "orderBy": {
                                                "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "columns": {
                                          "description": "List of Cassandra table columns.",
                                          "items": {
                                            "description": "Cosmos DB Cassandra table column",
                                            "properties": {
                                              "name": {
                                                "description": "Name of the Cosmos DB Cassandra table column",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "Type of the Cosmos DB Cassandra table column",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "partitionKeys": {
                                          "description": "List of partition key.",
                                          "items": {
                                            "description": "Cosmos DB Cassandra table partition key",
                                            "properties": {
                                              "name": {
                                                "description": "Name of the Cosmos DB Cassandra table partition key",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra table resource object",
                "properties": {
                  "defaultTtl": {
                    "description": "Time to live of the Cosmos DB Cassandra table",
                    "type": "integer"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB Cassandra table",
                    "type": "string"
                  },
                  "schema": {
                    "description": "Cosmos DB Cassandra table schema",
                    "properties": {
                      "clusterKeys": {
                        "description": "List of cluster key.",
                        "items": {
                          "description": "Cosmos DB Cassandra table cluster key",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB Cassandra table cluster key",
                              "type": "string"
                            },
                            "orderBy": {
                              "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "columns": {
                        "description": "List of Cassandra table columns.",
                        "items": {
                          "description": "Cosmos DB Cassandra table column",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB Cassandra table column",
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of the Cosmos DB Cassandra table column",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "partitionKeys": {
                        "description": "List of partition key.",
                        "items": {
                          "description": "Cosmos DB Cassandra table partition key",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB Cassandra table partition key",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CassandraTableResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra table cluster key",
                "properties": {
                  "name": {
                    "description": "Name of the Cosmos DB Cassandra table cluster key",
                    "type": "string"
                  },
                  "orderBy": {
                    "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ClusterKey"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Cassandra table column",
                "properties": {
                  "name": {
                    "description": "Name of the Cosmos DB Cassandra table column",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the Cosmos DB Cassandra table column",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Column"
            },
            {
              "oldValue": null,
              "value": {
                "properties": {
                  "order": {
                    "description": "Sort order for composite paths.",
                    "enum": [
                      "Ascending",
                      "Descending"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "CompositePathSortOrder"
                    }
                  },
                  "path": {
                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CompositePath"
            },
            {
              "oldValue": null,
              "value": {
                "description": "List of composite path",
                "items": {
                  "properties": {
                    "order": {
                      "description": "Sort order for composite paths.",
                      "enum": [
                        "Ascending",
                        "Descending"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "CompositePathSortOrder"
                      }
                    },
                    "path": {
                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "op": "add",
              "from": "",
              "path": "/CompositePathList"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The conflict resolution policy for the container.",
                "properties": {
                  "conflictResolutionPath": {
                    "description": "The conflict resolution path in the case of LastWriterWins mode.",
                    "type": "string"
                  },
                  "conflictResolutionProcedure": {
                    "description": "The procedure to resolve conflicts in the case of custom mode.",
                    "type": "string"
                  },
                  "mode": {
                    "default": "LastWriterWins",
                    "description": "Indicates the conflict resolution mode.",
                    "enum": [
                      "LastWriterWins",
                      "Custom"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ConflictResolutionMode"
                    }
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ConflictResolutionPolicy"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                "enum": [
                  "Small"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "ConnectorOffer"
                }
              },
              "op": "add",
              "from": "",
              "path": "/ConnectorOffer"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The consistency policy for the Cosmos DB database account.",
                "properties": {
                  "defaultConsistencyLevel": {
                    "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                    "enum": [
                      "Eventual",
                      "Session",
                      "BoundedStaleness",
                      "Strong",
                      "ConsistentPrefix"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "DefaultConsistencyLevel"
                    }
                  },
                  "maxIntervalInSeconds": {
                    "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                    "format": "int32",
                    "maximum": 86400,
                    "minimum": 5,
                    "type": "integer"
                  },
                  "maxStalenessPrefix": {
                    "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                    "format": "int64",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "defaultConsistencyLevel"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ConsistencyPolicy"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                "properties": {
                  "kind": {
                    "default": "Hash",
                    "description": "Indicates the kind of algorithm used for partitioning",
                    "enum": [
                      "Hash",
                      "Range"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "PartitionKind"
                    }
                  },
                  "paths": {
                    "description": "List of paths using which data within the container can be partitioned",
                    "items": {
                      "description": "A path. These typically start with root (/path)",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "version": {
                    "description": "Indicates the version of the partition key definition",
                    "format": "int32",
                    "maximum": 2,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ContainerPartitionKey"
            },
            {
              "oldValue": null,
              "value": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                "properties": {
                  "throughput": {
                    "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/CreateUpdateOptions"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Connection string for the Cosmos DB account",
                "properties": {
                  "connectionString": {
                    "description": "Value of the connection string",
                    "readOnly": true,
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the connection string",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountConnectionString"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB database accounts.",
                "properties": {
                  "kind": {
                    "default": "GlobalDocumentDB",
                    "description": "Indicates the type of database account. This can only be set at database account creation.",
                    "enum": [
                      "GlobalDocumentDB",
                      "MongoDB",
                      "Parse"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DatabaseAccountKind"
                    }
                  },
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB database accounts.",
                    "properties": {
                      "capabilities": {
                        "description": "List of Cosmos DB capabilities for the account",
                        "items": {
                          "description": "Cosmos DB capability object",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "connectorOffer": {
                        "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                        "enum": [
                          "Small"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ConnectorOffer"
                        }
                      },
                      "consistencyPolicy": {
                        "description": "The consistency policy for the Cosmos DB database account.",
                        "properties": {
                          "defaultConsistencyLevel": {
                            "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                            "enum": [
                              "Eventual",
                              "Session",
                              "BoundedStaleness",
                              "Strong",
                              "ConsistentPrefix"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "DefaultConsistencyLevel"
                            }
                          },
                          "maxIntervalInSeconds": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int32",
                            "maximum": 86400,
                            "minimum": 5,
                            "type": "integer"
                          },
                          "maxStalenessPrefix": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "defaultConsistencyLevel"
                        ],
                        "type": "object"
                      },
                      "databaseAccountOfferType": {
                        "description": "The offer type for the Cosmos DB database account.",
                        "enum": [
                          "Standard"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "DatabaseAccountOfferType"
                        }
                      },
                      "disableKeyBasedMetadataWriteAccess": {
                        "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                        "type": "boolean"
                      },
                      "enableAutomaticFailover": {
                        "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                        "type": "boolean"
                      },
                      "enableCassandraConnector": {
                        "description": "Enables the cassandra connector on the Cosmos DB C* account",
                        "type": "boolean"
                      },
                      "enableMultipleWriteLocations": {
                        "description": "Enables the account to write in multiple locations",
                        "type": "boolean"
                      },
                      "ipRangeFilter": {
                        "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                        "type": "string"
                      },
                      "isVirtualNetworkFilterEnabled": {
                        "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                        "type": "boolean"
                      },
                      "keyVaultKeyUri": {
                        "description": "The URI of the key vault",
                        "type": "string"
                      },
                      "locations": {
                        "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
                        "items": {
                          "description": "A region in which the Azure Cosmos DB database account is deployed.",
                          "properties": {
                            "documentEndpoint": {
                              "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                              "readOnly": true,
                              "type": "string"
                            },
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "isZoneRedundant": {
                              "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                              "type": "boolean"
                            },
                            "locationName": {
                              "description": "The name of the region.",
                              "type": "string"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "virtualNetworkRules": {
                        "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                        "items": {
                          "description": "Virtual Network ACL Rule object",
                          "properties": {
                            "id": {
                              "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                              "type": "string"
                            },
                            "ignoreMissingVNetServiceEndpoint": {
                              "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "locations",
                      "databaseAccountOfferType"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB database accounts.",
                "properties": {
                  "capabilities": {
                    "description": "List of Cosmos DB capabilities for the account",
                    "items": {
                      "description": "Cosmos DB capability object",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "connectorOffer": {
                    "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                    "enum": [
                      "Small"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ConnectorOffer"
                    }
                  },
                  "consistencyPolicy": {
                    "description": "The consistency policy for the Cosmos DB database account.",
                    "properties": {
                      "defaultConsistencyLevel": {
                        "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                        "enum": [
                          "Eventual",
                          "Session",
                          "BoundedStaleness",
                          "Strong",
                          "ConsistentPrefix"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "DefaultConsistencyLevel"
                        }
                      },
                      "maxIntervalInSeconds": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int32",
                        "maximum": 86400,
                        "minimum": 5,
                        "type": "integer"
                      },
                      "maxStalenessPrefix": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int64",
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "defaultConsistencyLevel"
                    ],
                    "type": "object"
                  },
                  "databaseAccountOfferType": {
                    "description": "The offer type for the Cosmos DB database account.",
                    "enum": [
                      "Standard"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "DatabaseAccountOfferType"
                    }
                  },
                  "disableKeyBasedMetadataWriteAccess": {
                    "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                    "type": "boolean"
                  },
                  "enableAutomaticFailover": {
                    "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                    "type": "boolean"
                  },
                  "enableCassandraConnector": {
                    "description": "Enables the cassandra connector on the Cosmos DB C* account",
                    "type": "boolean"
                  },
                  "enableMultipleWriteLocations": {
                    "description": "Enables the account to write in multiple locations",
                    "type": "boolean"
                  },
                  "ipRangeFilter": {
                    "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                    "type": "string"
                  },
                  "isVirtualNetworkFilterEnabled": {
                    "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                    "type": "boolean"
                  },
                  "keyVaultKeyUri": {
                    "description": "The URI of the key vault",
                    "type": "string"
                  },
                  "locations": {
                    "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
                    "items": {
                      "description": "A region in which the Azure Cosmos DB database account is deployed.",
                      "properties": {
                        "documentEndpoint": {
                          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                          "readOnly": true,
                          "type": "string"
                        },
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isZoneRedundant": {
                          "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                          "type": "boolean"
                        },
                        "locationName": {
                          "description": "The name of the region.",
                          "type": "string"
                        },
                        "provisioningState": {
                          "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "virtualNetworkRules": {
                    "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                    "items": {
                      "description": "Virtual Network ACL Rule object",
                      "properties": {
                        "id": {
                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                          "type": "string"
                        },
                        "ignoreMissingVNetServiceEndpoint": {
                          "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "locations",
                  "databaseAccountOfferType"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties for the database account.",
                "properties": {
                  "capabilities": {
                    "description": "List of Cosmos DB capabilities for the account",
                    "items": {
                      "description": "Cosmos DB capability object",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "connectorOffer": {
                    "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                    "enum": [
                      "Small"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ConnectorOffer"
                    }
                  },
                  "consistencyPolicy": {
                    "description": "The consistency policy for the Cosmos DB database account.",
                    "properties": {
                      "defaultConsistencyLevel": {
                        "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                        "enum": [
                          "Eventual",
                          "Session",
                          "BoundedStaleness",
                          "Strong",
                          "ConsistentPrefix"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "DefaultConsistencyLevel"
                        }
                      },
                      "maxIntervalInSeconds": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int32",
                        "maximum": 86400,
                        "minimum": 5,
                        "type": "integer"
                      },
                      "maxStalenessPrefix": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int64",
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "defaultConsistencyLevel"
                    ],
                    "type": "object"
                  },
                  "databaseAccountOfferType": {
                    "description": "The offer type for the Cosmos DB database account.",
                    "enum": [
                      "Standard"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "DatabaseAccountOfferType"
                    }
                  },
                  "disableKeyBasedMetadataWriteAccess": {
                    "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                    "type": "boolean"
                  },
                  "documentEndpoint": {
                    "description": "The connection endpoint for the Cosmos DB database account.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "enableAutomaticFailover": {
                    "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                    "type": "boolean"
                  },
                  "enableCassandraConnector": {
                    "description": "Enables the cassandra connector on the Cosmos DB C* account",
                    "type": "boolean"
                  },
                  "enableMultipleWriteLocations": {
                    "description": "Enables the account to write in multiple locations",
                    "type": "boolean"
                  },
                  "failoverPolicies": {
                    "description": "An array that contains the regions ordered by their failover priorities.",
                    "items": {
                      "description": "The failover policy for a given region of a database account.",
                      "properties": {
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "locationName": {
                          "description": "The name of the region in which the database account exists.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "ipRangeFilter": {
                    "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                    "type": "string"
                  },
                  "isVirtualNetworkFilterEnabled": {
                    "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                    "type": "boolean"
                  },
                  "keyVaultKeyUri": {
                    "description": "The URI of the key vault",
                    "type": "string"
                  },
                  "locations": {
                    "description": "An array that contains all of the locations enabled for the Cosmos DB account.",
                    "items": {
                      "description": "A region in which the Azure Cosmos DB database account is deployed.",
                      "properties": {
                        "documentEndpoint": {
                          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                          "readOnly": true,
                          "type": "string"
                        },
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isZoneRedundant": {
                          "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                          "type": "boolean"
                        },
                        "locationName": {
                          "description": "The name of the region.",
                          "type": "string"
                        },
                        "provisioningState": {
                          "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "provisioningState": {
                    "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "readLocations": {
                    "description": "An array that contains of the read locations enabled for the Cosmos DB account.",
                    "items": {
                      "description": "A region in which the Azure Cosmos DB database account is deployed.",
                      "properties": {
                        "documentEndpoint": {
                          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                          "readOnly": true,
                          "type": "string"
                        },
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isZoneRedundant": {
                          "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                          "type": "boolean"
                        },
                        "locationName": {
                          "description": "The name of the region.",
                          "type": "string"
                        },
                        "provisioningState": {
                          "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "virtualNetworkRules": {
                    "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                    "items": {
                      "description": "Virtual Network ACL Rule object",
                      "properties": {
                        "id": {
                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                          "type": "string"
                        },
                        "ignoreMissingVNetServiceEndpoint": {
                          "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "writeLocations": {
                    "description": "An array that contains the write location for the Cosmos DB account.",
                    "items": {
                      "description": "A region in which the Azure Cosmos DB database account is deployed.",
                      "properties": {
                        "documentEndpoint": {
                          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                          "readOnly": true,
                          "type": "string"
                        },
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isZoneRedundant": {
                          "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                          "type": "boolean"
                        },
                        "locationName": {
                          "description": "The name of the region.",
                          "type": "string"
                        },
                        "provisioningState": {
                          "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB database account.",
                "properties": {
                  "kind": {
                    "default": "GlobalDocumentDB",
                    "description": "Indicates the type of database account. This can only be set at database account creation.",
                    "enum": [
                      "GlobalDocumentDB",
                      "MongoDB",
                      "Parse"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DatabaseAccountKind"
                    }
                  },
                  "properties": {
                    "description": "Properties for the database account.",
                    "properties": {
                      "capabilities": {
                        "description": "List of Cosmos DB capabilities for the account",
                        "items": {
                          "description": "Cosmos DB capability object",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "connectorOffer": {
                        "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                        "enum": [
                          "Small"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ConnectorOffer"
                        }
                      },
                      "consistencyPolicy": {
                        "description": "The consistency policy for the Cosmos DB database account.",
                        "properties": {
                          "defaultConsistencyLevel": {
                            "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                            "enum": [
                              "Eventual",
                              "Session",
                              "BoundedStaleness",
                              "Strong",
                              "ConsistentPrefix"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "DefaultConsistencyLevel"
                            }
                          },
                          "maxIntervalInSeconds": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int32",
                            "maximum": 86400,
                            "minimum": 5,
                            "type": "integer"
                          },
                          "maxStalenessPrefix": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "defaultConsistencyLevel"
                        ],
                        "type": "object"
                      },
                      "databaseAccountOfferType": {
                        "description": "The offer type for the Cosmos DB database account.",
                        "enum": [
                          "Standard"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "DatabaseAccountOfferType"
                        }
                      },
                      "disableKeyBasedMetadataWriteAccess": {
                        "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                        "type": "boolean"
                      },
                      "documentEndpoint": {
                        "description": "The connection endpoint for the Cosmos DB database account.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "enableAutomaticFailover": {
                        "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                        "type": "boolean"
                      },
                      "enableCassandraConnector": {
                        "description": "Enables the cassandra connector on the Cosmos DB C* account",
                        "type": "boolean"
                      },
                      "enableMultipleWriteLocations": {
                        "description": "Enables the account to write in multiple locations",
                        "type": "boolean"
                      },
                      "failoverPolicies": {
                        "description": "An array that contains the regions ordered by their failover priorities.",
                        "items": {
                          "description": "The failover policy for a given region of a database account.",
                          "properties": {
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "locationName": {
                              "description": "The name of the region in which the database account exists.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "ipRangeFilter": {
                        "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                        "type": "string"
                      },
                      "isVirtualNetworkFilterEnabled": {
                        "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                        "type": "boolean"
                      },
                      "keyVaultKeyUri": {
                        "description": "The URI of the key vault",
                        "type": "string"
                      },
                      "locations": {
                        "description": "An array that contains all of the locations enabled for the Cosmos DB account.",
                        "items": {
                          "description": "A region in which the Azure Cosmos DB database account is deployed.",
                          "properties": {
                            "documentEndpoint": {
                              "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                              "readOnly": true,
                              "type": "string"
                            },
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "isZoneRedundant": {
                              "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                              "type": "boolean"
                            },
                            "locationName": {
                              "description": "The name of the region.",
                              "type": "string"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "provisioningState": {
                        "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "readLocations": {
                        "description": "An array that contains of the read locations enabled for the Cosmos DB account.",
                        "items": {
                          "description": "A region in which the Azure Cosmos DB database account is deployed.",
                          "properties": {
                            "documentEndpoint": {
                              "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                              "readOnly": true,
                              "type": "string"
                            },
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "isZoneRedundant": {
                              "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                              "type": "boolean"
                            },
                            "locationName": {
                              "description": "The name of the region.",
                              "type": "string"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "virtualNetworkRules": {
                        "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                        "items": {
                          "description": "Virtual Network ACL Rule object",
                          "properties": {
                            "id": {
                              "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                              "type": "string"
                            },
                            "ignoreMissingVNetServiceEndpoint": {
                              "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "writeLocations": {
                        "description": "An array that contains the write location for the Cosmos DB account.",
                        "items": {
                          "description": "A region in which the Azure Cosmos DB database account is deployed.",
                          "properties": {
                            "documentEndpoint": {
                              "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                              "readOnly": true,
                              "type": "string"
                            },
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "isZoneRedundant": {
                              "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                              "type": "boolean"
                            },
                            "locationName": {
                              "description": "The name of the region.",
                              "type": "string"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "readOnly": true,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The connection strings for the given database account.",
                "properties": {
                  "connectionStrings": {
                    "description": "An array that contains the connection strings for the Cosmos DB account.",
                    "items": {
                      "description": "Connection string for the Cosmos DB account",
                      "properties": {
                        "connectionString": {
                          "description": "Value of the connection string",
                          "readOnly": true,
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the connection string",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountListConnectionStringsResult"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The read-only access keys for the given database account.",
                    "properties": {
                      "primaryReadonlyMasterKey": {
                        "description": "Base 64 encoded value of the primary read-only key.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "secondaryReadonlyMasterKey": {
                        "description": "Base 64 encoded value of the secondary read-only key.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  }
                ],
                "description": "The access keys for the given database account.",
                "properties": {
                  "primaryMasterKey": {
                    "description": "Base 64 encoded value of the primary read-write key.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "secondaryMasterKey": {
                    "description": "Base 64 encoded value of the secondary read-write key.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountListKeysResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The read-only access keys for the given database account.",
                "properties": {
                  "primaryReadonlyMasterKey": {
                    "description": "Base 64 encoded value of the primary read-only key.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "secondaryReadonlyMasterKey": {
                    "description": "Base 64 encoded value of the secondary read-only key.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountListReadOnlyKeysResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The offer type for the Cosmos DB database account.",
                "enum": [
                  "Standard"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": false,
                  "name": "DatabaseAccountOfferType"
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountOfferType"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Parameters to regenerate the keys within the database account.",
                "properties": {
                  "keyKind": {
                    "description": "The access key to regenerate.",
                    "enum": [
                      "primary",
                      "secondary",
                      "primaryReadonly",
                      "secondaryReadonly"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "KeyKind"
                    }
                  }
                },
                "required": [
                  "keyKind"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountRegenerateKeyParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Parameters for patching Azure Cosmos DB database account properties.",
                "properties": {
                  "location": {
                    "description": "The location of the resource group to which the resource belongs.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "Properties to update Azure Cosmos DB database accounts.",
                    "properties": {
                      "capabilities": {
                        "description": "List of Cosmos DB capabilities for the account",
                        "items": {
                          "description": "Cosmos DB capability object",
                          "properties": {
                            "name": {
                              "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "connectorOffer": {
                        "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                        "enum": [
                          "Small"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ConnectorOffer"
                        }
                      },
                      "consistencyPolicy": {
                        "description": "The consistency policy for the Cosmos DB database account.",
                        "properties": {
                          "defaultConsistencyLevel": {
                            "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                            "enum": [
                              "Eventual",
                              "Session",
                              "BoundedStaleness",
                              "Strong",
                              "ConsistentPrefix"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "DefaultConsistencyLevel"
                            }
                          },
                          "maxIntervalInSeconds": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int32",
                            "maximum": 86400,
                            "minimum": 5,
                            "type": "integer"
                          },
                          "maxStalenessPrefix": {
                            "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "defaultConsistencyLevel"
                        ],
                        "type": "object"
                      },
                      "disableKeyBasedMetadataWriteAccess": {
                        "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                        "type": "boolean"
                      },
                      "enableAutomaticFailover": {
                        "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                        "type": "boolean"
                      },
                      "enableCassandraConnector": {
                        "description": "Enables the cassandra connector on the Cosmos DB C* account",
                        "type": "boolean"
                      },
                      "enableMultipleWriteLocations": {
                        "description": "Enables the account to write in multiple locations",
                        "type": "boolean"
                      },
                      "ipRangeFilter": {
                        "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                        "type": "string"
                      },
                      "isVirtualNetworkFilterEnabled": {
                        "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                        "type": "boolean"
                      },
                      "keyVaultKeyUri": {
                        "description": "The URI of the key vault",
                        "type": "string"
                      },
                      "locations": {
                        "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
                        "items": {
                          "description": "A region in which the Azure Cosmos DB database account is deployed.",
                          "properties": {
                            "documentEndpoint": {
                              "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                              "readOnly": true,
                              "type": "string"
                            },
                            "failoverPriority": {
                              "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                              "format": "int32",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "id": {
                              "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "isZoneRedundant": {
                              "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                              "type": "boolean"
                            },
                            "locationName": {
                              "description": "The name of the region.",
                              "type": "string"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "virtualNetworkRules": {
                        "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                        "items": {
                          "description": "Virtual Network ACL Rule object",
                          "properties": {
                            "id": {
                              "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                              "type": "string"
                            },
                            "ignoreMissingVNetServiceEndpoint": {
                              "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to update Azure Cosmos DB database accounts.",
                "properties": {
                  "capabilities": {
                    "description": "List of Cosmos DB capabilities for the account",
                    "items": {
                      "description": "Cosmos DB capability object",
                      "properties": {
                        "name": {
                          "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "connectorOffer": {
                    "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                    "enum": [
                      "Small"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ConnectorOffer"
                    }
                  },
                  "consistencyPolicy": {
                    "description": "The consistency policy for the Cosmos DB database account.",
                    "properties": {
                      "defaultConsistencyLevel": {
                        "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                        "enum": [
                          "Eventual",
                          "Session",
                          "BoundedStaleness",
                          "Strong",
                          "ConsistentPrefix"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "DefaultConsistencyLevel"
                        }
                      },
                      "maxIntervalInSeconds": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int32",
                        "maximum": 86400,
                        "minimum": 5,
                        "type": "integer"
                      },
                      "maxStalenessPrefix": {
                        "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                        "format": "int64",
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "defaultConsistencyLevel"
                    ],
                    "type": "object"
                  },
                  "disableKeyBasedMetadataWriteAccess": {
                    "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                    "type": "boolean"
                  },
                  "enableAutomaticFailover": {
                    "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                    "type": "boolean"
                  },
                  "enableCassandraConnector": {
                    "description": "Enables the cassandra connector on the Cosmos DB C* account",
                    "type": "boolean"
                  },
                  "enableMultipleWriteLocations": {
                    "description": "Enables the account to write in multiple locations",
                    "type": "boolean"
                  },
                  "ipRangeFilter": {
                    "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                    "type": "string"
                  },
                  "isVirtualNetworkFilterEnabled": {
                    "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                    "type": "boolean"
                  },
                  "keyVaultKeyUri": {
                    "description": "The URI of the key vault",
                    "type": "string"
                  },
                  "locations": {
                    "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
                    "items": {
                      "description": "A region in which the Azure Cosmos DB database account is deployed.",
                      "properties": {
                        "documentEndpoint": {
                          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                          "readOnly": true,
                          "type": "string"
                        },
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isZoneRedundant": {
                          "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                          "type": "boolean"
                        },
                        "locationName": {
                          "description": "The name of the region.",
                          "type": "string"
                        },
                        "provisioningState": {
                          "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "virtualNetworkRules": {
                    "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                    "items": {
                      "description": "Virtual Network ACL Rule object",
                      "properties": {
                        "id": {
                          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                          "type": "string"
                        },
                        "ignoreMissingVNetServiceEndpoint": {
                          "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the database accounts and their properties.",
                "properties": {
                  "value": {
                    "description": "List of database account and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB database account.",
                      "properties": {
                        "kind": {
                          "default": "GlobalDocumentDB",
                          "description": "Indicates the type of database account. This can only be set at database account creation.",
                          "enum": [
                            "GlobalDocumentDB",
                            "MongoDB",
                            "Parse"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "DatabaseAccountKind"
                          }
                        },
                        "properties": {
                          "description": "Properties for the database account.",
                          "properties": {
                            "capabilities": {
                              "description": "List of Cosmos DB capabilities for the account",
                              "items": {
                                "description": "Cosmos DB capability object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\".",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "connectorOffer": {
                              "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
                              "enum": [
                                "Small"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ConnectorOffer"
                              }
                            },
                            "consistencyPolicy": {
                              "description": "The consistency policy for the Cosmos DB database account.",
                              "properties": {
                                "defaultConsistencyLevel": {
                                  "description": "The default consistency level and configuration settings of the Cosmos DB account.",
                                  "enum": [
                                    "Eventual",
                                    "Session",
                                    "BoundedStaleness",
                                    "Strong",
                                    "ConsistentPrefix"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "DefaultConsistencyLevel"
                                  }
                                },
                                "maxIntervalInSeconds": {
                                  "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                                  "format": "int32",
                                  "maximum": 86400,
                                  "minimum": 5,
                                  "type": "integer"
                                },
                                "maxStalenessPrefix": {
                                  "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 \u2013 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
                                  "format": "int64",
                                  "maximum": 2147483647,
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "defaultConsistencyLevel"
                              ],
                              "type": "object"
                            },
                            "databaseAccountOfferType": {
                              "description": "The offer type for the Cosmos DB database account.",
                              "enum": [
                                "Standard"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "DatabaseAccountOfferType"
                              }
                            },
                            "disableKeyBasedMetadataWriteAccess": {
                              "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys",
                              "type": "boolean"
                            },
                            "documentEndpoint": {
                              "description": "The connection endpoint for the Cosmos DB database account.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "enableAutomaticFailover": {
                              "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
                              "type": "boolean"
                            },
                            "enableCassandraConnector": {
                              "description": "Enables the cassandra connector on the Cosmos DB C* account",
                              "type": "boolean"
                            },
                            "enableMultipleWriteLocations": {
                              "description": "Enables the account to write in multiple locations",
                              "type": "boolean"
                            },
                            "failoverPolicies": {
                              "description": "An array that contains the regions ordered by their failover priorities.",
                              "items": {
                                "description": "The failover policy for a given region of a database account.",
                                "properties": {
                                  "failoverPriority": {
                                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                                    "format": "int32",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "locationName": {
                                    "description": "The name of the region in which the database account exists.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "readOnly": true,
                              "type": "array"
                            },
                            "ipRangeFilter": {
                              "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                              "type": "string"
                            },
                            "isVirtualNetworkFilterEnabled": {
                              "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
                              "type": "boolean"
                            },
                            "keyVaultKeyUri": {
                              "description": "The URI of the key vault",
                              "type": "string"
                            },
                            "locations": {
                              "description": "An array that contains all of the locations enabled for the Cosmos DB account.",
                              "items": {
                                "description": "A region in which the Azure Cosmos DB database account is deployed.",
                                "properties": {
                                  "documentEndpoint": {
                                    "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "failoverPriority": {
                                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                                    "format": "int32",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "isZoneRedundant": {
                                    "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                                    "type": "boolean"
                                  },
                                  "locationName": {
                                    "description": "The name of the region.",
                                    "type": "string"
                                  },
                                  "provisioningState": {
                                    "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "readOnly": true,
                              "type": "array"
                            },
                            "provisioningState": {
                              "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "readLocations": {
                              "description": "An array that contains of the read locations enabled for the Cosmos DB account.",
                              "items": {
                                "description": "A region in which the Azure Cosmos DB database account is deployed.",
                                "properties": {
                                  "documentEndpoint": {
                                    "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "failoverPriority": {
                                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                                    "format": "int32",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "isZoneRedundant": {
                                    "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                                    "type": "boolean"
                                  },
                                  "locationName": {
                                    "description": "The name of the region.",
                                    "type": "string"
                                  },
                                  "provisioningState": {
                                    "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "readOnly": true,
                              "type": "array"
                            },
                            "virtualNetworkRules": {
                              "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
                              "items": {
                                "description": "Virtual Network ACL Rule object",
                                "properties": {
                                  "id": {
                                    "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                                    "type": "string"
                                  },
                                  "ignoreMissingVNetServiceEndpoint": {
                                    "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "writeLocations": {
                              "description": "An array that contains the write location for the Cosmos DB account.",
                              "items": {
                                "description": "A region in which the Azure Cosmos DB database account is deployed.",
                                "properties": {
                                  "documentEndpoint": {
                                    "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "failoverPriority": {
                                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                                    "format": "int32",
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "isZoneRedundant": {
                                    "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                                    "type": "boolean"
                                  },
                                  "locationName": {
                                    "description": "The name of the region.",
                                    "type": "string"
                                  },
                                  "provisioningState": {
                                    "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "readOnly": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/DatabaseAccountsListResult"
            },
            {
              "oldValue": null,
              "value": {
                "properties": {
                  "path": {
                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ExcludedPath"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                "properties": {
                  "_etag": {
                    "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "_rid": {
                    "description": "A system generated property. A unique identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "_ts": {
                    "description": "A system generated property that denotes the last updated timestamp of the resource.",
                    "readOnly": true
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ExtendedResourceProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The list of new failover policies for the failover priority change.",
                "properties": {
                  "failoverPolicies": {
                    "description": "List of failover policies.",
                    "items": {
                      "description": "The failover policy for a given region of a database account.",
                      "properties": {
                        "failoverPriority": {
                          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "id": {
                          "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "locationName": {
                          "description": "The name of the region in which the database account exists.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "failoverPolicies"
                ]
              },
              "op": "add",
              "from": "",
              "path": "/FailoverPolicies"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The failover policy for a given region of a database account.",
                "properties": {
                  "failoverPriority": {
                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "id": {
                    "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "locationName": {
                    "description": "The name of the region in which the database account exists.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/FailoverPolicy"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB Gremlin database.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB Gremlin database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB Gremlin database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB Gremlin database resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB Gremlin database",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB SQL database",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB Gremlin database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB Gremlin database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB Gremlin database.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB SQL database",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB Gremlin database resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB Gremlin database",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the Gremlin databases and their properties.",
                "properties": {
                  "value": {
                    "description": "List of Gremlin databases and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB Gremlin database.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB SQL database",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB Gremlin database resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB Gremlin database",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Gremlin database resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB Gremlin database",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinDatabaseResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB Gremlin graph.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB Gremlin graph resource object",
                        "properties": {
                          "conflictResolutionPolicy": {
                            "description": "The conflict resolution policy for the container.",
                            "properties": {
                              "conflictResolutionPath": {
                                "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                "type": "string"
                              },
                              "conflictResolutionProcedure": {
                                "description": "The procedure to resolve conflicts in the case of custom mode.",
                                "type": "string"
                              },
                              "mode": {
                                "default": "LastWriterWins",
                                "description": "Indicates the conflict resolution mode.",
                                "enum": [
                                  "LastWriterWins",
                                  "Custom"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ConflictResolutionMode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "defaultTtl": {
                            "description": "Default time to live",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB Gremlin graph",
                            "type": "string"
                          },
                          "indexingPolicy": {
                            "description": "Cosmos DB indexing policy",
                            "properties": {
                              "automatic": {
                                "description": "Indicates if the indexing policy is automatic",
                                "type": "boolean"
                              },
                              "compositeIndexes": {
                                "description": "List of composite path list",
                                "items": {
                                  "description": "List of composite path",
                                  "items": {
                                    "properties": {
                                      "order": {
                                        "description": "Sort order for composite paths.",
                                        "enum": [
                                          "Ascending",
                                          "Descending"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "CompositePathSortOrder"
                                        }
                                      },
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "excludedPaths": {
                                "description": "List of paths to exclude from indexing",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "includedPaths": {
                                "description": "List of paths to include in the indexing",
                                "items": {
                                  "description": "The paths that are included in indexing",
                                  "properties": {
                                    "indexes": {
                                      "description": "List of indexes for this path",
                                      "items": {
                                        "description": "The indexes for the path.",
                                        "properties": {
                                          "dataType": {
                                            "default": "String",
                                            "description": "The datatype for which the indexing behavior is applied to.",
                                            "enum": [
                                              "String",
                                              "Number",
                                              "Point",
                                              "Polygon",
                                              "LineString",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "DataType"
                                            }
                                          },
                                          "kind": {
                                            "default": "Hash",
                                            "description": "Indicates the type of index.",
                                            "enum": [
                                              "Hash",
                                              "Range",
                                              "Spatial"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "IndexKind"
                                            }
                                          },
                                          "precision": {
                                            "description": "The precision of the index. -1 is maximum precision.",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "indexingMode": {
                                "default": "Consistent",
                                "description": "Indicates the indexing mode.",
                                "enum": [
                                  "Consistent",
                                  "Lazy",
                                  "None"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "IndexingMode"
                                }
                              },
                              "spatialIndexes": {
                                "description": "List of spatial specifics",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    },
                                    "types": {
                                      "description": "List of path's spatial type",
                                      "items": {
                                        "description": "Indicates the spatial type of index.",
                                        "enum": [
                                          "Point",
                                          "LineString",
                                          "Polygon",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "SpatialType"
                                        }
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "partitionKey": {
                            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                            "properties": {
                              "kind": {
                                "default": "Hash",
                                "description": "Indicates the kind of algorithm used for partitioning",
                                "enum": [
                                  "Hash",
                                  "Range"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PartitionKind"
                                }
                              },
                              "paths": {
                                "description": "List of paths using which data within the container can be partitioned",
                                "items": {
                                  "description": "A path. These typically start with root (/path)",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "version": {
                                "description": "Indicates the version of the partition key definition",
                                "format": "int32",
                                "maximum": 2,
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "uniqueKeyPolicy": {
                            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                            "properties": {
                              "uniqueKeys": {
                                "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                "items": {
                                  "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                  "properties": {
                                    "paths": {
                                      "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A path. These typically start with root (/path)",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB Gremlin graph resource object",
                    "properties": {
                      "conflictResolutionPolicy": {
                        "description": "The conflict resolution policy for the container.",
                        "properties": {
                          "conflictResolutionPath": {
                            "description": "The conflict resolution path in the case of LastWriterWins mode.",
                            "type": "string"
                          },
                          "conflictResolutionProcedure": {
                            "description": "The procedure to resolve conflicts in the case of custom mode.",
                            "type": "string"
                          },
                          "mode": {
                            "default": "LastWriterWins",
                            "description": "Indicates the conflict resolution mode.",
                            "enum": [
                              "LastWriterWins",
                              "Custom"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ConflictResolutionMode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "defaultTtl": {
                        "description": "Default time to live",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB Gremlin graph",
                        "type": "string"
                      },
                      "indexingPolicy": {
                        "description": "Cosmos DB indexing policy",
                        "properties": {
                          "automatic": {
                            "description": "Indicates if the indexing policy is automatic",
                            "type": "boolean"
                          },
                          "compositeIndexes": {
                            "description": "List of composite path list",
                            "items": {
                              "description": "List of composite path",
                              "items": {
                                "properties": {
                                  "order": {
                                    "description": "Sort order for composite paths.",
                                    "enum": [
                                      "Ascending",
                                      "Descending"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "CompositePathSortOrder"
                                    }
                                  },
                                  "path": {
                                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "excludedPaths": {
                            "description": "List of paths to exclude from indexing",
                            "items": {
                              "properties": {
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "includedPaths": {
                            "description": "List of paths to include in the indexing",
                            "items": {
                              "description": "The paths that are included in indexing",
                              "properties": {
                                "indexes": {
                                  "description": "List of indexes for this path",
                                  "items": {
                                    "description": "The indexes for the path.",
                                    "properties": {
                                      "dataType": {
                                        "default": "String",
                                        "description": "The datatype for which the indexing behavior is applied to.",
                                        "enum": [
                                          "String",
                                          "Number",
                                          "Point",
                                          "Polygon",
                                          "LineString",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "DataType"
                                        }
                                      },
                                      "kind": {
                                        "default": "Hash",
                                        "description": "Indicates the type of index.",
                                        "enum": [
                                          "Hash",
                                          "Range",
                                          "Spatial"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "IndexKind"
                                        }
                                      },
                                      "precision": {
                                        "description": "The precision of the index. -1 is maximum precision.",
                                        "type": "integer"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "indexingMode": {
                            "default": "Consistent",
                            "description": "Indicates the indexing mode.",
                            "enum": [
                              "Consistent",
                              "Lazy",
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "IndexingMode"
                            }
                          },
                          "spatialIndexes": {
                            "description": "List of spatial specifics",
                            "items": {
                              "properties": {
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                },
                                "types": {
                                  "description": "List of path's spatial type",
                                  "items": {
                                    "description": "Indicates the spatial type of index.",
                                    "enum": [
                                      "Point",
                                      "LineString",
                                      "Polygon",
                                      "MultiPolygon"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "SpatialType"
                                    }
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "partitionKey": {
                        "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                        "properties": {
                          "kind": {
                            "default": "Hash",
                            "description": "Indicates the kind of algorithm used for partitioning",
                            "enum": [
                              "Hash",
                              "Range"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PartitionKind"
                            }
                          },
                          "paths": {
                            "description": "List of paths using which data within the container can be partitioned",
                            "items": {
                              "description": "A path. These typically start with root (/path)",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "version": {
                            "description": "Indicates the version of the partition key definition",
                            "format": "int32",
                            "maximum": 2,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "uniqueKeyPolicy": {
                        "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                        "properties": {
                          "uniqueKeys": {
                            "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                            "items": {
                              "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                              "properties": {
                                "paths": {
                                  "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                  "items": {
                                    "description": "A path. These typically start with root (/path)",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB Gremlin graph",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB Gremlin graph resource object",
                        "properties": {
                          "conflictResolutionPolicy": {
                            "description": "The conflict resolution policy for the container.",
                            "properties": {
                              "conflictResolutionPath": {
                                "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                "type": "string"
                              },
                              "conflictResolutionProcedure": {
                                "description": "The procedure to resolve conflicts in the case of custom mode.",
                                "type": "string"
                              },
                              "mode": {
                                "default": "LastWriterWins",
                                "description": "Indicates the conflict resolution mode.",
                                "enum": [
                                  "LastWriterWins",
                                  "Custom"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ConflictResolutionMode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "defaultTtl": {
                            "description": "Default time to live",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB Gremlin graph",
                            "type": "string"
                          },
                          "indexingPolicy": {
                            "description": "Cosmos DB indexing policy",
                            "properties": {
                              "automatic": {
                                "description": "Indicates if the indexing policy is automatic",
                                "type": "boolean"
                              },
                              "compositeIndexes": {
                                "description": "List of composite path list",
                                "items": {
                                  "description": "List of composite path",
                                  "items": {
                                    "properties": {
                                      "order": {
                                        "description": "Sort order for composite paths.",
                                        "enum": [
                                          "Ascending",
                                          "Descending"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "CompositePathSortOrder"
                                        }
                                      },
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "excludedPaths": {
                                "description": "List of paths to exclude from indexing",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "includedPaths": {
                                "description": "List of paths to include in the indexing",
                                "items": {
                                  "description": "The paths that are included in indexing",
                                  "properties": {
                                    "indexes": {
                                      "description": "List of indexes for this path",
                                      "items": {
                                        "description": "The indexes for the path.",
                                        "properties": {
                                          "dataType": {
                                            "default": "String",
                                            "description": "The datatype for which the indexing behavior is applied to.",
                                            "enum": [
                                              "String",
                                              "Number",
                                              "Point",
                                              "Polygon",
                                              "LineString",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "DataType"
                                            }
                                          },
                                          "kind": {
                                            "default": "Hash",
                                            "description": "Indicates the type of index.",
                                            "enum": [
                                              "Hash",
                                              "Range",
                                              "Spatial"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "IndexKind"
                                            }
                                          },
                                          "precision": {
                                            "description": "The precision of the index. -1 is maximum precision.",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "indexingMode": {
                                "default": "Consistent",
                                "description": "Indicates the indexing mode.",
                                "enum": [
                                  "Consistent",
                                  "Lazy",
                                  "None"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "IndexingMode"
                                }
                              },
                              "spatialIndexes": {
                                "description": "List of spatial specifics",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    },
                                    "types": {
                                      "description": "List of path's spatial type",
                                      "items": {
                                        "description": "Indicates the spatial type of index.",
                                        "enum": [
                                          "Point",
                                          "LineString",
                                          "Polygon",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "SpatialType"
                                        }
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "partitionKey": {
                            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                            "properties": {
                              "kind": {
                                "default": "Hash",
                                "description": "Indicates the kind of algorithm used for partitioning",
                                "enum": [
                                  "Hash",
                                  "Range"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PartitionKind"
                                }
                              },
                              "paths": {
                                "description": "List of paths using which data within the container can be partitioned",
                                "items": {
                                  "description": "A path. These typically start with root (/path)",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "version": {
                                "description": "Indicates the version of the partition key definition",
                                "format": "int32",
                                "maximum": 2,
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "uniqueKeyPolicy": {
                            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                            "properties": {
                              "uniqueKeys": {
                                "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                "items": {
                                  "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                  "properties": {
                                    "paths": {
                                      "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A path. These typically start with root (/path)",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB Gremlin graph.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB Gremlin graph",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB Gremlin graph resource object",
                            "properties": {
                              "conflictResolutionPolicy": {
                                "description": "The conflict resolution policy for the container.",
                                "properties": {
                                  "conflictResolutionPath": {
                                    "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                    "type": "string"
                                  },
                                  "conflictResolutionProcedure": {
                                    "description": "The procedure to resolve conflicts in the case of custom mode.",
                                    "type": "string"
                                  },
                                  "mode": {
                                    "default": "LastWriterWins",
                                    "description": "Indicates the conflict resolution mode.",
                                    "enum": [
                                      "LastWriterWins",
                                      "Custom"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ConflictResolutionMode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "defaultTtl": {
                                "description": "Default time to live",
                                "type": "integer"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB Gremlin graph",
                                "type": "string"
                              },
                              "indexingPolicy": {
                                "description": "Cosmos DB indexing policy",
                                "properties": {
                                  "automatic": {
                                    "description": "Indicates if the indexing policy is automatic",
                                    "type": "boolean"
                                  },
                                  "compositeIndexes": {
                                    "description": "List of composite path list",
                                    "items": {
                                      "description": "List of composite path",
                                      "items": {
                                        "properties": {
                                          "order": {
                                            "description": "Sort order for composite paths.",
                                            "enum": [
                                              "Ascending",
                                              "Descending"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "CompositePathSortOrder"
                                            }
                                          },
                                          "path": {
                                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "type": "array"
                                  },
                                  "excludedPaths": {
                                    "description": "List of paths to exclude from indexing",
                                    "items": {
                                      "properties": {
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "includedPaths": {
                                    "description": "List of paths to include in the indexing",
                                    "items": {
                                      "description": "The paths that are included in indexing",
                                      "properties": {
                                        "indexes": {
                                          "description": "List of indexes for this path",
                                          "items": {
                                            "description": "The indexes for the path.",
                                            "properties": {
                                              "dataType": {
                                                "default": "String",
                                                "description": "The datatype for which the indexing behavior is applied to.",
                                                "enum": [
                                                  "String",
                                                  "Number",
                                                  "Point",
                                                  "Polygon",
                                                  "LineString",
                                                  "MultiPolygon"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "DataType"
                                                }
                                              },
                                              "kind": {
                                                "default": "Hash",
                                                "description": "Indicates the type of index.",
                                                "enum": [
                                                  "Hash",
                                                  "Range",
                                                  "Spatial"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "IndexKind"
                                                }
                                              },
                                              "precision": {
                                                "description": "The precision of the index. -1 is maximum precision.",
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "indexingMode": {
                                    "default": "Consistent",
                                    "description": "Indicates the indexing mode.",
                                    "enum": [
                                      "Consistent",
                                      "Lazy",
                                      "None"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IndexingMode"
                                    }
                                  },
                                  "spatialIndexes": {
                                    "description": "List of spatial specifics",
                                    "items": {
                                      "properties": {
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        },
                                        "types": {
                                          "description": "List of path's spatial type",
                                          "items": {
                                            "description": "Indicates the spatial type of index.",
                                            "enum": [
                                              "Point",
                                              "LineString",
                                              "Polygon",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "SpatialType"
                                            }
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "partitionKey": {
                                "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                "properties": {
                                  "kind": {
                                    "default": "Hash",
                                    "description": "Indicates the kind of algorithm used for partitioning",
                                    "enum": [
                                      "Hash",
                                      "Range"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "PartitionKind"
                                    }
                                  },
                                  "paths": {
                                    "description": "List of paths using which data within the container can be partitioned",
                                    "items": {
                                      "description": "A path. These typically start with root (/path)",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "version": {
                                    "description": "Indicates the version of the partition key definition",
                                    "format": "int32",
                                    "maximum": 2,
                                    "minimum": 1,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "uniqueKeyPolicy": {
                                "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                "properties": {
                                  "uniqueKeys": {
                                    "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                    "items": {
                                      "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                      "properties": {
                                        "paths": {
                                          "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                          "items": {
                                            "description": "A path. These typically start with root (/path)",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the graphs and their properties.",
                "properties": {
                  "value": {
                    "description": "List of graphs and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB Gremlin graph.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB Gremlin graph",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB Gremlin graph resource object",
                                  "properties": {
                                    "conflictResolutionPolicy": {
                                      "description": "The conflict resolution policy for the container.",
                                      "properties": {
                                        "conflictResolutionPath": {
                                          "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                          "type": "string"
                                        },
                                        "conflictResolutionProcedure": {
                                          "description": "The procedure to resolve conflicts in the case of custom mode.",
                                          "type": "string"
                                        },
                                        "mode": {
                                          "default": "LastWriterWins",
                                          "description": "Indicates the conflict resolution mode.",
                                          "enum": [
                                            "LastWriterWins",
                                            "Custom"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ConflictResolutionMode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "defaultTtl": {
                                      "description": "Default time to live",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB Gremlin graph",
                                      "type": "string"
                                    },
                                    "indexingPolicy": {
                                      "description": "Cosmos DB indexing policy",
                                      "properties": {
                                        "automatic": {
                                          "description": "Indicates if the indexing policy is automatic",
                                          "type": "boolean"
                                        },
                                        "compositeIndexes": {
                                          "description": "List of composite path list",
                                          "items": {
                                            "description": "List of composite path",
                                            "items": {
                                              "properties": {
                                                "order": {
                                                  "description": "Sort order for composite paths.",
                                                  "enum": [
                                                    "Ascending",
                                                    "Descending"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "CompositePathSortOrder"
                                                  }
                                                },
                                                "path": {
                                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "excludedPaths": {
                                          "description": "List of paths to exclude from indexing",
                                          "items": {
                                            "properties": {
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "includedPaths": {
                                          "description": "List of paths to include in the indexing",
                                          "items": {
                                            "description": "The paths that are included in indexing",
                                            "properties": {
                                              "indexes": {
                                                "description": "List of indexes for this path",
                                                "items": {
                                                  "description": "The indexes for the path.",
                                                  "properties": {
                                                    "dataType": {
                                                      "default": "String",
                                                      "description": "The datatype for which the indexing behavior is applied to.",
                                                      "enum": [
                                                        "String",
                                                        "Number",
                                                        "Point",
                                                        "Polygon",
                                                        "LineString",
                                                        "MultiPolygon"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "DataType"
                                                      }
                                                    },
                                                    "kind": {
                                                      "default": "Hash",
                                                      "description": "Indicates the type of index.",
                                                      "enum": [
                                                        "Hash",
                                                        "Range",
                                                        "Spatial"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "IndexKind"
                                                      }
                                                    },
                                                    "precision": {
                                                      "description": "The precision of the index. -1 is maximum precision.",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "indexingMode": {
                                          "default": "Consistent",
                                          "description": "Indicates the indexing mode.",
                                          "enum": [
                                            "Consistent",
                                            "Lazy",
                                            "None"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "IndexingMode"
                                          }
                                        },
                                        "spatialIndexes": {
                                          "description": "List of spatial specifics",
                                          "items": {
                                            "properties": {
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              },
                                              "types": {
                                                "description": "List of path's spatial type",
                                                "items": {
                                                  "description": "Indicates the spatial type of index.",
                                                  "enum": [
                                                    "Point",
                                                    "LineString",
                                                    "Polygon",
                                                    "MultiPolygon"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "SpatialType"
                                                  }
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "partitionKey": {
                                      "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                      "properties": {
                                        "kind": {
                                          "default": "Hash",
                                          "description": "Indicates the kind of algorithm used for partitioning",
                                          "enum": [
                                            "Hash",
                                            "Range"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PartitionKind"
                                          }
                                        },
                                        "paths": {
                                          "description": "List of paths using which data within the container can be partitioned",
                                          "items": {
                                            "description": "A path. These typically start with root (/path)",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "version": {
                                          "description": "Indicates the version of the partition key definition",
                                          "format": "int32",
                                          "maximum": 2,
                                          "minimum": 1,
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "uniqueKeyPolicy": {
                                      "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                      "properties": {
                                        "uniqueKeys": {
                                          "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                          "items": {
                                            "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                            "properties": {
                                              "paths": {
                                                "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                                "items": {
                                                  "description": "A path. These typically start with root (/path)",
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Gremlin graph resource object",
                "properties": {
                  "conflictResolutionPolicy": {
                    "description": "The conflict resolution policy for the container.",
                    "properties": {
                      "conflictResolutionPath": {
                        "description": "The conflict resolution path in the case of LastWriterWins mode.",
                        "type": "string"
                      },
                      "conflictResolutionProcedure": {
                        "description": "The procedure to resolve conflicts in the case of custom mode.",
                        "type": "string"
                      },
                      "mode": {
                        "default": "LastWriterWins",
                        "description": "Indicates the conflict resolution mode.",
                        "enum": [
                          "LastWriterWins",
                          "Custom"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ConflictResolutionMode"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "defaultTtl": {
                    "description": "Default time to live",
                    "type": "integer"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB Gremlin graph",
                    "type": "string"
                  },
                  "indexingPolicy": {
                    "description": "Cosmos DB indexing policy",
                    "properties": {
                      "automatic": {
                        "description": "Indicates if the indexing policy is automatic",
                        "type": "boolean"
                      },
                      "compositeIndexes": {
                        "description": "List of composite path list",
                        "items": {
                          "description": "List of composite path",
                          "items": {
                            "properties": {
                              "order": {
                                "description": "Sort order for composite paths.",
                                "enum": [
                                  "Ascending",
                                  "Descending"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "CompositePathSortOrder"
                                }
                              },
                              "path": {
                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "excludedPaths": {
                        "description": "List of paths to exclude from indexing",
                        "items": {
                          "properties": {
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "includedPaths": {
                        "description": "List of paths to include in the indexing",
                        "items": {
                          "description": "The paths that are included in indexing",
                          "properties": {
                            "indexes": {
                              "description": "List of indexes for this path",
                              "items": {
                                "description": "The indexes for the path.",
                                "properties": {
                                  "dataType": {
                                    "default": "String",
                                    "description": "The datatype for which the indexing behavior is applied to.",
                                    "enum": [
                                      "String",
                                      "Number",
                                      "Point",
                                      "Polygon",
                                      "LineString",
                                      "MultiPolygon"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "DataType"
                                    }
                                  },
                                  "kind": {
                                    "default": "Hash",
                                    "description": "Indicates the type of index.",
                                    "enum": [
                                      "Hash",
                                      "Range",
                                      "Spatial"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IndexKind"
                                    }
                                  },
                                  "precision": {
                                    "description": "The precision of the index. -1 is maximum precision.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "indexingMode": {
                        "default": "Consistent",
                        "description": "Indicates the indexing mode.",
                        "enum": [
                          "Consistent",
                          "Lazy",
                          "None"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "IndexingMode"
                        }
                      },
                      "spatialIndexes": {
                        "description": "List of spatial specifics",
                        "items": {
                          "properties": {
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            },
                            "types": {
                              "description": "List of path's spatial type",
                              "items": {
                                "description": "Indicates the spatial type of index.",
                                "enum": [
                                  "Point",
                                  "LineString",
                                  "Polygon",
                                  "MultiPolygon"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SpatialType"
                                }
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "partitionKey": {
                    "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                    "properties": {
                      "kind": {
                        "default": "Hash",
                        "description": "Indicates the kind of algorithm used for partitioning",
                        "enum": [
                          "Hash",
                          "Range"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PartitionKind"
                        }
                      },
                      "paths": {
                        "description": "List of paths using which data within the container can be partitioned",
                        "items": {
                          "description": "A path. These typically start with root (/path)",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "version": {
                        "description": "Indicates the version of the partition key definition",
                        "format": "int32",
                        "maximum": 2,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "uniqueKeyPolicy": {
                    "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                    "properties": {
                      "uniqueKeys": {
                        "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                        "items": {
                          "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                          "properties": {
                            "paths": {
                              "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                              "items": {
                                "description": "A path. These typically start with root (/path)",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/GremlinGraphResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/IPRangeFilter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The paths that are included in indexing",
                "properties": {
                  "indexes": {
                    "description": "List of indexes for this path",
                    "items": {
                      "description": "The indexes for the path.",
                      "properties": {
                        "dataType": {
                          "default": "String",
                          "description": "The datatype for which the indexing behavior is applied to.",
                          "enum": [
                            "String",
                            "Number",
                            "Point",
                            "Polygon",
                            "LineString",
                            "MultiPolygon"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "DataType"
                          }
                        },
                        "kind": {
                          "default": "Hash",
                          "description": "Indicates the type of index.",
                          "enum": [
                            "Hash",
                            "Range",
                            "Spatial"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "IndexKind"
                          }
                        },
                        "precision": {
                          "description": "The precision of the index. -1 is maximum precision.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "path": {
                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/IncludedPath"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The indexes for the path.",
                "properties": {
                  "dataType": {
                    "default": "String",
                    "description": "The datatype for which the indexing behavior is applied to.",
                    "enum": [
                      "String",
                      "Number",
                      "Point",
                      "Polygon",
                      "LineString",
                      "MultiPolygon"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "DataType"
                    }
                  },
                  "kind": {
                    "default": "Hash",
                    "description": "Indicates the type of index.",
                    "enum": [
                      "Hash",
                      "Range",
                      "Spatial"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "IndexKind"
                    }
                  },
                  "precision": {
                    "description": "The precision of the index. -1 is maximum precision.",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Indexes"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB indexing policy",
                "properties": {
                  "automatic": {
                    "description": "Indicates if the indexing policy is automatic",
                    "type": "boolean"
                  },
                  "compositeIndexes": {
                    "description": "List of composite path list",
                    "items": {
                      "description": "List of composite path",
                      "items": {
                        "properties": {
                          "order": {
                            "description": "Sort order for composite paths.",
                            "enum": [
                              "Ascending",
                              "Descending"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "CompositePathSortOrder"
                            }
                          },
                          "path": {
                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "excludedPaths": {
                    "description": "List of paths to exclude from indexing",
                    "items": {
                      "properties": {
                        "path": {
                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "includedPaths": {
                    "description": "List of paths to include in the indexing",
                    "items": {
                      "description": "The paths that are included in indexing",
                      "properties": {
                        "indexes": {
                          "description": "List of indexes for this path",
                          "items": {
                            "description": "The indexes for the path.",
                            "properties": {
                              "dataType": {
                                "default": "String",
                                "description": "The datatype for which the indexing behavior is applied to.",
                                "enum": [
                                  "String",
                                  "Number",
                                  "Point",
                                  "Polygon",
                                  "LineString",
                                  "MultiPolygon"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "DataType"
                                }
                              },
                              "kind": {
                                "default": "Hash",
                                "description": "Indicates the type of index.",
                                "enum": [
                                  "Hash",
                                  "Range",
                                  "Spatial"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "IndexKind"
                                }
                              },
                              "precision": {
                                "description": "The precision of the index. -1 is maximum precision.",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "path": {
                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "indexingMode": {
                    "default": "Consistent",
                    "description": "Indicates the indexing mode.",
                    "enum": [
                      "Consistent",
                      "Lazy",
                      "None"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "IndexingMode"
                    }
                  },
                  "spatialIndexes": {
                    "description": "List of spatial specifics",
                    "items": {
                      "properties": {
                        "path": {
                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                          "type": "string"
                        },
                        "types": {
                          "description": "List of path's spatial type",
                          "items": {
                            "description": "Indicates the spatial type of index.",
                            "enum": [
                              "Point",
                              "LineString",
                              "Polygon",
                              "MultiPolygon"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "SpatialType"
                            }
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/IndexingPolicy"
            },
            {
              "oldValue": null,
              "value": {
                "description": "A Key.",
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/Key"
            },
            {
              "oldValue": null,
              "value": {
                "description": "A region in which the Azure Cosmos DB database account is deployed.",
                "properties": {
                  "documentEndpoint": {
                    "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/",
                    "readOnly": true,
                    "type": "string"
                  },
                  "failoverPriority": {
                    "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "id": {
                    "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "isZoneRedundant": {
                    "description": "Flag to indicate whether or not this region is an AvailabilityZone region",
                    "type": "boolean"
                  },
                  "locationName": {
                    "description": "The name of the region.",
                    "type": "string"
                  },
                  "provisioningState": {
                    "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Location"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Metric data",
                "properties": {
                  "endTime": {
                    "description": "The end time for the metric (ISO-8601 format).",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "metricValues": {
                    "description": "The metric values for the specified time window and timestep.",
                    "items": {
                      "description": "Represents metrics values.",
                      "properties": {
                        "_count": {
                          "description": "The number of values for the metric.",
                          "format": "int32",
                          "readOnly": true,
                          "type": "number"
                        },
                        "average": {
                          "description": "The average value of the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "maximum": {
                          "description": "The max value of the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "minimum": {
                          "description": "The min value of the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "timestamp": {
                          "description": "The metric timestamp (ISO-8601 format).",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "total": {
                          "description": "The total value of the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "name": {
                    "description": "A metric name.",
                    "properties": {
                      "localizedValue": {
                        "description": "The friendly name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "The name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "startTime": {
                    "description": "The start time for the metric (ISO-8601 format).",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "timeGrain": {
                    "description": "The time grain to be used to summarize the metric values.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit of the metric.",
                    "enum": [
                      "Count",
                      "Bytes",
                      "Seconds",
                      "Percent",
                      "CountPerSecond",
                      "BytesPerSecond",
                      "Milliseconds"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "UnitType"
                    }
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/Metric"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The availability of the metric.",
                "properties": {
                  "retention": {
                    "description": "The retention for the metric values.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "timeGrain": {
                    "description": "The time grain to be used to summarize the metric values.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricAvailability"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The definition of a metric.",
                "properties": {
                  "metricAvailabilities": {
                    "description": "The list of metric availabilities for the account.",
                    "items": {
                      "description": "The availability of the metric.",
                      "properties": {
                        "retention": {
                          "description": "The retention for the metric values.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "timeGrain": {
                          "description": "The time grain to be used to summarize the metric values.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "name": {
                    "description": "A metric name.",
                    "properties": {
                      "localizedValue": {
                        "description": "The friendly name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "The name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "primaryAggregationType": {
                    "description": "The primary aggregation type of the metric.",
                    "enum": [
                      "None",
                      "Average",
                      "Total",
                      "Minimum",
                      "Maximum",
                      "Last"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "PrimaryAggregationType"
                    }
                  },
                  "resourceUri": {
                    "description": "The resource uri of the database.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit of the metric.",
                    "enum": [
                      "Count",
                      "Bytes",
                      "Seconds",
                      "Percent",
                      "CountPerSecond",
                      "BytesPerSecond",
                      "Milliseconds"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "UnitType"
                    }
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricDefinition"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list metric definitions request.",
                "properties": {
                  "value": {
                    "description": "The list of metric definitions for the account.",
                    "items": {
                      "description": "The definition of a metric.",
                      "properties": {
                        "metricAvailabilities": {
                          "description": "The list of metric availabilities for the account.",
                          "items": {
                            "description": "The availability of the metric.",
                            "properties": {
                              "retention": {
                                "description": "The retention for the metric values.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "timeGrain": {
                                "description": "The time grain to be used to summarize the metric values.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        },
                        "name": {
                          "description": "A metric name.",
                          "properties": {
                            "localizedValue": {
                              "description": "The friendly name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "The name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "primaryAggregationType": {
                          "description": "The primary aggregation type of the metric.",
                          "enum": [
                            "None",
                            "Average",
                            "Total",
                            "Minimum",
                            "Maximum",
                            "Last"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "PrimaryAggregationType"
                          }
                        },
                        "resourceUri": {
                          "description": "The resource uri of the database.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "unit": {
                          "description": "The unit of the metric.",
                          "enum": [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Milliseconds"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "UnitType"
                          }
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricDefinitionsListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list metrics request.",
                "properties": {
                  "value": {
                    "description": "The list of metrics for the account.",
                    "items": {
                      "description": "Metric data",
                      "properties": {
                        "endTime": {
                          "description": "The end time for the metric (ISO-8601 format).",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "metricValues": {
                          "description": "The metric values for the specified time window and timestep.",
                          "items": {
                            "description": "Represents metrics values.",
                            "properties": {
                              "_count": {
                                "description": "The number of values for the metric.",
                                "format": "int32",
                                "readOnly": true,
                                "type": "number"
                              },
                              "average": {
                                "description": "The average value of the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "maximum": {
                                "description": "The max value of the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "minimum": {
                                "description": "The min value of the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "timestamp": {
                                "description": "The metric timestamp (ISO-8601 format).",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "total": {
                                "description": "The total value of the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        },
                        "name": {
                          "description": "A metric name.",
                          "properties": {
                            "localizedValue": {
                              "description": "The friendly name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "The name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "startTime": {
                          "description": "The start time for the metric (ISO-8601 format).",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "timeGrain": {
                          "description": "The time grain to be used to summarize the metric values.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "unit": {
                          "description": "The unit of the metric.",
                          "enum": [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Milliseconds"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "UnitType"
                          }
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "A metric name.",
                "properties": {
                  "localizedValue": {
                    "description": "The friendly name of the metric.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "value": {
                    "description": "The name of the metric.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricName"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Represents metrics values.",
                "properties": {
                  "_count": {
                    "description": "The number of values for the metric.",
                    "format": "int32",
                    "readOnly": true,
                    "type": "number"
                  },
                  "average": {
                    "description": "The average value of the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "maximum": {
                    "description": "The max value of the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "minimum": {
                    "description": "The min value of the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "timestamp": {
                    "description": "The metric timestamp (ISO-8601 format).",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "total": {
                    "description": "The total value of the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MetricValue"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB MongoDB collection.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB MongoDB collection resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB MongoDB collection",
                            "type": "string"
                          },
                          "indexes": {
                            "description": "List of index keys",
                            "items": {
                              "description": "Cosmos DB MongoDB collection index key",
                              "properties": {
                                "key": {
                                  "description": "Cosmos DB MongoDB collection resource object",
                                  "properties": {
                                    "keys": {
                                      "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A Key.",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "options": {
                                  "description": "Cosmos DB MongoDB collection index options",
                                  "properties": {
                                    "expireAfterSeconds": {
                                      "description": "Expire after seconds",
                                      "type": "integer"
                                    },
                                    "unique": {
                                      "description": "Is unique or not",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "shardKey": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB MongoDB collection resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB MongoDB collection",
                        "type": "string"
                      },
                      "indexes": {
                        "description": "List of index keys",
                        "items": {
                          "description": "Cosmos DB MongoDB collection index key",
                          "properties": {
                            "key": {
                              "description": "Cosmos DB MongoDB collection resource object",
                              "properties": {
                                "keys": {
                                  "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                                  "items": {
                                    "description": "A Key.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "options": {
                              "description": "Cosmos DB MongoDB collection index options",
                              "properties": {
                                "expireAfterSeconds": {
                                  "description": "Expire after seconds",
                                  "type": "integer"
                                },
                                "unique": {
                                  "description": "Is unique or not",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "shardKey": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                        "type": "object"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB MongoDB collection",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB MongoDB collection resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB MongoDB collection",
                            "type": "string"
                          },
                          "indexes": {
                            "description": "List of index keys",
                            "items": {
                              "description": "Cosmos DB MongoDB collection index key",
                              "properties": {
                                "key": {
                                  "description": "Cosmos DB MongoDB collection resource object",
                                  "properties": {
                                    "keys": {
                                      "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A Key.",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "options": {
                                  "description": "Cosmos DB MongoDB collection index options",
                                  "properties": {
                                    "expireAfterSeconds": {
                                      "description": "Expire after seconds",
                                      "type": "integer"
                                    },
                                    "unique": {
                                      "description": "Is unique or not",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "shardKey": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB MongoDB collection.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB MongoDB collection",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB MongoDB collection resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB MongoDB collection",
                                "type": "string"
                              },
                              "indexes": {
                                "description": "List of index keys",
                                "items": {
                                  "description": "Cosmos DB MongoDB collection index key",
                                  "properties": {
                                    "key": {
                                      "description": "Cosmos DB MongoDB collection resource object",
                                      "properties": {
                                        "keys": {
                                          "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                                          "items": {
                                            "description": "A Key.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "options": {
                                      "description": "Cosmos DB MongoDB collection index options",
                                      "properties": {
                                        "expireAfterSeconds": {
                                          "description": "Expire after seconds",
                                          "type": "integer"
                                        },
                                        "unique": {
                                          "description": "Is unique or not",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "shardKey": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                                "type": "object"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the MongoDB collections and their properties.",
                "properties": {
                  "value": {
                    "description": "List of MongoDB collections and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB MongoDB collection.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB MongoDB collection",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB MongoDB collection resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB MongoDB collection",
                                      "type": "string"
                                    },
                                    "indexes": {
                                      "description": "List of index keys",
                                      "items": {
                                        "description": "Cosmos DB MongoDB collection index key",
                                        "properties": {
                                          "key": {
                                            "description": "Cosmos DB MongoDB collection resource object",
                                            "properties": {
                                              "keys": {
                                                "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                                                "items": {
                                                  "description": "A Key.",
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "options": {
                                            "description": "Cosmos DB MongoDB collection index options",
                                            "properties": {
                                              "expireAfterSeconds": {
                                                "description": "Expire after seconds",
                                                "type": "integer"
                                              },
                                              "unique": {
                                                "description": "Is unique or not",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "shardKey": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB MongoDB collection resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB MongoDB collection",
                    "type": "string"
                  },
                  "indexes": {
                    "description": "List of index keys",
                    "items": {
                      "description": "Cosmos DB MongoDB collection index key",
                      "properties": {
                        "key": {
                          "description": "Cosmos DB MongoDB collection resource object",
                          "properties": {
                            "keys": {
                              "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                              "items": {
                                "description": "A Key.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "options": {
                          "description": "Cosmos DB MongoDB collection index options",
                          "properties": {
                            "expireAfterSeconds": {
                              "description": "Expire after seconds",
                              "type": "integer"
                            },
                            "unique": {
                              "description": "Is unique or not",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "shardKey": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBCollectionResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB MongoDB database.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB MongoDB database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB MongoDB database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB MongoDB database resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB MongoDB database",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB MongoDB database",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB MongoDB database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB MongoDB database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB MongoDB database.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB MongoDB database",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB MongoDB database resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB MongoDB database",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the MongoDB databases and their properties.",
                "properties": {
                  "value": {
                    "description": "List of MongoDB databases and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB MongoDB database.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB MongoDB database",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB MongoDB database resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB MongoDB database",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB MongoDB database resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB MongoDB database",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoDBDatabaseResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB MongoDB collection index key",
                "properties": {
                  "key": {
                    "description": "Cosmos DB MongoDB collection resource object",
                    "properties": {
                      "keys": {
                        "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                        "items": {
                          "description": "A Key.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Cosmos DB MongoDB collection index options",
                    "properties": {
                      "expireAfterSeconds": {
                        "description": "Expire after seconds",
                        "type": "integer"
                      },
                      "unique": {
                        "description": "Is unique or not",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoIndex"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB MongoDB collection resource object",
                "properties": {
                  "keys": {
                    "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
                    "items": {
                      "description": "A Key.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoIndexKeys"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB MongoDB collection index options",
                "properties": {
                  "expireAfterSeconds": {
                    "description": "Expire after seconds",
                    "type": "integer"
                  },
                  "unique": {
                    "description": "Is unique or not",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/MongoIndexOptions"
            },
            {
              "oldValue": null,
              "value": {
                "description": "REST API operation",
                "properties": {
                  "display": {
                    "description": "The object that represents the operation.",
                    "properties": {
                      "Description": {
                        "description": "Description of operation",
                        "type": "string"
                      },
                      "Operation": {
                        "description": "Operation type: Read, write, delete, etc.",
                        "type": "string"
                      },
                      "Provider": {
                        "description": "Service provider: Microsoft.ResourceProvider",
                        "type": "string"
                      },
                      "Resource": {
                        "description": "Resource on which the operation is performed: Profile, endpoint, etc.",
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "Operation name: {provider}/{resource}/{operation}",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Operation"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.",
                "properties": {
                  "nextLink": {
                    "description": "URL to get the next set of operation list results if there are any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "List of operations supported by the Resource Provider.",
                    "items": {
                      "description": "REST API operation",
                      "properties": {
                        "display": {
                          "description": "The object that represents the operation.",
                          "properties": {
                            "Description": {
                              "description": "Description of operation",
                              "type": "string"
                            },
                            "Operation": {
                              "description": "Operation type: Read, write, delete, etc.",
                              "type": "string"
                            },
                            "Provider": {
                              "description": "Service provider: Microsoft.ResourceProvider",
                              "type": "string"
                            },
                            "Resource": {
                              "description": "Resource on which the operation is performed: Profile, endpoint, etc.",
                              "type": "string"
                            }
                          }
                        },
                        "name": {
                          "description": "Operation name: {provider}/{resource}/{operation}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/OperationListResult"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "Metric data",
                    "properties": {
                      "endTime": {
                        "description": "The end time for the metric (ISO-8601 format).",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string"
                      },
                      "metricValues": {
                        "description": "The metric values for the specified time window and timestep.",
                        "items": {
                          "description": "Represents metrics values.",
                          "properties": {
                            "_count": {
                              "description": "The number of values for the metric.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "number"
                            },
                            "average": {
                              "description": "The average value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "maximum": {
                              "description": "The max value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "minimum": {
                              "description": "The min value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "timestamp": {
                              "description": "The metric timestamp (ISO-8601 format).",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "total": {
                              "description": "The total value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "array"
                      },
                      "name": {
                        "description": "A metric name.",
                        "properties": {
                          "localizedValue": {
                            "description": "The friendly name of the metric.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "The name of the metric.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "startTime": {
                        "description": "The start time for the metric (ISO-8601 format).",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string"
                      },
                      "timeGrain": {
                        "description": "The time grain to be used to summarize the metric values.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unit": {
                        "description": "The unit of the metric.",
                        "enum": [
                          "Count",
                          "Bytes",
                          "Seconds",
                          "Percent",
                          "CountPerSecond",
                          "BytesPerSecond",
                          "Milliseconds"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "UnitType"
                        }
                      }
                    }
                  }
                ],
                "description": "The metric values for a single partition.",
                "properties": {
                  "partitionId": {
                    "description": "The partition id (GUID identifier) of the metric values.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "partitionKeyRangeId": {
                    "description": "The partition key range id (integer identifier) of the metric values.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PartitionMetric"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list partition metrics request.",
                "properties": {
                  "value": {
                    "description": "The list of partition-level metrics for the account.",
                    "items": {
                      "allOf": [
                        {
                          "description": "Metric data",
                          "properties": {
                            "endTime": {
                              "description": "The end time for the metric (ISO-8601 format).",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "metricValues": {
                              "description": "The metric values for the specified time window and timestep.",
                              "items": {
                                "description": "Represents metrics values.",
                                "properties": {
                                  "_count": {
                                    "description": "The number of values for the metric.",
                                    "format": "int32",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "average": {
                                    "description": "The average value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "maximum": {
                                    "description": "The max value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "minimum": {
                                    "description": "The min value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "timestamp": {
                                    "description": "The metric timestamp (ISO-8601 format).",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "total": {
                                    "description": "The total value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  }
                                }
                              },
                              "readOnly": true,
                              "type": "array"
                            },
                            "name": {
                              "description": "A metric name.",
                              "properties": {
                                "localizedValue": {
                                  "description": "The friendly name of the metric.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The name of the metric.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "startTime": {
                              "description": "The start time for the metric (ISO-8601 format).",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "timeGrain": {
                              "description": "The time grain to be used to summarize the metric values.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "unit": {
                              "description": "The unit of the metric.",
                              "enum": [
                                "Count",
                                "Bytes",
                                "Seconds",
                                "Percent",
                                "CountPerSecond",
                                "BytesPerSecond",
                                "Milliseconds"
                              ],
                              "readOnly": true,
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "UnitType"
                              }
                            }
                          }
                        }
                      ],
                      "description": "The metric values for a single partition.",
                      "properties": {
                        "partitionId": {
                          "description": "The partition id (GUID identifier) of the metric values.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "partitionKeyRangeId": {
                          "description": "The partition key range id (integer identifier) of the metric values.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PartitionMetricListResult"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The usage data for a usage request.",
                    "properties": {
                      "currentValue": {
                        "description": "Current value for this metric",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "limit": {
                        "description": "Maximum value for this metric",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "name": {
                        "description": "A metric name.",
                        "properties": {
                          "localizedValue": {
                            "description": "The friendly name of the metric.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "The name of the metric.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "quotaPeriod": {
                        "description": "The quota period used to summarize the usage values.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unit": {
                        "description": "The unit of the metric.",
                        "enum": [
                          "Count",
                          "Bytes",
                          "Seconds",
                          "Percent",
                          "CountPerSecond",
                          "BytesPerSecond",
                          "Milliseconds"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "UnitType"
                        }
                      }
                    }
                  }
                ],
                "description": "The partition level usage data for a usage request.",
                "properties": {
                  "partitionId": {
                    "description": "The partition id (GUID identifier) of the usages.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "partitionKeyRangeId": {
                    "description": "The partition key range id (integer identifier) of the usages.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PartitionUsage"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list partition level usage request.",
                "properties": {
                  "value": {
                    "description": "The list of partition-level usages for the database. A usage is a point in time metric",
                    "items": {
                      "allOf": [
                        {
                          "description": "The usage data for a usage request.",
                          "properties": {
                            "currentValue": {
                              "description": "Current value for this metric",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "limit": {
                              "description": "Maximum value for this metric",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "name": {
                              "description": "A metric name.",
                              "properties": {
                                "localizedValue": {
                                  "description": "The friendly name of the metric.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The name of the metric.",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              }
                            },
                            "quotaPeriod": {
                              "description": "The quota period used to summarize the usage values.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "unit": {
                              "description": "The unit of the metric.",
                              "enum": [
                                "Count",
                                "Bytes",
                                "Seconds",
                                "Percent",
                                "CountPerSecond",
                                "BytesPerSecond",
                                "Milliseconds"
                              ],
                              "readOnly": true,
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "UnitType"
                              }
                            }
                          }
                        }
                      ],
                      "description": "The partition level usage data for a usage request.",
                      "properties": {
                        "partitionId": {
                          "description": "The partition id (GUID identifier) of the usages.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "partitionKeyRangeId": {
                          "description": "The partition key range id (integer identifier) of the usages.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PartitionUsagesResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "A path. These typically start with root (/path)",
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/Path"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Percentile Metric data",
                "properties": {
                  "endTime": {
                    "description": "The end time for the metric (ISO-8601 format).",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "metricValues": {
                    "description": "The percentile metric values for the specified time window and timestep.",
                    "items": {
                      "allOf": [
                        {
                          "description": "Represents metrics values.",
                          "properties": {
                            "_count": {
                              "description": "The number of values for the metric.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "number"
                            },
                            "average": {
                              "description": "The average value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "maximum": {
                              "description": "The max value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "minimum": {
                              "description": "The min value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            },
                            "timestamp": {
                              "description": "The metric timestamp (ISO-8601 format).",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "total": {
                              "description": "The total value of the metric.",
                              "format": "double",
                              "readOnly": true,
                              "type": "number"
                            }
                          }
                        }
                      ],
                      "description": "Represents percentile metrics values.",
                      "properties": {
                        "P10": {
                          "description": "The 10th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P25": {
                          "description": "The 25th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P50": {
                          "description": "The 50th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P75": {
                          "description": "The 75th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P90": {
                          "description": "The 90th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P95": {
                          "description": "The 95th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        },
                        "P99": {
                          "description": "The 99th percentile value for the metric.",
                          "format": "double",
                          "readOnly": true,
                          "type": "number"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "name": {
                    "description": "A metric name.",
                    "properties": {
                      "localizedValue": {
                        "description": "The friendly name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "The name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "startTime": {
                    "description": "The start time for the metric (ISO-8601 format).",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "timeGrain": {
                    "description": "The time grain to be used to summarize the metric values.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit of the metric.",
                    "enum": [
                      "Count",
                      "Bytes",
                      "Seconds",
                      "Percent",
                      "CountPerSecond",
                      "BytesPerSecond",
                      "Milliseconds"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "UnitType"
                    }
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PercentileMetric"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list percentile metrics request.",
                "properties": {
                  "value": {
                    "description": "The list of percentile metrics for the account.",
                    "items": {
                      "description": "Percentile Metric data",
                      "properties": {
                        "endTime": {
                          "description": "The end time for the metric (ISO-8601 format).",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "metricValues": {
                          "description": "The percentile metric values for the specified time window and timestep.",
                          "items": {
                            "allOf": [
                              {
                                "description": "Represents metrics values.",
                                "properties": {
                                  "_count": {
                                    "description": "The number of values for the metric.",
                                    "format": "int32",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "average": {
                                    "description": "The average value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "maximum": {
                                    "description": "The max value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "minimum": {
                                    "description": "The min value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  },
                                  "timestamp": {
                                    "description": "The metric timestamp (ISO-8601 format).",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "total": {
                                    "description": "The total value of the metric.",
                                    "format": "double",
                                    "readOnly": true,
                                    "type": "number"
                                  }
                                }
                              }
                            ],
                            "description": "Represents percentile metrics values.",
                            "properties": {
                              "P10": {
                                "description": "The 10th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P25": {
                                "description": "The 25th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P50": {
                                "description": "The 50th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P75": {
                                "description": "The 75th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P90": {
                                "description": "The 90th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P95": {
                                "description": "The 95th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              },
                              "P99": {
                                "description": "The 99th percentile value for the metric.",
                                "format": "double",
                                "readOnly": true,
                                "type": "number"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        },
                        "name": {
                          "description": "A metric name.",
                          "properties": {
                            "localizedValue": {
                              "description": "The friendly name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "The name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "startTime": {
                          "description": "The start time for the metric (ISO-8601 format).",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "timeGrain": {
                          "description": "The time grain to be used to summarize the metric values.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "unit": {
                          "description": "The unit of the metric.",
                          "enum": [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Milliseconds"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "UnitType"
                          }
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PercentileMetricListResult"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "Represents metrics values.",
                    "properties": {
                      "_count": {
                        "description": "The number of values for the metric.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "number"
                      },
                      "average": {
                        "description": "The average value of the metric.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number"
                      },
                      "maximum": {
                        "description": "The max value of the metric.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number"
                      },
                      "minimum": {
                        "description": "The min value of the metric.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number"
                      },
                      "timestamp": {
                        "description": "The metric timestamp (ISO-8601 format).",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string"
                      },
                      "total": {
                        "description": "The total value of the metric.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number"
                      }
                    }
                  }
                ],
                "description": "Represents percentile metrics values.",
                "properties": {
                  "P10": {
                    "description": "The 10th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P25": {
                    "description": "The 25th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P50": {
                    "description": "The 50th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P75": {
                    "description": "The 75th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P90": {
                    "description": "The 90th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P95": {
                    "description": "The 95th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  },
                  "P99": {
                    "description": "The 99th percentile value for the metric.",
                    "format": "double",
                    "readOnly": true,
                    "type": "number"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PercentileMetricValue"
            },
            {
              "oldValue": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                        "properties": {
                          "id": {
                            "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the resource",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "title": "Resource",
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                    "title": "Proxy Resource",
                    "type": "object"
                  }
                ],
                "description": "A private endpoint connection",
                "properties": {
                  "properties": {
                    "description": "Properties of a private endpoint connection.",
                    "properties": {
                      "groupId": {
                        "description": "Group id of the private endpoint.",
                        "type": "string"
                      },
                      "privateEndpoint": {
                        "description": "Private endpoint which the connection belongs to.",
                        "properties": {
                          "id": {
                            "description": "Resource id of the private endpoint.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "privateLinkServiceConnectionState": {
                        "description": "Connection State of the Private Endpoint Connection.",
                        "properties": {
                          "actionsRequired": {
                            "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                            "readOnly": true,
                            "type": "string"
                          },
                          "description": {
                            "description": "The private link service connection description.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The private link service connection status.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "provisioningState": {
                        "description": "Provisioning state of the private endpoint.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateEndpointConnection"
            },
            {
              "oldValue": {
                "description": "A list of private endpoint connections",
                "properties": {
                  "value": {
                    "description": "Array of private endpoint connections",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                              "properties": {
                                "id": {
                                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the resource",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "title": "Resource",
                              "type": "object",
                              "x-ms-azure-resource": true
                            }
                          ],
                          "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
                          "title": "Proxy Resource",
                          "type": "object"
                        }
                      ],
                      "description": "A private endpoint connection",
                      "properties": {
                        "properties": {
                          "description": "Properties of a private endpoint connection.",
                          "properties": {
                            "groupId": {
                              "description": "Group id of the private endpoint.",
                              "type": "string"
                            },
                            "privateEndpoint": {
                              "description": "Private endpoint which the connection belongs to.",
                              "properties": {
                                "id": {
                                  "description": "Resource id of the private endpoint.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "privateLinkServiceConnectionState": {
                              "description": "Connection State of the Private Endpoint Connection.",
                              "properties": {
                                "actionsRequired": {
                                  "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "description": {
                                  "description": "The private link service connection description.",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "The private link service connection status.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "provisioningState": {
                              "description": "Provisioning state of the private endpoint.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateEndpointConnectionListResult"
            },
            {
              "oldValue": {
                "description": "Properties of a private endpoint connection.",
                "properties": {
                  "groupId": {
                    "description": "Group id of the private endpoint.",
                    "type": "string"
                  },
                  "privateEndpoint": {
                    "description": "Private endpoint which the connection belongs to.",
                    "properties": {
                      "id": {
                        "description": "Resource id of the private endpoint.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "privateLinkServiceConnectionState": {
                    "description": "Connection State of the Private Endpoint Connection.",
                    "properties": {
                      "actionsRequired": {
                        "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                        "readOnly": true,
                        "type": "string"
                      },
                      "description": {
                        "description": "The private link service connection description.",
                        "type": "string"
                      },
                      "status": {
                        "description": "The private link service connection status.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the private endpoint.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateEndpointConnectionProperties"
            },
            {
              "oldValue": {
                "description": "Private endpoint which the connection belongs to.",
                "properties": {
                  "id": {
                    "description": "Resource id of the private endpoint.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateEndpointProperty"
            },
            {
              "oldValue": {
                "description": "Connection State of the Private Endpoint Connection.",
                "properties": {
                  "actionsRequired": {
                    "description": "Any action that is required beyond basic workflow (approve/ reject/ disconnect)",
                    "readOnly": true,
                    "type": "string"
                  },
                  "description": {
                    "description": "The private link service connection description.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The private link service connection status.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateLinkServiceConnectionStateProperty"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB provisioned throughput settings object",
                "properties": {
                  "autoUpgradePolicy": {
                    "description": "Cosmos DB resource auto-upgrade policy",
                    "properties": {
                      "throughputPolicy": {
                        "description": "Cosmos DB resource throughput policy",
                        "properties": {
                          "incrementPercent": {
                            "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                            "type": "integer"
                          },
                          "isEnabled": {
                            "description": "Determines whether the ThroughputPolicy is active or not",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "maxThroughput": {
                    "description": "Represents maximum throughput container can scale up to.",
                    "type": "integer"
                  },
                  "targetMaxThroughput": {
                    "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "required": [
                  "maxThroughput"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ProvisionedThroughputSettingsResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' \u2013 the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' \u2013 the Cosmos DB account is active for use. 'Updating' \u2013 the Cosmos DB account is being updated. 'Deleting' \u2013 the Cosmos DB account is being deleted. 'Failed' \u2013 the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' \u2013 the Cosmos DB account deletion failed.",
                "readOnly": true,
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/ProvisioningState"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB region to online or offline.",
                "properties": {
                  "region": {
                    "description": "Cosmos DB region, with spaces between words and each word capitalized.",
                    "type": "string"
                  }
                },
                "required": [
                  "region"
                ]
              },
              "op": "add",
              "from": "",
              "path": "/RegionForOnlineOffline"
            },
            {
              "oldValue": null,
              "value": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The shard key and partition kind pair, only support \"Hash\" partition kind",
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ShardKeys"
            },
            {
              "oldValue": null,
              "value": {
                "properties": {
                  "path": {
                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                    "type": "string"
                  },
                  "types": {
                    "description": "List of path's spatial type",
                    "items": {
                      "description": "Indicates the spatial type of index.",
                      "enum": [
                        "Point",
                        "LineString",
                        "Polygon",
                        "MultiPolygon"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "SpatialType"
                      }
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SpatialSpec"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Indicates the spatial type of index.",
                "enum": [
                  "Point",
                  "LineString",
                  "Polygon",
                  "MultiPolygon"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "SpatialType"
                }
              },
              "op": "add",
              "from": "",
              "path": "/SpatialType"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB container.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB container.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB SQL container resource object",
                        "properties": {
                          "conflictResolutionPolicy": {
                            "description": "The conflict resolution policy for the container.",
                            "properties": {
                              "conflictResolutionPath": {
                                "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                "type": "string"
                              },
                              "conflictResolutionProcedure": {
                                "description": "The procedure to resolve conflicts in the case of custom mode.",
                                "type": "string"
                              },
                              "mode": {
                                "default": "LastWriterWins",
                                "description": "Indicates the conflict resolution mode.",
                                "enum": [
                                  "LastWriterWins",
                                  "Custom"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ConflictResolutionMode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "defaultTtl": {
                            "description": "Default time to live",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL container",
                            "type": "string"
                          },
                          "indexingPolicy": {
                            "description": "Cosmos DB indexing policy",
                            "properties": {
                              "automatic": {
                                "description": "Indicates if the indexing policy is automatic",
                                "type": "boolean"
                              },
                              "compositeIndexes": {
                                "description": "List of composite path list",
                                "items": {
                                  "description": "List of composite path",
                                  "items": {
                                    "properties": {
                                      "order": {
                                        "description": "Sort order for composite paths.",
                                        "enum": [
                                          "Ascending",
                                          "Descending"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "CompositePathSortOrder"
                                        }
                                      },
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "excludedPaths": {
                                "description": "List of paths to exclude from indexing",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "includedPaths": {
                                "description": "List of paths to include in the indexing",
                                "items": {
                                  "description": "The paths that are included in indexing",
                                  "properties": {
                                    "indexes": {
                                      "description": "List of indexes for this path",
                                      "items": {
                                        "description": "The indexes for the path.",
                                        "properties": {
                                          "dataType": {
                                            "default": "String",
                                            "description": "The datatype for which the indexing behavior is applied to.",
                                            "enum": [
                                              "String",
                                              "Number",
                                              "Point",
                                              "Polygon",
                                              "LineString",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "DataType"
                                            }
                                          },
                                          "kind": {
                                            "default": "Hash",
                                            "description": "Indicates the type of index.",
                                            "enum": [
                                              "Hash",
                                              "Range",
                                              "Spatial"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "IndexKind"
                                            }
                                          },
                                          "precision": {
                                            "description": "The precision of the index. -1 is maximum precision.",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "indexingMode": {
                                "default": "Consistent",
                                "description": "Indicates the indexing mode.",
                                "enum": [
                                  "Consistent",
                                  "Lazy",
                                  "None"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "IndexingMode"
                                }
                              },
                              "spatialIndexes": {
                                "description": "List of spatial specifics",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    },
                                    "types": {
                                      "description": "List of path's spatial type",
                                      "items": {
                                        "description": "Indicates the spatial type of index.",
                                        "enum": [
                                          "Point",
                                          "LineString",
                                          "Polygon",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "SpatialType"
                                        }
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "partitionKey": {
                            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                            "properties": {
                              "kind": {
                                "default": "Hash",
                                "description": "Indicates the kind of algorithm used for partitioning",
                                "enum": [
                                  "Hash",
                                  "Range"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PartitionKind"
                                }
                              },
                              "paths": {
                                "description": "List of paths using which data within the container can be partitioned",
                                "items": {
                                  "description": "A path. These typically start with root (/path)",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "version": {
                                "description": "Indicates the version of the partition key definition",
                                "format": "int32",
                                "maximum": 2,
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "uniqueKeyPolicy": {
                            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                            "properties": {
                              "uniqueKeys": {
                                "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                "items": {
                                  "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                  "properties": {
                                    "paths": {
                                      "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A path. These typically start with root (/path)",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB container.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB SQL container resource object",
                    "properties": {
                      "conflictResolutionPolicy": {
                        "description": "The conflict resolution policy for the container.",
                        "properties": {
                          "conflictResolutionPath": {
                            "description": "The conflict resolution path in the case of LastWriterWins mode.",
                            "type": "string"
                          },
                          "conflictResolutionProcedure": {
                            "description": "The procedure to resolve conflicts in the case of custom mode.",
                            "type": "string"
                          },
                          "mode": {
                            "default": "LastWriterWins",
                            "description": "Indicates the conflict resolution mode.",
                            "enum": [
                              "LastWriterWins",
                              "Custom"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ConflictResolutionMode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "defaultTtl": {
                        "description": "Default time to live",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB SQL container",
                        "type": "string"
                      },
                      "indexingPolicy": {
                        "description": "Cosmos DB indexing policy",
                        "properties": {
                          "automatic": {
                            "description": "Indicates if the indexing policy is automatic",
                            "type": "boolean"
                          },
                          "compositeIndexes": {
                            "description": "List of composite path list",
                            "items": {
                              "description": "List of composite path",
                              "items": {
                                "properties": {
                                  "order": {
                                    "description": "Sort order for composite paths.",
                                    "enum": [
                                      "Ascending",
                                      "Descending"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "CompositePathSortOrder"
                                    }
                                  },
                                  "path": {
                                    "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "type": "array"
                          },
                          "excludedPaths": {
                            "description": "List of paths to exclude from indexing",
                            "items": {
                              "properties": {
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "includedPaths": {
                            "description": "List of paths to include in the indexing",
                            "items": {
                              "description": "The paths that are included in indexing",
                              "properties": {
                                "indexes": {
                                  "description": "List of indexes for this path",
                                  "items": {
                                    "description": "The indexes for the path.",
                                    "properties": {
                                      "dataType": {
                                        "default": "String",
                                        "description": "The datatype for which the indexing behavior is applied to.",
                                        "enum": [
                                          "String",
                                          "Number",
                                          "Point",
                                          "Polygon",
                                          "LineString",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "DataType"
                                        }
                                      },
                                      "kind": {
                                        "default": "Hash",
                                        "description": "Indicates the type of index.",
                                        "enum": [
                                          "Hash",
                                          "Range",
                                          "Spatial"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "IndexKind"
                                        }
                                      },
                                      "precision": {
                                        "description": "The precision of the index. -1 is maximum precision.",
                                        "type": "integer"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "indexingMode": {
                            "default": "Consistent",
                            "description": "Indicates the indexing mode.",
                            "enum": [
                              "Consistent",
                              "Lazy",
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "IndexingMode"
                            }
                          },
                          "spatialIndexes": {
                            "description": "List of spatial specifics",
                            "items": {
                              "properties": {
                                "path": {
                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                  "type": "string"
                                },
                                "types": {
                                  "description": "List of path's spatial type",
                                  "items": {
                                    "description": "Indicates the spatial type of index.",
                                    "enum": [
                                      "Point",
                                      "LineString",
                                      "Polygon",
                                      "MultiPolygon"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "SpatialType"
                                    }
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "partitionKey": {
                        "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                        "properties": {
                          "kind": {
                            "default": "Hash",
                            "description": "Indicates the kind of algorithm used for partitioning",
                            "enum": [
                              "Hash",
                              "Range"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PartitionKind"
                            }
                          },
                          "paths": {
                            "description": "List of paths using which data within the container can be partitioned",
                            "items": {
                              "description": "A path. These typically start with root (/path)",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "version": {
                            "description": "Indicates the version of the partition key definition",
                            "format": "int32",
                            "maximum": 2,
                            "minimum": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "uniqueKeyPolicy": {
                        "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                        "properties": {
                          "uniqueKeys": {
                            "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                            "items": {
                              "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                              "properties": {
                                "paths": {
                                  "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                  "items": {
                                    "description": "A path. These typically start with root (/path)",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB container",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB SQL container resource object",
                        "properties": {
                          "conflictResolutionPolicy": {
                            "description": "The conflict resolution policy for the container.",
                            "properties": {
                              "conflictResolutionPath": {
                                "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                "type": "string"
                              },
                              "conflictResolutionProcedure": {
                                "description": "The procedure to resolve conflicts in the case of custom mode.",
                                "type": "string"
                              },
                              "mode": {
                                "default": "LastWriterWins",
                                "description": "Indicates the conflict resolution mode.",
                                "enum": [
                                  "LastWriterWins",
                                  "Custom"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ConflictResolutionMode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "defaultTtl": {
                            "description": "Default time to live",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL container",
                            "type": "string"
                          },
                          "indexingPolicy": {
                            "description": "Cosmos DB indexing policy",
                            "properties": {
                              "automatic": {
                                "description": "Indicates if the indexing policy is automatic",
                                "type": "boolean"
                              },
                              "compositeIndexes": {
                                "description": "List of composite path list",
                                "items": {
                                  "description": "List of composite path",
                                  "items": {
                                    "properties": {
                                      "order": {
                                        "description": "Sort order for composite paths.",
                                        "enum": [
                                          "Ascending",
                                          "Descending"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "CompositePathSortOrder"
                                        }
                                      },
                                      "path": {
                                        "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "excludedPaths": {
                                "description": "List of paths to exclude from indexing",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "includedPaths": {
                                "description": "List of paths to include in the indexing",
                                "items": {
                                  "description": "The paths that are included in indexing",
                                  "properties": {
                                    "indexes": {
                                      "description": "List of indexes for this path",
                                      "items": {
                                        "description": "The indexes for the path.",
                                        "properties": {
                                          "dataType": {
                                            "default": "String",
                                            "description": "The datatype for which the indexing behavior is applied to.",
                                            "enum": [
                                              "String",
                                              "Number",
                                              "Point",
                                              "Polygon",
                                              "LineString",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "DataType"
                                            }
                                          },
                                          "kind": {
                                            "default": "Hash",
                                            "description": "Indicates the type of index.",
                                            "enum": [
                                              "Hash",
                                              "Range",
                                              "Spatial"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "IndexKind"
                                            }
                                          },
                                          "precision": {
                                            "description": "The precision of the index. -1 is maximum precision.",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "indexingMode": {
                                "default": "Consistent",
                                "description": "Indicates the indexing mode.",
                                "enum": [
                                  "Consistent",
                                  "Lazy",
                                  "None"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "IndexingMode"
                                }
                              },
                              "spatialIndexes": {
                                "description": "List of spatial specifics",
                                "items": {
                                  "properties": {
                                    "path": {
                                      "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                      "type": "string"
                                    },
                                    "types": {
                                      "description": "List of path's spatial type",
                                      "items": {
                                        "description": "Indicates the spatial type of index.",
                                        "enum": [
                                          "Point",
                                          "LineString",
                                          "Polygon",
                                          "MultiPolygon"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "SpatialType"
                                        }
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "partitionKey": {
                            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                            "properties": {
                              "kind": {
                                "default": "Hash",
                                "description": "Indicates the kind of algorithm used for partitioning",
                                "enum": [
                                  "Hash",
                                  "Range"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PartitionKind"
                                }
                              },
                              "paths": {
                                "description": "List of paths using which data within the container can be partitioned",
                                "items": {
                                  "description": "A path. These typically start with root (/path)",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "version": {
                                "description": "Indicates the version of the partition key definition",
                                "format": "int32",
                                "maximum": 2,
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "uniqueKeyPolicy": {
                            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                            "properties": {
                              "uniqueKeys": {
                                "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                "items": {
                                  "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                  "properties": {
                                    "paths": {
                                      "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                      "items": {
                                        "description": "A path. These typically start with root (/path)",
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB container.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB container",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB SQL container resource object",
                            "properties": {
                              "conflictResolutionPolicy": {
                                "description": "The conflict resolution policy for the container.",
                                "properties": {
                                  "conflictResolutionPath": {
                                    "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                    "type": "string"
                                  },
                                  "conflictResolutionProcedure": {
                                    "description": "The procedure to resolve conflicts in the case of custom mode.",
                                    "type": "string"
                                  },
                                  "mode": {
                                    "default": "LastWriterWins",
                                    "description": "Indicates the conflict resolution mode.",
                                    "enum": [
                                      "LastWriterWins",
                                      "Custom"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ConflictResolutionMode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "defaultTtl": {
                                "description": "Default time to live",
                                "type": "integer"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB SQL container",
                                "type": "string"
                              },
                              "indexingPolicy": {
                                "description": "Cosmos DB indexing policy",
                                "properties": {
                                  "automatic": {
                                    "description": "Indicates if the indexing policy is automatic",
                                    "type": "boolean"
                                  },
                                  "compositeIndexes": {
                                    "description": "List of composite path list",
                                    "items": {
                                      "description": "List of composite path",
                                      "items": {
                                        "properties": {
                                          "order": {
                                            "description": "Sort order for composite paths.",
                                            "enum": [
                                              "Ascending",
                                              "Descending"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "CompositePathSortOrder"
                                            }
                                          },
                                          "path": {
                                            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "type": "array"
                                  },
                                  "excludedPaths": {
                                    "description": "List of paths to exclude from indexing",
                                    "items": {
                                      "properties": {
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "includedPaths": {
                                    "description": "List of paths to include in the indexing",
                                    "items": {
                                      "description": "The paths that are included in indexing",
                                      "properties": {
                                        "indexes": {
                                          "description": "List of indexes for this path",
                                          "items": {
                                            "description": "The indexes for the path.",
                                            "properties": {
                                              "dataType": {
                                                "default": "String",
                                                "description": "The datatype for which the indexing behavior is applied to.",
                                                "enum": [
                                                  "String",
                                                  "Number",
                                                  "Point",
                                                  "Polygon",
                                                  "LineString",
                                                  "MultiPolygon"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "DataType"
                                                }
                                              },
                                              "kind": {
                                                "default": "Hash",
                                                "description": "Indicates the type of index.",
                                                "enum": [
                                                  "Hash",
                                                  "Range",
                                                  "Spatial"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "IndexKind"
                                                }
                                              },
                                              "precision": {
                                                "description": "The precision of the index. -1 is maximum precision.",
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "indexingMode": {
                                    "default": "Consistent",
                                    "description": "Indicates the indexing mode.",
                                    "enum": [
                                      "Consistent",
                                      "Lazy",
                                      "None"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IndexingMode"
                                    }
                                  },
                                  "spatialIndexes": {
                                    "description": "List of spatial specifics",
                                    "items": {
                                      "properties": {
                                        "path": {
                                          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                          "type": "string"
                                        },
                                        "types": {
                                          "description": "List of path's spatial type",
                                          "items": {
                                            "description": "Indicates the spatial type of index.",
                                            "enum": [
                                              "Point",
                                              "LineString",
                                              "Polygon",
                                              "MultiPolygon"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "SpatialType"
                                            }
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "partitionKey": {
                                "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                "properties": {
                                  "kind": {
                                    "default": "Hash",
                                    "description": "Indicates the kind of algorithm used for partitioning",
                                    "enum": [
                                      "Hash",
                                      "Range"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "PartitionKind"
                                    }
                                  },
                                  "paths": {
                                    "description": "List of paths using which data within the container can be partitioned",
                                    "items": {
                                      "description": "A path. These typically start with root (/path)",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "version": {
                                    "description": "Indicates the version of the partition key definition",
                                    "format": "int32",
                                    "maximum": 2,
                                    "minimum": 1,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "uniqueKeyPolicy": {
                                "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                "properties": {
                                  "uniqueKeys": {
                                    "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                    "items": {
                                      "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                      "properties": {
                                        "paths": {
                                          "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                          "items": {
                                            "description": "A path. These typically start with root (/path)",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the containers and their properties.",
                "properties": {
                  "value": {
                    "description": "List of containers and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB container.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB container",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB SQL container resource object",
                                  "properties": {
                                    "conflictResolutionPolicy": {
                                      "description": "The conflict resolution policy for the container.",
                                      "properties": {
                                        "conflictResolutionPath": {
                                          "description": "The conflict resolution path in the case of LastWriterWins mode.",
                                          "type": "string"
                                        },
                                        "conflictResolutionProcedure": {
                                          "description": "The procedure to resolve conflicts in the case of custom mode.",
                                          "type": "string"
                                        },
                                        "mode": {
                                          "default": "LastWriterWins",
                                          "description": "Indicates the conflict resolution mode.",
                                          "enum": [
                                            "LastWriterWins",
                                            "Custom"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ConflictResolutionMode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "defaultTtl": {
                                      "description": "Default time to live",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB SQL container",
                                      "type": "string"
                                    },
                                    "indexingPolicy": {
                                      "description": "Cosmos DB indexing policy",
                                      "properties": {
                                        "automatic": {
                                          "description": "Indicates if the indexing policy is automatic",
                                          "type": "boolean"
                                        },
                                        "compositeIndexes": {
                                          "description": "List of composite path list",
                                          "items": {
                                            "description": "List of composite path",
                                            "items": {
                                              "properties": {
                                                "order": {
                                                  "description": "Sort order for composite paths.",
                                                  "enum": [
                                                    "Ascending",
                                                    "Descending"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "CompositePathSortOrder"
                                                  }
                                                },
                                                "path": {
                                                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "excludedPaths": {
                                          "description": "List of paths to exclude from indexing",
                                          "items": {
                                            "properties": {
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "includedPaths": {
                                          "description": "List of paths to include in the indexing",
                                          "items": {
                                            "description": "The paths that are included in indexing",
                                            "properties": {
                                              "indexes": {
                                                "description": "List of indexes for this path",
                                                "items": {
                                                  "description": "The indexes for the path.",
                                                  "properties": {
                                                    "dataType": {
                                                      "default": "String",
                                                      "description": "The datatype for which the indexing behavior is applied to.",
                                                      "enum": [
                                                        "String",
                                                        "Number",
                                                        "Point",
                                                        "Polygon",
                                                        "LineString",
                                                        "MultiPolygon"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "DataType"
                                                      }
                                                    },
                                                    "kind": {
                                                      "default": "Hash",
                                                      "description": "Indicates the type of index.",
                                                      "enum": [
                                                        "Hash",
                                                        "Range",
                                                        "Spatial"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "IndexKind"
                                                      }
                                                    },
                                                    "precision": {
                                                      "description": "The precision of the index. -1 is maximum precision.",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "indexingMode": {
                                          "default": "Consistent",
                                          "description": "Indicates the indexing mode.",
                                          "enum": [
                                            "Consistent",
                                            "Lazy",
                                            "None"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "IndexingMode"
                                          }
                                        },
                                        "spatialIndexes": {
                                          "description": "List of spatial specifics",
                                          "items": {
                                            "properties": {
                                              "path": {
                                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                                "type": "string"
                                              },
                                              "types": {
                                                "description": "List of path's spatial type",
                                                "items": {
                                                  "description": "Indicates the spatial type of index.",
                                                  "enum": [
                                                    "Point",
                                                    "LineString",
                                                    "Polygon",
                                                    "MultiPolygon"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "SpatialType"
                                                  }
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "partitionKey": {
                                      "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                                      "properties": {
                                        "kind": {
                                          "default": "Hash",
                                          "description": "Indicates the kind of algorithm used for partitioning",
                                          "enum": [
                                            "Hash",
                                            "Range"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PartitionKind"
                                          }
                                        },
                                        "paths": {
                                          "description": "List of paths using which data within the container can be partitioned",
                                          "items": {
                                            "description": "A path. These typically start with root (/path)",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "version": {
                                          "description": "Indicates the version of the partition key definition",
                                          "format": "int32",
                                          "maximum": 2,
                                          "minimum": 1,
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "uniqueKeyPolicy": {
                                      "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                                      "properties": {
                                        "uniqueKeys": {
                                          "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                          "items": {
                                            "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                                            "properties": {
                                              "paths": {
                                                "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                                                "items": {
                                                  "description": "A path. These typically start with root (/path)",
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB SQL container resource object",
                "properties": {
                  "conflictResolutionPolicy": {
                    "description": "The conflict resolution policy for the container.",
                    "properties": {
                      "conflictResolutionPath": {
                        "description": "The conflict resolution path in the case of LastWriterWins mode.",
                        "type": "string"
                      },
                      "conflictResolutionProcedure": {
                        "description": "The procedure to resolve conflicts in the case of custom mode.",
                        "type": "string"
                      },
                      "mode": {
                        "default": "LastWriterWins",
                        "description": "Indicates the conflict resolution mode.",
                        "enum": [
                          "LastWriterWins",
                          "Custom"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ConflictResolutionMode"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "defaultTtl": {
                    "description": "Default time to live",
                    "type": "integer"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB SQL container",
                    "type": "string"
                  },
                  "indexingPolicy": {
                    "description": "Cosmos DB indexing policy",
                    "properties": {
                      "automatic": {
                        "description": "Indicates if the indexing policy is automatic",
                        "type": "boolean"
                      },
                      "compositeIndexes": {
                        "description": "List of composite path list",
                        "items": {
                          "description": "List of composite path",
                          "items": {
                            "properties": {
                              "order": {
                                "description": "Sort order for composite paths.",
                                "enum": [
                                  "Ascending",
                                  "Descending"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "CompositePathSortOrder"
                                }
                              },
                              "path": {
                                "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      "excludedPaths": {
                        "description": "List of paths to exclude from indexing",
                        "items": {
                          "properties": {
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "includedPaths": {
                        "description": "List of paths to include in the indexing",
                        "items": {
                          "description": "The paths that are included in indexing",
                          "properties": {
                            "indexes": {
                              "description": "List of indexes for this path",
                              "items": {
                                "description": "The indexes for the path.",
                                "properties": {
                                  "dataType": {
                                    "default": "String",
                                    "description": "The datatype for which the indexing behavior is applied to.",
                                    "enum": [
                                      "String",
                                      "Number",
                                      "Point",
                                      "Polygon",
                                      "LineString",
                                      "MultiPolygon"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "DataType"
                                    }
                                  },
                                  "kind": {
                                    "default": "Hash",
                                    "description": "Indicates the type of index.",
                                    "enum": [
                                      "Hash",
                                      "Range",
                                      "Spatial"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IndexKind"
                                    }
                                  },
                                  "precision": {
                                    "description": "The precision of the index. -1 is maximum precision.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "indexingMode": {
                        "default": "Consistent",
                        "description": "Indicates the indexing mode.",
                        "enum": [
                          "Consistent",
                          "Lazy",
                          "None"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "IndexingMode"
                        }
                      },
                      "spatialIndexes": {
                        "description": "List of spatial specifics",
                        "items": {
                          "properties": {
                            "path": {
                              "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)",
                              "type": "string"
                            },
                            "types": {
                              "description": "List of path's spatial type",
                              "items": {
                                "description": "Indicates the spatial type of index.",
                                "enum": [
                                  "Point",
                                  "LineString",
                                  "Polygon",
                                  "MultiPolygon"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SpatialType"
                                }
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "partitionKey": {
                    "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
                    "properties": {
                      "kind": {
                        "default": "Hash",
                        "description": "Indicates the kind of algorithm used for partitioning",
                        "enum": [
                          "Hash",
                          "Range"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PartitionKind"
                        }
                      },
                      "paths": {
                        "description": "List of paths using which data within the container can be partitioned",
                        "items": {
                          "description": "A path. These typically start with root (/path)",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "version": {
                        "description": "Indicates the version of the partition key definition",
                        "format": "int32",
                        "maximum": 2,
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "uniqueKeyPolicy": {
                    "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                    "properties": {
                      "uniqueKeys": {
                        "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                        "items": {
                          "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                          "properties": {
                            "paths": {
                              "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                              "items": {
                                "description": "A path. These typically start with root (/path)",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlContainerResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB SQL database.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB SQL database.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB SQL database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB SQL database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB SQL database.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB SQL database resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB SQL database",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB SQL database",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB SQL database resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB SQL database",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "properties": {
                      "_colls": {
                        "description": "A system generated property that specified the addressable path of the collections resource.",
                        "type": "string"
                      },
                      "_users": {
                        "description": "A system generated property that specifies the addressable path of the users resource.",
                        "type": "string"
                      }
                    }
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB SQL database.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB SQL database",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB SQL database resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB SQL database",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "properties": {
                          "_colls": {
                            "description": "A system generated property that specified the addressable path of the collections resource.",
                            "type": "string"
                          },
                          "_users": {
                            "description": "A system generated property that specifies the addressable path of the users resource.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the SQL databases and their properties.",
                "properties": {
                  "value": {
                    "description": "List of SQL databases and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB SQL database.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB SQL database",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB SQL database resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB SQL database",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "properties": {
                                "_colls": {
                                  "description": "A system generated property that specified the addressable path of the collections resource.",
                                  "type": "string"
                                },
                                "_users": {
                                  "description": "A system generated property that specifies the addressable path of the users resource.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB SQL database resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB SQL database",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlDatabaseResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB storedProcedure.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB storedProcedure.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB SQL storedProcedure resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the Stored Procedure",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL storedProcedure",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB storedProcedure.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB SQL storedProcedure resource object",
                    "properties": {
                      "body": {
                        "description": "Body of the Stored Procedure",
                        "type": "string"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB SQL storedProcedure",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB StoredProcedure",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB SQL storedProcedure resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the Stored Procedure",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL storedProcedure",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB storedProcedure.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB StoredProcedure",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB SQL storedProcedure resource object",
                            "properties": {
                              "body": {
                                "description": "Body of the Stored Procedure",
                                "type": "string"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB SQL storedProcedure",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the storedProcedures and their properties.",
                "properties": {
                  "value": {
                    "description": "List of storedProcedures and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB storedProcedure.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB StoredProcedure",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB SQL storedProcedure resource object",
                                  "properties": {
                                    "body": {
                                      "description": "Body of the Stored Procedure",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB SQL storedProcedure",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB SQL storedProcedure resource object",
                "properties": {
                  "body": {
                    "description": "Body of the Stored Procedure",
                    "type": "string"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB SQL storedProcedure",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlStoredProcedureResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB trigger.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB trigger.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB SQL trigger resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the Trigger",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL trigger",
                            "type": "string"
                          },
                          "triggerOperation": {
                            "description": "The operation the trigger is associated with",
                            "enum": [
                              "All",
                              "Create",
                              "Update",
                              "Delete",
                              "Replace"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "triggerOperation"
                            }
                          },
                          "triggerType": {
                            "description": "Type of the Trigger",
                            "enum": [
                              "Pre",
                              "Post"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "triggerType"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB trigger.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB SQL trigger resource object",
                    "properties": {
                      "body": {
                        "description": "Body of the Trigger",
                        "type": "string"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB SQL trigger",
                        "type": "string"
                      },
                      "triggerOperation": {
                        "description": "The operation the trigger is associated with",
                        "enum": [
                          "All",
                          "Create",
                          "Update",
                          "Delete",
                          "Replace"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "triggerOperation"
                        }
                      },
                      "triggerType": {
                        "description": "Type of the Trigger",
                        "enum": [
                          "Pre",
                          "Post"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "triggerType"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB trigger",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB SQL trigger resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the Trigger",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL trigger",
                            "type": "string"
                          },
                          "triggerOperation": {
                            "description": "The operation the trigger is associated with",
                            "enum": [
                              "All",
                              "Create",
                              "Update",
                              "Delete",
                              "Replace"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "triggerOperation"
                            }
                          },
                          "triggerType": {
                            "description": "Type of the Trigger",
                            "enum": [
                              "Pre",
                              "Post"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "triggerType"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB trigger.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB trigger",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB SQL trigger resource object",
                            "properties": {
                              "body": {
                                "description": "Body of the Trigger",
                                "type": "string"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB SQL trigger",
                                "type": "string"
                              },
                              "triggerOperation": {
                                "description": "The operation the trigger is associated with",
                                "enum": [
                                  "All",
                                  "Create",
                                  "Update",
                                  "Delete",
                                  "Replace"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "triggerOperation"
                                }
                              },
                              "triggerType": {
                                "description": "Type of the Trigger",
                                "enum": [
                                  "Pre",
                                  "Post"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "triggerType"
                                }
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the triggers and their properties.",
                "properties": {
                  "value": {
                    "description": "List of triggers and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB trigger.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB trigger",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB SQL trigger resource object",
                                  "properties": {
                                    "body": {
                                      "description": "Body of the Trigger",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB SQL trigger",
                                      "type": "string"
                                    },
                                    "triggerOperation": {
                                      "description": "The operation the trigger is associated with",
                                      "enum": [
                                        "All",
                                        "Create",
                                        "Update",
                                        "Delete",
                                        "Replace"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "triggerOperation"
                                      }
                                    },
                                    "triggerType": {
                                      "description": "Type of the Trigger",
                                      "enum": [
                                        "Pre",
                                        "Post"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "triggerType"
                                      }
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB SQL trigger resource object",
                "properties": {
                  "body": {
                    "description": "Body of the Trigger",
                    "type": "string"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB SQL trigger",
                    "type": "string"
                  },
                  "triggerOperation": {
                    "description": "The operation the trigger is associated with",
                    "enum": [
                      "All",
                      "Create",
                      "Update",
                      "Delete",
                      "Replace"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "triggerOperation"
                    }
                  },
                  "triggerType": {
                    "description": "Type of the Trigger",
                    "enum": [
                      "Pre",
                      "Post"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "triggerType"
                    }
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlTriggerResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB userDefinedFunction.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB userDefinedFunction.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB SQL userDefinedFunction resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the User Defined Function",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL userDefinedFunction",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB userDefinedFunction.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB SQL userDefinedFunction resource object",
                    "properties": {
                      "body": {
                        "description": "Body of the User Defined Function",
                        "type": "string"
                      },
                      "id": {
                        "description": "Name of the Cosmos DB SQL userDefinedFunction",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB userDefinedFunction",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB SQL userDefinedFunction resource object",
                        "properties": {
                          "body": {
                            "description": "Body of the User Defined Function",
                            "type": "string"
                          },
                          "id": {
                            "description": "Name of the Cosmos DB SQL userDefinedFunction",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB userDefinedFunction.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB userDefinedFunction",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB SQL userDefinedFunction resource object",
                            "properties": {
                              "body": {
                                "description": "Body of the User Defined Function",
                                "type": "string"
                              },
                              "id": {
                                "description": "Name of the Cosmos DB SQL userDefinedFunction",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the userDefinedFunctions and their properties.",
                "properties": {
                  "value": {
                    "description": "List of userDefinedFunctions and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB userDefinedFunction.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos DB userDefinedFunction",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB SQL userDefinedFunction resource object",
                                  "properties": {
                                    "body": {
                                      "description": "Body of the User Defined Function",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Name of the Cosmos DB SQL userDefinedFunction",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB SQL userDefinedFunction resource object",
                "properties": {
                  "body": {
                    "description": "Body of the User Defined Function",
                    "type": "string"
                  },
                  "id": {
                    "description": "Name of the Cosmos DB SQL userDefinedFunction",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/SqlUserDefinedFunctionResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to create and update Cosmos DB Table.",
                "properties": {
                  "properties": {
                    "description": "Properties to create and update Azure Cosmos DB Table.",
                    "properties": {
                      "options": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                        "properties": {
                          "throughput": {
                            "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "resource": {
                        "description": "Cosmos DB table resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB table",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource",
                      "options"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/TableCreateUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to create and update Azure Cosmos DB Table.",
                "properties": {
                  "options": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\"",
                    "properties": {
                      "throughput": {
                        "description": "Request Units per second. For example, \"throughput\": \"10000\".",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource": {
                    "description": "Cosmos DB table resource object",
                    "properties": {
                      "id": {
                        "description": "Name of the Cosmos DB table",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "resource",
                  "options"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/TableCreateUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos Table",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB table resource object",
                        "properties": {
                          "id": {
                            "description": "Name of the Cosmos DB table",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/TableGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB Table.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos Table",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB table resource object",
                            "properties": {
                              "id": {
                                "description": "Name of the Cosmos DB table",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/TableGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The List operation response, that contains the Table and their properties.",
                "properties": {
                  "value": {
                    "description": "List of Table and their properties.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The core properties of ARM resources.",
                          "properties": {
                            "id": {
                              "description": "The unique resource identifier of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "location": {
                              "description": "The location of the resource group to which the resource belongs.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the ARM resource.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tags": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                              "type": "object"
                            },
                            "type": {
                              "description": "The type of Azure resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "An Azure Cosmos DB Table.",
                      "properties": {
                        "properties": {
                          "description": "The properties of an Azure Cosmos Table",
                          "properties": {
                            "resource": {
                              "allOf": [
                                {
                                  "description": "Cosmos DB table resource object",
                                  "properties": {
                                    "id": {
                                      "description": "Name of the Cosmos DB table",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                                  "properties": {
                                    "_etag": {
                                      "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_rid": {
                                      "description": "A system generated property. A unique identifier.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "_ts": {
                                      "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                      "readOnly": true
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/TableListResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB table resource object",
                "properties": {
                  "id": {
                    "description": "Name of the Cosmos DB table",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/TableResource"
            },
            {
              "oldValue": null,
              "value": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/Tags"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB resource throughput policy",
                "properties": {
                  "incrementPercent": {
                    "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                    "type": "integer"
                  },
                  "isEnabled": {
                    "description": "Determines whether the ThroughputPolicy is active or not",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputPolicyResource"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The properties of an Azure Cosmos DB resource throughput",
                "properties": {
                  "resource": {
                    "allOf": [
                      {
                        "description": "Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                        "properties": {
                          "minimumThroughput": {
                            "description": "The minimum throughput of the resource",
                            "readOnly": true,
                            "type": "string"
                          },
                          "offerReplacePending": {
                            "description": "The throughput replace is pending",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisionedThroughputSettings": {
                            "description": "Cosmos DB provisioned throughput settings object",
                            "properties": {
                              "autoUpgradePolicy": {
                                "description": "Cosmos DB resource auto-upgrade policy",
                                "properties": {
                                  "throughputPolicy": {
                                    "description": "Cosmos DB resource throughput policy",
                                    "properties": {
                                      "incrementPercent": {
                                        "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                                        "type": "integer"
                                      },
                                      "isEnabled": {
                                        "description": "Determines whether the ThroughputPolicy is active or not",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "maxThroughput": {
                                "description": "Represents maximum throughput container can scale up to.",
                                "type": "integer"
                              },
                              "targetMaxThroughput": {
                                "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "maxThroughput"
                            ],
                            "type": "object"
                          },
                          "throughput": {
                            "description": "Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                        "properties": {
                          "_etag": {
                            "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_rid": {
                            "description": "A system generated property. A unique identifier.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "_ts": {
                            "description": "A system generated property that denotes the last updated timestamp of the resource.",
                            "readOnly": true
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputSettingsGetProperties"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "An Azure Cosmos DB resource throughput.",
                "properties": {
                  "properties": {
                    "description": "The properties of an Azure Cosmos DB resource throughput",
                    "properties": {
                      "resource": {
                        "allOf": [
                          {
                            "description": "Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                            "properties": {
                              "minimumThroughput": {
                                "description": "The minimum throughput of the resource",
                                "readOnly": true,
                                "type": "string"
                              },
                              "offerReplacePending": {
                                "description": "The throughput replace is pending",
                                "readOnly": true,
                                "type": "string"
                              },
                              "provisionedThroughputSettings": {
                                "description": "Cosmos DB provisioned throughput settings object",
                                "properties": {
                                  "autoUpgradePolicy": {
                                    "description": "Cosmos DB resource auto-upgrade policy",
                                    "properties": {
                                      "throughputPolicy": {
                                        "description": "Cosmos DB resource throughput policy",
                                        "properties": {
                                          "incrementPercent": {
                                            "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                                            "type": "integer"
                                          },
                                          "isEnabled": {
                                            "description": "Determines whether the ThroughputPolicy is active or not",
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "maxThroughput": {
                                    "description": "Represents maximum throughput container can scale up to.",
                                    "type": "integer"
                                  },
                                  "targetMaxThroughput": {
                                    "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "maxThroughput"
                                ],
                                "type": "object"
                              },
                              "throughput": {
                                "description": "Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.",
                            "properties": {
                              "_etag": {
                                "description": "A system generated property representing the resource etag required for optimistic concurrency control.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_rid": {
                                "description": "A system generated property. A unique identifier.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "_ts": {
                                "description": "A system generated property that denotes the last updated timestamp of the resource.",
                                "readOnly": true
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputSettingsGetResults"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                "properties": {
                  "minimumThroughput": {
                    "description": "The minimum throughput of the resource",
                    "readOnly": true,
                    "type": "string"
                  },
                  "offerReplacePending": {
                    "description": "The throughput replace is pending",
                    "readOnly": true,
                    "type": "string"
                  },
                  "provisionedThroughputSettings": {
                    "description": "Cosmos DB provisioned throughput settings object",
                    "properties": {
                      "autoUpgradePolicy": {
                        "description": "Cosmos DB resource auto-upgrade policy",
                        "properties": {
                          "throughputPolicy": {
                            "description": "Cosmos DB resource throughput policy",
                            "properties": {
                              "incrementPercent": {
                                "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                                "type": "integer"
                              },
                              "isEnabled": {
                                "description": "Determines whether the ThroughputPolicy is active or not",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "maxThroughput": {
                        "description": "Represents maximum throughput container can scale up to.",
                        "type": "integer"
                      },
                      "targetMaxThroughput": {
                        "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                        "readOnly": true,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "maxThroughput"
                    ],
                    "type": "object"
                  },
                  "throughput": {
                    "description": "Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputSettingsResource"
            },
            {
              "oldValue": null,
              "value": {
                "allOf": [
                  {
                    "description": "The core properties of ARM resources.",
                    "properties": {
                      "id": {
                        "description": "The unique resource identifier of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The location of the resource group to which the resource belongs.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the ARM resource.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".",
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of Azure resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Parameters to update Cosmos DB resource throughput.",
                "properties": {
                  "properties": {
                    "description": "Properties to update Azure Cosmos DB resource throughput.",
                    "properties": {
                      "resource": {
                        "description": "Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                        "properties": {
                          "minimumThroughput": {
                            "description": "The minimum throughput of the resource",
                            "readOnly": true,
                            "type": "string"
                          },
                          "offerReplacePending": {
                            "description": "The throughput replace is pending",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisionedThroughputSettings": {
                            "description": "Cosmos DB provisioned throughput settings object",
                            "properties": {
                              "autoUpgradePolicy": {
                                "description": "Cosmos DB resource auto-upgrade policy",
                                "properties": {
                                  "throughputPolicy": {
                                    "description": "Cosmos DB resource throughput policy",
                                    "properties": {
                                      "incrementPercent": {
                                        "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                                        "type": "integer"
                                      },
                                      "isEnabled": {
                                        "description": "Determines whether the ThroughputPolicy is active or not",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "maxThroughput": {
                                "description": "Represents maximum throughput container can scale up to.",
                                "type": "integer"
                              },
                              "targetMaxThroughput": {
                                "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "maxThroughput"
                            ],
                            "type": "object"
                          },
                          "throughput": {
                            "description": "Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "resource"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "properties"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputSettingsUpdateParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Properties to update Azure Cosmos DB resource throughput.",
                "properties": {
                  "resource": {
                    "description": "Cosmos DB resource throughput object. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                    "properties": {
                      "minimumThroughput": {
                        "description": "The minimum throughput of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "offerReplacePending": {
                        "description": "The throughput replace is pending",
                        "readOnly": true,
                        "type": "string"
                      },
                      "provisionedThroughputSettings": {
                        "description": "Cosmos DB provisioned throughput settings object",
                        "properties": {
                          "autoUpgradePolicy": {
                            "description": "Cosmos DB resource auto-upgrade policy",
                            "properties": {
                              "throughputPolicy": {
                                "description": "Cosmos DB resource throughput policy",
                                "properties": {
                                  "incrementPercent": {
                                    "description": "Represents the percentage by which throughput can increase every time throughput policy kicks in.",
                                    "type": "integer"
                                  },
                                  "isEnabled": {
                                    "description": "Determines whether the ThroughputPolicy is active or not",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "maxThroughput": {
                            "description": "Represents maximum throughput container can scale up to.",
                            "type": "integer"
                          },
                          "targetMaxThroughput": {
                            "description": "Represents target maximum throughput container can scale up to once offer is no longer in pending state.",
                            "readOnly": true,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "maxThroughput"
                        ],
                        "type": "object"
                      },
                      "throughput": {
                        "description": "Value of the Cosmos DB resource throughput. Either throughput is required or provisionedThroughputSettings is required, but not both.",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/ThroughputSettingsUpdateProperties"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                "properties": {
                  "paths": {
                    "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                    "items": {
                      "description": "A path. These typically start with root (/path)",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/UniqueKey"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
                "properties": {
                  "uniqueKeys": {
                    "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                    "items": {
                      "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                      "properties": {
                        "paths": {
                          "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
                          "items": {
                            "description": "A path. These typically start with root (/path)",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/UniqueKeyPolicy"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The unit of the metric.",
                "enum": [
                  "Count",
                  "Bytes",
                  "Seconds",
                  "Percent",
                  "CountPerSecond",
                  "BytesPerSecond",
                  "Milliseconds"
                ],
                "readOnly": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "UnitType"
                }
              },
              "op": "add",
              "from": "",
              "path": "/UnitType"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The usage data for a usage request.",
                "properties": {
                  "currentValue": {
                    "description": "Current value for this metric",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "limit": {
                    "description": "Maximum value for this metric",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "name": {
                    "description": "A metric name.",
                    "properties": {
                      "localizedValue": {
                        "description": "The friendly name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "The name of the metric.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "quotaPeriod": {
                    "description": "The quota period used to summarize the usage values.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit of the metric.",
                    "enum": [
                      "Count",
                      "Bytes",
                      "Seconds",
                      "Percent",
                      "CountPerSecond",
                      "BytesPerSecond",
                      "Milliseconds"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "UnitType"
                    }
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/Usage"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response to a list usage request.",
                "properties": {
                  "value": {
                    "description": "The list of usages for the database. A usage is a point in time metric",
                    "items": {
                      "description": "The usage data for a usage request.",
                      "properties": {
                        "currentValue": {
                          "description": "Current value for this metric",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "Maximum value for this metric",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "name": {
                          "description": "A metric name.",
                          "properties": {
                            "localizedValue": {
                              "description": "The friendly name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "The name of the metric.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        },
                        "quotaPeriod": {
                          "description": "The quota period used to summarize the usage values.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "unit": {
                          "description": "The unit of the metric.",
                          "enum": [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Milliseconds"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "UnitType"
                          }
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/UsagesResult"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Virtual Network ACL Rule object",
                "properties": {
                  "id": {
                    "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.",
                    "type": "string"
                  },
                  "ignoreMissingVNetServiceEndpoint": {
                    "description": "Create firewall rule before the virtual network has vnet service endpoint enabled.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "op": "add",
              "from": "",
              "path": "/VirtualNetworkRule"
            }
          ],
          "parameters": [
            {
              "oldValue": {
                "description": "The name of the private endpoint connection.",
                "in": "path",
                "name": "privateEndpointConnectionName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PrivateEndpointConnectionNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Version of the API to be used with the client request. The current version is 2019-08-01.",
                "in": "query",
                "name": "api-version",
                "required": true,
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/apiVersionParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB collection name.",
                "in": "path",
                "name": "collectionName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/collectionNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB collection rid.",
                "in": "path",
                "name": "collectionRid",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/collectionRidParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB container name.",
                "in": "path",
                "name": "containerName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/containerNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB database name.",
                "in": "path",
                "name": "databaseName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/databaseNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB database rid.",
                "in": "path",
                "name": "databaseRid",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/databaseRidParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.",
                "in": "query",
                "name": "$filter",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/filterParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB graph name.",
                "in": "path",
                "name": "graphName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/graphNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB keyspace name.",
                "in": "path",
                "name": "keyspaceName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/keyspaceNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Partition Key Range Id for which to get data.",
                "in": "path",
                "name": "partitionKeyRangeId",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/partitionKeyRangeIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB region, with spaces between words and each word capitalized.",
                "in": "path",
                "name": "region",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/regionParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Name of an Azure resource group.",
                "in": "path",
                "maxLength": 90,
                "minLength": 1,
                "name": "resourceGroupName",
                "pattern": "^[-\\w\\._\\(\\)]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/resourceGroupNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.",
                "in": "path",
                "name": "sourceRegion",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/sourceRegionParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB storedProcedure name.",
                "in": "path",
                "name": "storedProcedureName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/storedProcedureNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Azure subscription ID.",
                "in": "path",
                "name": "subscriptionId",
                "required": true,
                "type": "string"
              },
              "op": "add",
              "from": "",
              "path": "/subscriptionIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB table name.",
                "in": "path",
                "name": "tableName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/tableNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.",
                "in": "path",
                "name": "targetRegion",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/targetRegionParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB trigger name.",
                "in": "path",
                "name": "triggerName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/triggerNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).",
                "in": "query",
                "name": "$filter",
                "required": false,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/usageFilterParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Cosmos DB userDefinedFunction name.",
                "in": "path",
                "name": "userDefinedFunctionName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/userDefinedFunctionNameParameter"
            }
          ]
        }
      },
      "info": {
        "version": {
          "from": "2019-08-01-preview",
          "to": "2019-12-12"
        }
      },
      "paths": {
        "added": [
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}",
          "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
          "/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default",
          "/providers/Microsoft.DocumentDB/operations",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics"
        ],
        "deleted": [
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections"
        ]
      }
    },
    "stub_ast_a": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "json",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "typing",
          "names": [
            {
              "type": "alias",
              "name": "Optional",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Union",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Any",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "ImportFrom",
          "module": "fastmcp",
          "names": [
            {
              "type": "alias",
              "name": "FastMCP",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[MCP SERVER] FastMCP server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Assign",
              "targets": [
                {
                  "type": "Name",
                  "id": "mcp",
                  "ctx": {
                    "type": "Store"
                  }
                }
              ],
              "value": {
                "type": "Call",
                "func": {
                  "type": "Name",
                  "id": "FastMCP",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": "my-server",
                    "kind": null
                  }
                ],
                "keywords": []
              },
              "type_comment": null
            },
            {
              "type": "FunctionDef",
              "name": "PrivateEndpointConnections_ListByDatabaseAccount",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "accountName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": []
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "List all private endpoint connections on a Cosmos DB account.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.DocumentDB/databaseAccounts/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "accountName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/privateEndpointConnections",
                        "kind": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "accountName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: accountName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "get",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "PrivateEndpointConnections_ListByDatabaseAccount",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "List all private endpoint connections on a Cosmos DB account.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "FunctionDef",
              "name": "PrivateEndpointConnections_Get",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "accountName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "privateEndpointConnectionName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": []
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "Gets a private endpoint connection.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.DocumentDB/databaseAccounts/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "accountName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/privateEndpointConnections/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "privateEndpointConnectionName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "accountName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: accountName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "privateEndpointConnectionName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: privateEndpointConnectionName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "get",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "PrivateEndpointConnections_Get",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "Gets a private endpoint connection.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "FunctionDef",
              "name": "PrivateEndpointConnections_CreateOrUpdate",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "accountName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "privateEndpointConnectionName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": []
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "Approve or reject a private endpoint connection with a given name.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.DocumentDB/databaseAccounts/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "accountName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/privateEndpointConnections/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "privateEndpointConnectionName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "accountName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: accountName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "privateEndpointConnectionName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: privateEndpointConnectionName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "put",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "PrivateEndpointConnections_CreateOrUpdate",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "Approve or reject a private endpoint connection with a given name.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "FunctionDef",
              "name": "PrivateEndpointConnections_Delete",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "accountName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "privateEndpointConnectionName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": []
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "Deletes a private endpoint connection with a given name.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.DocumentDB/databaseAccounts/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "accountName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/privateEndpointConnections/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "privateEndpointConnectionName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "accountName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: accountName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "privateEndpointConnectionName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: privateEndpointConnectionName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "delete",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "PrivateEndpointConnections_Delete",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "Deletes a private endpoint connection with a given name.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "mcp",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "transport",
                    "value": {
                      "type": "Constant",
                      "value": "stdio",
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  },
  "output": {
    "stub_ast_b": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "flask",
          "names": [
            {
              "type": "alias",
              "name": "Flask",
              "asname": null
            },
            {
              "type": "alias",
              "name": "request",
              "asname": null
            },
            {
              "type": "alias",
              "name": "redirect",
              "asname": null
            },
            {
              "type": "alias",
              "name": "session",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "secrets",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "hashlib",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": "b64"
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Name",
              "id": "app",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "Flask",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Name",
                "id": "__name__",
                "ctx": {
                  "type": "Load"
                }
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "app",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "secret_key",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "os",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "getenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "OAUTH2_SECRET_KEY",
                "kind": null
              },
              {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "secrets",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "token_hex",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": 16,
                    "kind": null
                  }
                ],
                "keywords": []
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[OAUTH LOGIN SERVER] Flask OAuth2 login server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "app",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "debug",
                    "value": {
                      "type": "Constant",
                      "value": true,
                      "kind": null
                    }
                  },
                  {
                    "type": "keyword",
                    "arg": "port",
                    "value": {
                      "type": "Constant",
                      "value": 8888,
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  }
}