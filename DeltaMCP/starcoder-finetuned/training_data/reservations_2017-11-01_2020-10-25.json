{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Identifier of the applied reservations",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of resource",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "reservationOrderIds": {
                      "properties": {
                        "nextLink": {
                          "description": "Url to get the next page of reservations",
                          "type": "string"
                        },
                        "value": {
                          "items": {
                            "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/AppliedReservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservations"
          },
          {
            "oldValue": {
              "properties": {
                "reservationOrderIds": {
                  "properties": {
                    "nextLink": {
                      "description": "Url to get the next page of reservations",
                      "type": "string"
                    },
                    "value": {
                      "items": {
                        "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationsProperties"
          },
          {
            "oldValue": {
              "description": "Type of the Applied Scope.",
              "enum": [
                "Single",
                "Shared"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopeType"
          },
          {
            "oldValue": {
              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
              "items": {
                "maxItems": 1,
                "minItems": 1,
                "type": "string"
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopes"
          },
          {
            "oldValue": {
              "properties": {
                "capabilities": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "An invariant to describe the feature.",
                        "type": "string"
                      },
                      "value": {
                        "description": "An invariant if the feature is measured by quantity.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "locations": {
                  "items": {
                    "description": "The set of locations that the SKU is available.",
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "name": {
                  "description": "The name of SKU",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceType": {
                  "description": "The type of resource the SKU applies to.",
                  "readOnly": true,
                  "type": "string"
                },
                "restrictions": {
                  "items": {
                    "properties": {
                      "reasonCode": {
                        "description": "The reason for restriction.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of restrictions.",
                        "type": "string"
                      },
                      "values": {
                        "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "size": {
                  "description": "The size of this SKU",
                  "readOnly": true,
                  "type": "string"
                },
                "terms": {
                  "description": "Available reservation terms for this resource",
                  "items": {
                    "description": "Represent the term of Reservation.",
                    "enum": [
                      "P1Y",
                      "P3Y"
                    ],
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "tier": {
                  "description": "The tier of this SKU",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Catalog"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota change requests information.",
              "properties": {
                "value": {
                  "description": "Quota change requests.",
                  "items": {
                    "description": "Quota properties.",
                    "properties": {
                      "id": {
                        "description": "The quota request ID.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the quota request.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Quota properties for the resource.",
                        "properties": {
                          "currentValue": {
                            "description": "Current usage value for the resource.",
                            "format": "int32",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "limit": {
                            "description": "Quota properties.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display localized name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "properties": {
                            "description": "Additional properties for the specified resource provider.",
                            "type": "object"
                          },
                          "quotaPeriod": {
                            "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The resource types.",
                            "enum": [
                              "standard",
                              "dedicated",
                              "lowPriority",
                              "shared",
                              "serviceSpecific"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ResourceType"
                            }
                          },
                          "unit": {
                            "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                            "readOnly": false,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CreateGenericQuotaRequestParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Current quota limits.",
              "properties": {
                "properties": {
                  "description": "Quota request status details.",
                  "properties": {
                    "message": {
                      "description": "A user friendly message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    }
                  },
                  "type": "object"
                },
                "quotaInformation": {
                  "description": "Quota properties.",
                  "properties": {
                    "id": {
                      "description": "The quota request ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the quota request.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "properties": {
                      "description": "Quota properties for the resource.",
                      "properties": {
                        "currentValue": {
                          "description": "Current usage value for the resource.",
                          "format": "int32",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "Quota properties.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                          "properties": {
                            "localizedValue": {
                              "description": "Resource display localized name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "Resource name.",
                              "readOnly": false,
                              "type": "string"
                            }
                          }
                        },
                        "properties": {
                          "description": "Additional properties for the specified resource provider.",
                          "type": "object"
                        },
                        "quotaPeriod": {
                          "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "resourceType": {
                          "description": "The resource types.",
                          "enum": [
                            "standard",
                            "dedicated",
                            "lowPriority",
                            "shared",
                            "serviceSpecific"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ResourceType"
                          }
                        },
                        "unit": {
                          "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                          "readOnly": false,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-ms-azure-resource": true
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/CurrentQuotaLimit"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota properties.",
              "properties": {
                "id": {
                  "description": "The quota request ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Quota properties for the resource.",
                  "properties": {
                    "currentValue": {
                      "description": "Current usage value for the resource.",
                      "format": "int32",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "limit": {
                      "description": "Quota properties.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                      "properties": {
                        "localizedValue": {
                          "description": "Resource display localized name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "value": {
                          "description": "Resource name.",
                          "readOnly": false,
                          "type": "string"
                        }
                      }
                    },
                    "properties": {
                      "description": "Additional properties for the specified resource provider.",
                      "type": "object"
                    },
                    "quotaPeriod": {
                      "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceType": {
                      "description": "The resource types.",
                      "enum": [
                        "standard",
                        "dedicated",
                        "lowPriority",
                        "shared",
                        "serviceSpecific"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ResourceType"
                      }
                    },
                    "unit": {
                      "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                      "readOnly": false,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/CurrentQuotaLimitBase"
          },
          {
            "oldValue": {
              "properties": {
                "error": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NotSpecified",
                        "InternalServerError",
                        "ServerTimeout",
                        "AuthorizationFailed",
                        "BadRequest",
                        "ClientCertificateThumbprintNotSet",
                        "InvalidRequestContent",
                        "OperationFailed",
                        "HttpMethodNotSupported",
                        "InvalidRequestUri",
                        "MissingTenantId",
                        "InvalidTenantId",
                        "InvalidReservationOrderId",
                        "InvalidReservationId",
                        "ReservationIdNotInReservationOrder",
                        "ReservationOrderNotFound",
                        "InvalidSubscriptionId",
                        "InvalidAccessToken",
                        "InvalidLocationId",
                        "UnauthenticatedRequestsThrottled",
                        "InvalidHealthCheckType",
                        "Forbidden",
                        "BillingScopeIdCannotBeChanged",
                        "AppliedScopesNotAssociatedWithCommerceAccount",
                        "AppliedScopesSameAsExisting",
                        "RoleAssignmentCreationFailed",
                        "ReservationOrderCreationFailed",
                        "ReservationOrderNotEnabled",
                        "CapacityUpdateScopesFailed",
                        "UnsupportedReservationTerm",
                        "ReservationOrderIdAlreadyExists",
                        "RiskCheckFailed",
                        "CreateQuoteFailed",
                        "ActivateQuoteFailed",
                        "NonsupportedAccountId",
                        "PaymentInstrumentNotFound",
                        "MissingAppliedScopesForSingle",
                        "NoValidReservationsToReRate",
                        "ReRateOnlyAllowedForEA",
                        "OperationCannotBePerformedInCurrentState",
                        "InvalidSingleAppliedScopesCount",
                        "InvalidFulfillmentRequestParameters",
                        "NotSupportedCountry",
                        "InvalidRefundQuantity",
                        "PurchaseError",
                        "BillingCustomerInputError",
                        "BillingPaymentInstrumentSoftError",
                        "BillingPaymentInstrumentHardError",
                        "BillingTransientError",
                        "BillingError",
                        "FulfillmentConfigurationError",
                        "FulfillmentOutOfStockError",
                        "FulfillmentTransientError",
                        "FulfillmentError",
                        "CalculatePriceFailed"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Error"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "InternalServerError",
                "ServerTimeout",
                "AuthorizationFailed",
                "BadRequest",
                "ClientCertificateThumbprintNotSet",
                "InvalidRequestContent",
                "OperationFailed",
                "HttpMethodNotSupported",
                "InvalidRequestUri",
                "MissingTenantId",
                "InvalidTenantId",
                "InvalidReservationOrderId",
                "InvalidReservationId",
                "ReservationIdNotInReservationOrder",
                "ReservationOrderNotFound",
                "InvalidSubscriptionId",
                "InvalidAccessToken",
                "InvalidLocationId",
                "UnauthenticatedRequestsThrottled",
                "InvalidHealthCheckType",
                "Forbidden",
                "BillingScopeIdCannotBeChanged",
                "AppliedScopesNotAssociatedWithCommerceAccount",
                "AppliedScopesSameAsExisting",
                "RoleAssignmentCreationFailed",
                "ReservationOrderCreationFailed",
                "ReservationOrderNotEnabled",
                "CapacityUpdateScopesFailed",
                "UnsupportedReservationTerm",
                "ReservationOrderIdAlreadyExists",
                "RiskCheckFailed",
                "CreateQuoteFailed",
                "ActivateQuoteFailed",
                "NonsupportedAccountId",
                "PaymentInstrumentNotFound",
                "MissingAppliedScopesForSingle",
                "NoValidReservationsToReRate",
                "ReRateOnlyAllowedForEA",
                "OperationCannotBePerformedInCurrentState",
                "InvalidSingleAppliedScopesCount",
                "InvalidFulfillmentRequestParameters",
                "NotSupportedCountry",
                "InvalidRefundQuantity",
                "PurchaseError",
                "BillingCustomerInputError",
                "BillingPaymentInstrumentSoftError",
                "BillingPaymentInstrumentHardError",
                "BillingTransientError",
                "BillingError",
                "FulfillmentConfigurationError",
                "FulfillmentOutOfStockError",
                "FulfillmentTransientError",
                "FulfillmentError",
                "CalculatePriceFailed"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponseCode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The API error.",
              "properties": {
                "error": {
                  "description": "The API error details.",
                  "properties": {
                    "code": {
                      "description": "The error code.",
                      "type": "string"
                    },
                    "details": {
                      "description": "The list of error details.",
                      "items": {
                        "description": "The error details.",
                        "properties": {
                          "code": {
                            "description": "The error code.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "The error message.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "message": {
                      "description": "The error message text.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ExceptionResponse"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "enum": [
                    "NotSpecified",
                    "InternalServerError",
                    "ServerTimeout",
                    "AuthorizationFailed",
                    "BadRequest",
                    "ClientCertificateThumbprintNotSet",
                    "InvalidRequestContent",
                    "OperationFailed",
                    "HttpMethodNotSupported",
                    "InvalidRequestUri",
                    "MissingTenantId",
                    "InvalidTenantId",
                    "InvalidReservationOrderId",
                    "InvalidReservationId",
                    "ReservationIdNotInReservationOrder",
                    "ReservationOrderNotFound",
                    "InvalidSubscriptionId",
                    "InvalidAccessToken",
                    "InvalidLocationId",
                    "UnauthenticatedRequestsThrottled",
                    "InvalidHealthCheckType",
                    "Forbidden",
                    "BillingScopeIdCannotBeChanged",
                    "AppliedScopesNotAssociatedWithCommerceAccount",
                    "AppliedScopesSameAsExisting",
                    "RoleAssignmentCreationFailed",
                    "ReservationOrderCreationFailed",
                    "ReservationOrderNotEnabled",
                    "CapacityUpdateScopesFailed",
                    "UnsupportedReservationTerm",
                    "ReservationOrderIdAlreadyExists",
                    "RiskCheckFailed",
                    "CreateQuoteFailed",
                    "ActivateQuoteFailed",
                    "NonsupportedAccountId",
                    "PaymentInstrumentNotFound",
                    "MissingAppliedScopesForSingle",
                    "NoValidReservationsToReRate",
                    "ReRateOnlyAllowedForEA",
                    "OperationCannotBePerformedInCurrentState",
                    "InvalidSingleAppliedScopesCount",
                    "InvalidFulfillmentRequestParameters",
                    "NotSupportedCountry",
                    "InvalidRefundQuantity",
                    "PurchaseError",
                    "BillingCustomerInputError",
                    "BillingPaymentInstrumentSoftError",
                    "BillingPaymentInstrumentHardError",
                    "BillingTransientError",
                    "BillingError",
                    "FulfillmentConfigurationError",
                    "FulfillmentOutOfStockError",
                    "FulfillmentTransientError",
                    "FulfillmentError",
                    "CalculatePriceFailed"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedErrorInfo"
          },
          {
            "oldValue": {
              "properties": {
                "message": {
                  "description": "The message giving detailed information about the status code.",
                  "type": "string"
                },
                "statusCode": {
                  "enum": [
                    "None",
                    "Pending",
                    "Active",
                    "PurchaseError",
                    "PaymentInstrumentError",
                    "Split",
                    "Merged",
                    "Expired",
                    "Succeeded"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedStatusInfo"
          },
          {
            "oldValue": {
              "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
              "enum": [
                "westus",
                "eastus",
                "eastus2",
                "northcentralus",
                "westus2",
                "southcentralus",
                "centralus",
                "westeurope",
                "northeurope",
                "eastasia",
                "southeastasia",
                "japaneast",
                "japanwest",
                "brazilsouth",
                "australiaeast",
                "australiasoutheast",
                "southindia",
                "westindia",
                "centralindia",
                "canadacentral",
                "canadaeast",
                "uksouth",
                "westcentralus",
                "ukwest"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Location"
          },
          {
            "oldValue": {
              "properties": {
                "sources": {
                  "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "sources": {
                      "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeRequest"
          },
          {
            "oldValue": {
              "properties": {
                "description": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "resource": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationDisplay"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of items.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "display": {
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "operation": {
                            "type": "string"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "origin": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationList"
          },
          {
            "oldValue": {
              "properties": {
                "display": {
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "resource": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationResponse"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string"
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Patch"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string"
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchProperties"
          },
          {
            "oldValue": {
              "description": "Represent the current state of the Reservation.",
              "enum": [
                "Creating",
                "PendingResourceHold",
                "ConfirmedResourceHold",
                "PendingBilling",
                "ConfirmedBilling",
                "Created",
                "Succeeded",
                "Cancelled",
                "Expired",
                "BillingFailed",
                "Failed",
                "Split",
                "Merged",
                "Processing"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ProvisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota limits.",
              "properties": {
                "nextLink": {
                  "description": "The URI for fetching the next page of quotas (service limits). When no more pages exist, the value is null.",
                  "type": "string"
                },
                "value": {
                  "description": "List of quotas (service limits).",
                  "items": {
                    "description": "Quota properties.",
                    "properties": {
                      "id": {
                        "description": "The quota request ID.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the quota request.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Quota properties for the resource.",
                        "properties": {
                          "currentValue": {
                            "description": "Current usage value for the resource.",
                            "format": "int32",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "limit": {
                            "description": "Quota properties.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display localized name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "properties": {
                            "description": "Additional properties for the specified resource provider.",
                            "type": "object"
                          },
                          "quotaPeriod": {
                            "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The resource types.",
                            "enum": [
                              "standard",
                              "dedicated",
                              "lowPriority",
                              "shared",
                              "serviceSpecific"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ResourceType"
                            }
                          },
                          "unit": {
                            "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                            "readOnly": false,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaLimits"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quotas (service limits) in the request response.",
              "properties": {
                "nextLink": {
                  "description": "The URI for fetching the next page of quota limits. When no more pages exist, the value is null.",
                  "type": "string"
                },
                "value": {
                  "description": "List of quotas with the quota request status.",
                  "items": {
                    "description": "Current quota limits.",
                    "properties": {
                      "properties": {
                        "description": "Quota request status details.",
                        "properties": {
                          "message": {
                            "description": "A user friendly message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "quotaInformation": {
                        "description": "Quota properties.",
                        "properties": {
                          "id": {
                            "description": "The quota request ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the quota request.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "properties": {
                            "description": "Quota properties for the resource.",
                            "properties": {
                              "currentValue": {
                                "description": "Current usage value for the resource.",
                                "format": "int32",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "limit": {
                                "description": "Quota properties.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                                "properties": {
                                  "localizedValue": {
                                    "description": "Resource display localized name.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Resource name.",
                                    "readOnly": false,
                                    "type": "string"
                                  }
                                }
                              },
                              "properties": {
                                "description": "Additional properties for the specified resource provider.",
                                "type": "object"
                              },
                              "quotaPeriod": {
                                "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "resourceType": {
                                "description": "The resource types.",
                                "enum": [
                                  "standard",
                                  "dedicated",
                                  "lowPriority",
                                  "shared",
                                  "serviceSpecific"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ResourceType"
                                }
                              },
                              "unit": {
                                "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                                "readOnly": false,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaLimitsResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota properties for the resource.",
              "properties": {
                "currentValue": {
                  "description": "Current usage value for the resource.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer"
                },
                "limit": {
                  "description": "Quota properties.",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                  "properties": {
                    "localizedValue": {
                      "description": "Resource display localized name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "Resource name.",
                      "readOnly": false,
                      "type": "string"
                    }
                  }
                },
                "properties": {
                  "description": "Additional properties for the specified resource provider.",
                  "type": "object"
                },
                "quotaPeriod": {
                  "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceType": {
                  "description": "The resource types.",
                  "enum": [
                    "standard",
                    "dedicated",
                    "lowPriority",
                    "shared",
                    "serviceSpecific"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ResourceType"
                  }
                },
                "unit": {
                  "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                  "readOnly": false,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota request details.",
              "properties": {
                "id": {
                  "description": "Quota request ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Quota request name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "The quotaRequests.",
                      "items": {
                        "description": "The sub-request submitted with the quota request.",
                        "properties": {
                          "limit": {
                            "description": "Quota (resource limit).",
                            "format": "int32",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "message": {
                            "description": "User-friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display localized name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "resourceType": {
                            "description": "Resource type for which the quota check was made.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subRequestId": {
                            "description": "Sub request ID for individual request.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unit": {
                            "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota request details.",
              "properties": {
                "nextLink": {
                  "description": "The URI to fetch the next page of quota limits. When there are no more pages, this is null.",
                  "type": "string"
                },
                "value": {
                  "description": "The quota requests.",
                  "items": {
                    "description": "Quota request details.",
                    "properties": {
                      "id": {
                        "description": "Quota request ID.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Quota request name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The details of quota request.",
                        "properties": {
                          "message": {
                            "description": "User friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "requestSubmitTime": {
                            "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "The quotaRequests.",
                            "items": {
                              "description": "The sub-request submitted with the quota request.",
                              "properties": {
                                "limit": {
                                  "description": "Quota (resource limit).",
                                  "format": "int32",
                                  "readOnly": true,
                                  "type": "integer"
                                },
                                "message": {
                                  "description": "User-friendly status message.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                                  "properties": {
                                    "localizedValue": {
                                      "description": "Resource display localized name.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Resource name.",
                                      "readOnly": false,
                                      "type": "string"
                                    }
                                  }
                                },
                                "provisioningState": {
                                  "description": "The quota request status.",
                                  "enum": [
                                    "Accepted",
                                    "Invalid",
                                    "Succeeded",
                                    "Failed",
                                    "InProgress"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "QuotaRequestState"
                                  }
                                },
                                "resourceType": {
                                  "description": "Resource type for which the quota check was made.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "subRequestId": {
                                  "description": "Sub request ID for individual request.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "unit": {
                                  "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestDetailsList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Response for the quota submission request.",
              "properties": {
                "id": {
                  "description": "The quota request ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "properties": {
                      "description": "Quota properties.",
                      "properties": {
                        "id": {
                          "description": "The quota request ID.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the quota request.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "properties": {
                          "description": "Quota properties for the resource.",
                          "properties": {
                            "currentValue": {
                              "description": "Current usage value for the resource.",
                              "format": "int32",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "limit": {
                              "description": "Quota properties.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                              "properties": {
                                "localizedValue": {
                                  "description": "Resource display localized name.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Resource name.",
                                  "readOnly": false,
                                  "type": "string"
                                }
                              }
                            },
                            "properties": {
                              "description": "Additional properties for the specified resource provider.",
                              "type": "object"
                            },
                            "quotaPeriod": {
                              "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "resourceType": {
                              "description": "The resource types.",
                              "enum": [
                                "standard",
                                "dedicated",
                                "lowPriority",
                                "shared",
                                "serviceSpecific"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ResourceType"
                              }
                            },
                            "unit": {
                              "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                              "readOnly": false,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "x-ms-azure-resource": true
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestOneResourceSubmitResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of quota request.",
              "properties": {
                "message": {
                  "description": "User friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "requestSubmitTime": {
                  "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The quotaRequests.",
                  "items": {
                    "description": "The sub-request submitted with the quota request.",
                    "properties": {
                      "limit": {
                        "description": "Quota (resource limit).",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "message": {
                        "description": "User-friendly status message.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                        "properties": {
                          "localizedValue": {
                            "description": "Resource display localized name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "Resource name.",
                            "readOnly": false,
                            "type": "string"
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The quota request status.",
                        "enum": [
                          "Accepted",
                          "Invalid",
                          "Succeeded",
                          "Failed",
                          "InProgress"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "QuotaRequestState"
                        }
                      },
                      "resourceType": {
                        "description": "Resource type for which the quota check was made.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "subRequestId": {
                        "description": "Sub request ID for individual request.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unit": {
                        "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The quota request status.",
              "enum": [
                "Accepted",
                "Invalid",
                "Succeeded",
                "Failed",
                "InProgress"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "QuotaRequestState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota request status details.",
              "properties": {
                "message": {
                  "description": "A user friendly message.",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestStatusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Response for the quota submission request.",
              "properties": {
                "id": {
                  "description": "The quota request ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "The quotaRequests.",
                      "items": {
                        "description": "The sub-request submitted with the quota request.",
                        "properties": {
                          "limit": {
                            "description": "Quota (resource limit).",
                            "format": "int32",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "message": {
                            "description": "User-friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display localized name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "resourceType": {
                            "description": "Resource type for which the quota check was made.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subRequestId": {
                            "description": "Sub request ID for individual request.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unit": {
                            "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/serviceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestSubmitResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Response with request ID that the quota request was accepted.",
              "properties": {
                "id": {
                  "description": "The quota request ID. Use the requestId parameter to check the request status.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Operation ID",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Quota request status details.",
                  "properties": {
                    "message": {
                      "description": "A user friendly message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestSubmitResponse201"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "kind": {
                        "description": "Resource Provider type to be reserved.",
                        "enum": [
                          "Microsoft.Compute"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "location": {
                        "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
                        "enum": [
                          "westus",
                          "eastus",
                          "eastus2",
                          "northcentralus",
                          "westus2",
                          "southcentralus",
                          "centralus",
                          "westeurope",
                          "northeurope",
                          "eastasia",
                          "southeastasia",
                          "japaneast",
                          "japanwest",
                          "brazilsouth",
                          "australiaeast",
                          "australiasoutheast",
                          "southindia",
                          "westindia",
                          "centralindia",
                          "canadacentral",
                          "canadaeast",
                          "uksouth",
                          "westcentralus",
                          "ukwest"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string"
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged",
                              "Processing"
                            ],
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "mergeDestination": {
                  "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "mergeSources": {
                  "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationMergeProperties"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservationOrders.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "createdDateTime": {
                            "description": "This is the DateTime when the reservation was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identified the reservation.",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "originalQuantity": {
                            "description": "Total Quantity of the SKUs purchased in the Reservation.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged",
                              "Processing"
                            ],
                            "type": "string"
                          },
                          "requestDateTime": {
                            "description": "This is the DateTime when the reservation was initially requested for purchase.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "reservations": {
                            "items": {
                              "properties": {
                                "etag": {
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "Identifier of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Resource Provider type to be reserved.",
                                  "enum": [
                                    "Microsoft.Compute"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "Kind"
                                  }
                                },
                                "location": {
                                  "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
                                  "enum": [
                                    "westus",
                                    "eastus",
                                    "eastus2",
                                    "northcentralus",
                                    "westus2",
                                    "southcentralus",
                                    "centralus",
                                    "westeurope",
                                    "northeurope",
                                    "eastasia",
                                    "southeastasia",
                                    "japaneast",
                                    "japanwest",
                                    "brazilsouth",
                                    "australiaeast",
                                    "australiasoutheast",
                                    "southindia",
                                    "westindia",
                                    "centralindia",
                                    "canadacentral",
                                    "canadaeast",
                                    "uksouth",
                                    "westcentralus",
                                    "ukwest"
                                  ],
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "properties": {
                                  "properties": {
                                    "appliedScopeType": {
                                      "description": "Type of the Applied Scope.",
                                      "enum": [
                                        "Single",
                                        "Shared"
                                      ],
                                      "type": "string"
                                    },
                                    "appliedScopes": {
                                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                      "items": {
                                        "maxItems": 1,
                                        "minItems": 1,
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "displayName": {
                                      "description": "Friendly name for user to easily identify the reservation",
                                      "type": "string"
                                    },
                                    "effectiveDateTime": {
                                      "description": "DateTime of the Reservation starting when this version is effective from.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "expiryDate": {
                                      "description": "This is the date when the Reservation will expire.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "extendedStatusInfo": {
                                      "properties": {
                                        "message": {
                                          "description": "The message giving detailed information about the status code.",
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "enum": [
                                            "None",
                                            "Pending",
                                            "Active",
                                            "PurchaseError",
                                            "PaymentInstrumentError",
                                            "Split",
                                            "Merged",
                                            "Expired",
                                            "Succeeded"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "lastUpdatedDateTime": {
                                      "description": "DateTime of the last time the Reservation was updated.",
                                      "format": "date-time",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "mergeProperties": {
                                      "properties": {
                                        "mergeDestination": {
                                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        },
                                        "mergeSources": {
                                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "provisioningState": {
                                      "description": "Represent the current state of the Reservation.",
                                      "enum": [
                                        "Creating",
                                        "PendingResourceHold",
                                        "ConfirmedResourceHold",
                                        "PendingBilling",
                                        "ConfirmedBilling",
                                        "Created",
                                        "Succeeded",
                                        "Cancelled",
                                        "Expired",
                                        "BillingFailed",
                                        "Failed",
                                        "Split",
                                        "Merged",
                                        "Processing"
                                      ],
                                      "type": "string"
                                    },
                                    "quantity": {
                                      "description": "Quantity of the SKUs that are part of the Reservation.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "splitProperties": {
                                      "properties": {
                                        "splitDestinations": {
                                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "splitSource": {
                                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "sku": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": {
                                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "x-ms-azure-resource": true
                            },
                            "type": "array"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderList"
          },
          {
            "oldValue": {
              "properties": {
                "createdDateTime": {
                  "description": "This is the DateTime when the reservation was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identified the reservation.",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "originalQuantity": {
                  "description": "Total Quantity of the SKUs purchased in the Reservation.",
                  "format": "int32",
                  "type": "integer"
                },
                "provisioningState": {
                  "description": "Represent the current state of the Reservation.",
                  "enum": [
                    "Creating",
                    "PendingResourceHold",
                    "ConfirmedResourceHold",
                    "PendingBilling",
                    "ConfirmedBilling",
                    "Created",
                    "Succeeded",
                    "Cancelled",
                    "Expired",
                    "BillingFailed",
                    "Failed",
                    "Split",
                    "Merged",
                    "Processing"
                  ],
                  "type": "string"
                },
                "requestDateTime": {
                  "description": "This is the DateTime when the reservation was initially requested for purchase.",
                  "format": "date-time",
                  "type": "string"
                },
                "reservations": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "kind": {
                        "description": "Resource Provider type to be reserved.",
                        "enum": [
                          "Microsoft.Compute"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "location": {
                        "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
                        "enum": [
                          "westus",
                          "eastus",
                          "eastus2",
                          "northcentralus",
                          "westus2",
                          "southcentralus",
                          "centralus",
                          "westeurope",
                          "northeurope",
                          "eastasia",
                          "southeastasia",
                          "japaneast",
                          "japanwest",
                          "brazilsouth",
                          "australiaeast",
                          "australiasoutheast",
                          "southindia",
                          "westindia",
                          "centralindia",
                          "canadacentral",
                          "canadaeast",
                          "uksouth",
                          "westcentralus",
                          "ukwest"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string"
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged",
                              "Processing"
                            ],
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderProperties"
          },
          {
            "oldValue": {
              "properties": {
                "etag": {
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "createdDateTime": {
                      "description": "This is the DateTime when the reservation was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identified the reservation.",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "originalQuantity": {
                      "description": "Total Quantity of the SKUs purchased in the Reservation.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "provisioningState": {
                      "description": "Represent the current state of the Reservation.",
                      "enum": [
                        "Creating",
                        "PendingResourceHold",
                        "ConfirmedResourceHold",
                        "PendingBilling",
                        "ConfirmedBilling",
                        "Created",
                        "Succeeded",
                        "Cancelled",
                        "Expired",
                        "BillingFailed",
                        "Failed",
                        "Split",
                        "Merged",
                        "Processing"
                      ],
                      "type": "string"
                    },
                    "requestDateTime": {
                      "description": "This is the DateTime when the reservation was initially requested for purchase.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "reservations": {
                      "items": {
                        "properties": {
                          "etag": {
                            "type": "integer"
                          },
                          "id": {
                            "description": "Identifier of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "kind": {
                            "description": "Resource Provider type to be reserved.",
                            "enum": [
                              "Microsoft.Compute"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Kind"
                            }
                          },
                          "location": {
                            "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
                            "enum": [
                              "westus",
                              "eastus",
                              "eastus2",
                              "northcentralus",
                              "westus2",
                              "southcentralus",
                              "centralus",
                              "westeurope",
                              "northeurope",
                              "eastasia",
                              "southeastasia",
                              "japaneast",
                              "japanwest",
                              "brazilsouth",
                              "australiaeast",
                              "australiasoutheast",
                              "southindia",
                              "westindia",
                              "centralindia",
                              "canadacentral",
                              "canadaeast",
                              "uksouth",
                              "westcentralus",
                              "ukwest"
                            ],
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "properties": {
                            "properties": {
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string"
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "displayName": {
                                "description": "Friendly name for user to easily identify the reservation",
                                "type": "string"
                              },
                              "effectiveDateTime": {
                                "description": "DateTime of the Reservation starting when this version is effective from.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "expiryDate": {
                                "description": "This is the date when the Reservation will expire.",
                                "format": "date",
                                "type": "string"
                              },
                              "extendedStatusInfo": {
                                "properties": {
                                  "message": {
                                    "description": "The message giving detailed information about the status code.",
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "enum": [
                                      "None",
                                      "Pending",
                                      "Active",
                                      "PurchaseError",
                                      "PaymentInstrumentError",
                                      "Split",
                                      "Merged",
                                      "Expired",
                                      "Succeeded"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "lastUpdatedDateTime": {
                                "description": "DateTime of the last time the Reservation was updated.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "mergeProperties": {
                                "properties": {
                                  "mergeDestination": {
                                    "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "mergeSources": {
                                    "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "provisioningState": {
                                "description": "Represent the current state of the Reservation.",
                                "enum": [
                                  "Creating",
                                  "PendingResourceHold",
                                  "ConfirmedResourceHold",
                                  "PendingBilling",
                                  "ConfirmedBilling",
                                  "Created",
                                  "Succeeded",
                                  "Cancelled",
                                  "Expired",
                                  "BillingFailed",
                                  "Failed",
                                  "Split",
                                  "Merged",
                                  "Processing"
                                ],
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "splitProperties": {
                                "properties": {
                                  "splitDestinations": {
                                    "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "splitSource": {
                                    "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      },
                      "type": "array"
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderResponse"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string"
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identify the reservation",
                  "type": "string"
                },
                "effectiveDateTime": {
                  "description": "DateTime of the Reservation starting when this version is effective from.",
                  "format": "date-time",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "extendedStatusInfo": {
                  "properties": {
                    "message": {
                      "description": "The message giving detailed information about the status code.",
                      "type": "string"
                    },
                    "statusCode": {
                      "enum": [
                        "None",
                        "Pending",
                        "Active",
                        "PurchaseError",
                        "PaymentInstrumentError",
                        "Split",
                        "Merged",
                        "Expired",
                        "Succeeded"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "lastUpdatedDateTime": {
                  "description": "DateTime of the last time the Reservation was updated.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "mergeProperties": {
                  "properties": {
                    "mergeDestination": {
                      "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    },
                    "mergeSources": {
                      "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Represent the current state of the Reservation.",
                  "enum": [
                    "Creating",
                    "PendingResourceHold",
                    "ConfirmedResourceHold",
                    "PendingBilling",
                    "ConfirmedBilling",
                    "Created",
                    "Succeeded",
                    "Cancelled",
                    "Expired",
                    "BillingFailed",
                    "Failed",
                    "Split",
                    "Merged",
                    "Processing"
                  ],
                  "type": "string"
                },
                "quantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation.",
                  "format": "int32",
                  "type": "integer"
                },
                "splitProperties": {
                  "properties": {
                    "splitDestinations": {
                      "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "splitSource": {
                      "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationProperties"
          },
          {
            "oldValue": {
              "properties": {
                "etag": {
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "kind": {
                  "description": "Resource Provider type to be reserved.",
                  "enum": [
                    "Microsoft.Compute"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "location": {
                  "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
                  "enum": [
                    "westus",
                    "eastus",
                    "eastus2",
                    "northcentralus",
                    "westus2",
                    "southcentralus",
                    "centralus",
                    "westeurope",
                    "northeurope",
                    "eastasia",
                    "southeastasia",
                    "japaneast",
                    "japanwest",
                    "brazilsouth",
                    "australiaeast",
                    "australiasoutheast",
                    "southindia",
                    "westindia",
                    "centralindia",
                    "canadacentral",
                    "canadaeast",
                    "uksouth",
                    "westcentralus",
                    "ukwest"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string"
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identify the reservation",
                      "type": "string"
                    },
                    "effectiveDateTime": {
                      "description": "DateTime of the Reservation starting when this version is effective from.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "extendedStatusInfo": {
                      "properties": {
                        "message": {
                          "description": "The message giving detailed information about the status code.",
                          "type": "string"
                        },
                        "statusCode": {
                          "enum": [
                            "None",
                            "Pending",
                            "Active",
                            "PurchaseError",
                            "PaymentInstrumentError",
                            "Split",
                            "Merged",
                            "Expired",
                            "Succeeded"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "lastUpdatedDateTime": {
                      "description": "DateTime of the last time the Reservation was updated.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "mergeProperties": {
                      "properties": {
                        "mergeDestination": {
                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        },
                        "mergeSources": {
                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Represent the current state of the Reservation.",
                      "enum": [
                        "Creating",
                        "PendingResourceHold",
                        "ConfirmedResourceHold",
                        "PendingBilling",
                        "ConfirmedBilling",
                        "Created",
                        "Succeeded",
                        "Cancelled",
                        "Expired",
                        "BillingFailed",
                        "Failed",
                        "Split",
                        "Merged",
                        "Processing"
                      ],
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "splitProperties": {
                      "properties": {
                        "splitDestinations": {
                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "splitSource": {
                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationResponse"
          },
          {
            "oldValue": {
              "properties": {
                "splitDestinations": {
                  "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "splitSource": {
                  "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSplitProperties"
          },
          {
            "oldValue": {
              "enum": [
                "None",
                "Pending",
                "Active",
                "PurchaseError",
                "PaymentInstrumentError",
                "Split",
                "Merged",
                "Expired",
                "Succeeded"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationStatusCode"
          },
          {
            "oldValue": {
              "description": "Represent the term of Reservation.",
              "enum": [
                "P1Y",
                "P3Y"
              ],
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationTerm"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
              "properties": {
                "localizedValue": {
                  "description": "Resource display localized name.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "Resource name.",
                  "readOnly": false,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ResourceName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource types.",
              "enum": [
                "standard",
                "dedicated",
                "lowPriority",
                "shared",
                "serviceSpecific"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ResourceType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/ResourceTypesName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The API error details.",
              "properties": {
                "code": {
                  "description": "The error code.",
                  "type": "string"
                },
                "details": {
                  "description": "The list of error details.",
                  "items": {
                    "description": "The error details.",
                    "properties": {
                      "code": {
                        "description": "The error code.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "message": {
                  "description": "The error message text.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ServiceError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The error details.",
              "properties": {
                "code": {
                  "description": "The error code.",
                  "readOnly": true,
                  "type": "string"
                },
                "message": {
                  "description": "The error message.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ServiceErrorDetail"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "description": "An invariant to describe the feature.",
                  "type": "string"
                },
                "value": {
                  "description": "An invariant if the feature is measured by quantity.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuCapability"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuName"
          },
          {
            "oldValue": {
              "properties": {
                "reasonCode": {
                  "description": "The reason for restriction.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of restrictions.",
                  "type": "string"
                },
                "values": {
                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuRestriction"
          },
          {
            "oldValue": {
              "properties": {
                "quantities": {
                  "description": "List of the quantities in the new reservations to create.",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "integer"
                  },
                  "type": "array"
                },
                "reservationId": {
                  "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "quantities": {
                      "description": "List of the quantities in the new reservations to create.",
                      "items": {
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "reservationId": {
                      "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The sub-request submitted with the quota request.",
              "properties": {
                "limit": {
                  "description": "Quota (resource limit).",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer"
                },
                "message": {
                  "description": "User-friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                  "properties": {
                    "localizedValue": {
                      "description": "Resource display localized name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "Resource name.",
                      "readOnly": false,
                      "type": "string"
                    }
                  }
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "resourceType": {
                  "description": "Resource type for which the quota check was made.",
                  "readOnly": true,
                  "type": "string"
                },
                "subRequestId": {
                  "description": "Sub request ID for individual request.",
                  "readOnly": true,
                  "type": "string"
                },
                "unit": {
                  "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SubRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of quota request.",
              "properties": {
                "message": {
                  "description": "User friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Quota properties.",
                  "properties": {
                    "id": {
                      "description": "The quota request ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the quota request.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "properties": {
                      "description": "Quota properties for the resource.",
                      "properties": {
                        "currentValue": {
                          "description": "Current usage value for the resource.",
                          "format": "int32",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "Quota properties.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Resource name provided by the resource provider. Use this property for quotaRequest parameter.",
                          "properties": {
                            "localizedValue": {
                              "description": "Resource display localized name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "Resource name.",
                              "readOnly": false,
                              "type": "string"
                            }
                          }
                        },
                        "properties": {
                          "description": "Additional properties for the specified resource provider.",
                          "type": "object"
                        },
                        "quotaPeriod": {
                          "description": "The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "resourceType": {
                          "description": "The resource types.",
                          "enum": [
                            "standard",
                            "dedicated",
                            "lowPriority",
                            "shared",
                            "serviceSpecific"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ResourceType"
                          }
                        },
                        "unit": {
                          "description": " The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation.",
                          "readOnly": false,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-ms-azure-resource": true
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "requestSubmitTime": {
                  "description": "The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/quotaRequestOneResourceProperties"
          }
        ],
        "parameters": [
          {
            "oldValue": "Supported version.",
            "value": "API version.",
            "op": "replace",
            "from": "",
            "path": "/ApiVersionParameter/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure region.",
              "in": "path",
              "name": "location",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/LocationIdInParameters"
          },
          {
            "oldValue": {
              "description": "Information needed for commercial request for a reservation",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "sources": {
                        "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to patch a reservation item",
              "in": "body",
              "name": "parameters",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "appliedScopeType": {
                        "description": "Type of the Applied Scope.",
                        "enum": [
                          "Single",
                          "Shared"
                        ],
                        "type": "string"
                      },
                      "appliedScopes": {
                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                        "items": {
                          "maxItems": 1,
                          "minItems": 1,
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure resource provider ID.",
              "in": "path",
              "name": "providerId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ProviderIdInParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota Request ID.",
              "in": "path",
              "name": "id",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/RequestIdInParameters"
          },
          {
            "oldValue": {
              "description": "Id of the Reservation Item",
              "in": "path",
              "name": "reservationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationIdParameter"
          },
          {
            "oldValue": {
              "description": "Order Id of the reservation\n",
              "in": "path",
              "name": "reservationOrderId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource name for a resource provider, such as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ResourceNameInParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element includes a skiptoken parameter that specifies a starting point to use for subsequent calls.",
              "in": "query",
              "name": "$skiptoken",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SkipTokenParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to Split a reservation item",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "quantities": {
                        "description": "List of the quantities in the new reservations to create.",
                        "items": {
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "reservationId": {
                        "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure subscription ID.",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SubscriptionIdInParameters"
          },
          {
            "oldValue": {
              "description": "Id of the subscription",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Number of records to return.",
              "format": "int32",
              "in": "query",
              "minimum": 1,
              "name": "$top",
              "required": false,
              "type": "integer",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/TopQueryParameter"
          }
        ]
      }
    },
    "info": {
      "description": {
        "from": "This API describe Azure Reservation",
        "to": "Microsoft Azure Quota Resource Provider"
      },
      "version": {
        "from": "2017-11-01",
        "to": "2020-10-25"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests/{id}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}"
      ],
      "deleted": [
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations",
        "/providers/Microsoft.Capacity/reservationOrders",
        "/providers/Microsoft.Capacity/operations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}"
      ]
    },
    "security": {
      "added": [
        "azure_auth"
      ]
    }
  },
  "tools_a": {
    "GetCatalog": "FunctionDef(\n  name='GetCatalog',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/catalogs')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='GetCatalog')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the regions and skus that are available for RI purchase for the specified Azure subscription.'))])],\n  type_params=[])",
    "GetAppliedReservationList": "FunctionDef(\n  name='GetAppliedReservationList',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get applicable `Reservation`s that are applied to this subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/appliedReservations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='GetAppliedReservationList')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get list of applicable `Reservation`s.: Get applicable `Reservation`s that are applied to this subscription.'))])],\n  type_params=[])",
    "ReservationOrder_List": "FunctionDef(\n  name='ReservationOrder_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the `ReservationOrder`s that the user has access to in the current tenant.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all `ReservationOrder`s.: List of all the `ReservationOrder`s that the user has access to in the current tenant.'))])],\n  type_params=[])",
    "ReservationOrder_Get": "FunctionDef(\n  name='ReservationOrder_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the details of the `ReservationOrder`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a specific `ReservationOrder`.: Get the details of the `ReservationOrder`.'))])],\n  type_params=[])",
    "Reservation_Split": "FunctionDef(\n  name='Reservation_Split',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Split a `Reservation` into two `Reservation`s with specified quantity distribution. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/split')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Split')),\n        keyword(\n          arg='description',\n          value=Constant(value='Split the `Reservation`.: Split a `Reservation` into two `Reservation`s with specified quantity distribution.\\n'))])],\n  type_params=[])",
    "Reservation_Merge": "FunctionDef(\n  name='Reservation_Merge',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/merge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Merge')),\n        keyword(\n          arg='description',\n          value=Constant(value='Merges two `Reservation`s.: Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.'))])],\n  type_params=[])",
    "Reservation_List": "FunctionDef(\n  name='Reservation_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List `Reservation`s within a single `ReservationOrder`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation`s in a given reservation Order: List `Reservation`s within a single `ReservationOrder`.'))])],\n  type_params=[])",
    "Reservation_Get": "FunctionDef(\n  name='Reservation_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get specific `Reservation` details.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` details.: Get specific `Reservation` details.'))])],\n  type_params=[])",
    "Reservation_Update": "FunctionDef(\n  name='Reservation_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the applied scopes of the `Reservation`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates a `Reservation`.: Updates the applied scopes of the `Reservation`.'))])],\n  type_params=[])",
    "Reservation_ListRevisions": "FunctionDef(\n  name='Reservation_ListRevisions',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the revisions for the `Reservation`. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revisions')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_ListRevisions')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` revisions.: List of all the revisions for the `Reservation`.\\n'))])],\n  type_params=[])",
    "Operation_List": "FunctionDef(\n  name='Operation_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all the operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operation_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get operations.: List all the operations.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Quota_Get": "FunctionDef(\n  name='Quota_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the current quota (service limit) and usage of a resource. You can use the response from the GET operation to submit quota update request.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the current quota (service limit) and usage of a resource. You can use the response from the GET operation to submit quota update request.'))])],\n  type_params=[])",
    "Quota_CreateOrUpdate": "FunctionDef(\n  name='Quota_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the quota (service limits) of a resource to the requested value.  Steps:    1. Make the Get request to get the quota information for specific resource.    2. To increase the quota, update the limit field in the response from Get request to new value.    3. Submit the JSON to the quota request API to update the quota.    The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update the quota (service limits) of a resource to the requested value.\\n Steps:\\r\\n  1. Make the Get request to get the quota information for specific resource.\\r\\n  2. To increase the quota, update the limit field in the response from Get request to new value.\\r\\n  3. Submit the JSON to the quota request API to update the quota.\\r\\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.'))])],\n  type_params=[])",
    "Quota_Update": "FunctionDef(\n  name='Quota_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update the quota (service limits) of this resource to the requested value.    • To get the quota information for specific resource, send a GET request.    • To increase the quota, update the limit field from the GET response to a new value.    • To update the quota value, submit the JSON response to the quota request API to update the quota.    • To update the quota. use the PATCH operation.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update the quota (service limits) of this resource to the requested value.\\r\\n  • To get the quota information for specific resource, send a GET request.\\r\\n  • To increase the quota, update the limit field from the GET response to a new value.\\r\\n  • To update the quota value, submit the JSON response to the quota request API to update the quota.\\r\\n  • To update the quota. use the PATCH operation.'))])],\n  type_params=[])",
    "Quota_List": "FunctionDef(\n  name='Quota_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.'))])],\n  type_params=[])",
    "QuotaRequestStatus_Get": "FunctionDef(\n  name='QuotaRequestStatus_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='id',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='For the specified Azure region (location), get the details and status of the quota request by the quota request ID for the resources of the resource provider. The PUT request for the quota (service limit) returns a response with the requestId parameter.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimitsRequests/'),\n          FormattedValue(\n            value=Name(id='id', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='id', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: id')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='QuotaRequestStatus_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='For the specified Azure region (location), get the details and status of the quota request by the quota request ID for the resources of the resource provider. The PUT request for the quota (service limit) returns a response with the requestId parameter.'))])],\n  type_params=[])",
    "QuotaRequestStatus_List": "FunctionDef(\n  name='QuotaRequestStatus_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimitsRequests')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='QuotaRequestStatus_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.'))])],\n  type_params=[])"
  }
}