{
  "input": {
    "oas_diff": {
      "extensions": {
        "modified": {
          "definitions": [
            {
              "oldValue": {
                "description": "The response of the list policy operation.",
                "properties": {
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Policy Contract value.",
                    "items": {
                      "allOf": [
                        {
                          "description": "The Resource definition.",
                          "properties": {
                            "id": {
                              "description": "Resource ID.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Resource name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "Resource type for API Management resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "x-ms-azure-resource": true
                        }
                      ],
                      "description": "Policy Contract details.",
                      "properties": {
                        "properties": {
                          "description": "Policy contract Properties.",
                          "properties": {
                            "contentFormat": {
                              "default": "xml",
                              "description": "Format of the policyContent.",
                              "enum": [
                                "xml",
                                "xml-link",
                                "rawxml",
                                "rawxml-link"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "PolicyContentFormat",
                                "values": [
                                  {
                                    "description": "The contents are inline and Content type is an XML document.",
                                    "value": "xml"
                                  },
                                  {
                                    "description": "The policy XML document is hosted on a http endpoint accessible from the API Management service.",
                                    "value": "xml-link"
                                  },
                                  {
                                    "description": "The contents are inline and Content type is a non XML encoded policy document.",
                                    "value": "rawxml"
                                  },
                                  {
                                    "description": "The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.",
                                    "value": "rawxml-link"
                                  }
                                ]
                              }
                            },
                            "policyContent": {
                              "description": "Json escaped Xml Encoded contents of the Policy.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "policyContent"
                          ]
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PolicyCollection"
            },
            {
              "oldValue": {
                "allOf": [
                  {
                    "description": "The Resource definition.",
                    "properties": {
                      "id": {
                        "description": "Resource ID.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Resource name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "type": {
                        "description": "Resource type for API Management resource.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "Policy Contract details.",
                "properties": {
                  "properties": {
                    "description": "Policy contract Properties.",
                    "properties": {
                      "contentFormat": {
                        "default": "xml",
                        "description": "Format of the policyContent.",
                        "enum": [
                          "xml",
                          "xml-link",
                          "rawxml",
                          "rawxml-link"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PolicyContentFormat",
                          "values": [
                            {
                              "description": "The contents are inline and Content type is an XML document.",
                              "value": "xml"
                            },
                            {
                              "description": "The policy XML document is hosted on a http endpoint accessible from the API Management service.",
                              "value": "xml-link"
                            },
                            {
                              "description": "The contents are inline and Content type is a non XML encoded policy document.",
                              "value": "rawxml"
                            },
                            {
                              "description": "The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.",
                              "value": "rawxml-link"
                            }
                          ]
                        }
                      },
                      "policyContent": {
                        "description": "Json escaped Xml Encoded contents of the Policy.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "policyContent"
                    ]
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PolicyContract"
            },
            {
              "oldValue": {
                "description": "Policy contract Properties.",
                "properties": {
                  "contentFormat": {
                    "default": "xml",
                    "description": "Format of the policyContent.",
                    "enum": [
                      "xml",
                      "xml-link",
                      "rawxml",
                      "rawxml-link"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "PolicyContentFormat",
                      "values": [
                        {
                          "description": "The contents are inline and Content type is an XML document.",
                          "value": "xml"
                        },
                        {
                          "description": "The policy XML document is hosted on a http endpoint accessible from the API Management service.",
                          "value": "xml-link"
                        },
                        {
                          "description": "The contents are inline and Content type is a non XML encoded policy document.",
                          "value": "rawxml"
                        },
                        {
                          "description": "The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.",
                          "value": "rawxml-link"
                        }
                      ]
                    }
                  },
                  "policyContent": {
                    "description": "Json escaped Xml Encoded contents of the Policy.",
                    "type": "string"
                  }
                },
                "required": [
                  "policyContent"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PolicyContractProperties"
            },
            {
              "oldValue": {
                "description": "Policy snippet.",
                "properties": {
                  "content": {
                    "description": "Snippet content.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Snippet name.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "scope": {
                    "description": "Binary OR value of the Snippet scope.",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "toolTip": {
                    "description": "Snippet toolTip.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PolicySnippetContract"
            },
            {
              "oldValue": {
                "description": "The response of the list policy snippets operation.",
                "properties": {
                  "value": {
                    "description": "Policy snippet value.",
                    "items": {
                      "description": "Policy snippet.",
                      "properties": {
                        "content": {
                          "description": "Snippet content.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Snippet name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "scope": {
                          "description": "Binary OR value of the Snippet scope.",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "toolTip": {
                          "description": "Snippet toolTip.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PolicySnippetsCollection"
            }
          ],
          "parameters": [
            {
              "oldValue": null,
              "value": {
                "description": "The identifier of the Access configuration.",
                "enum": [
                  "access"
                ],
                "in": "path",
                "name": "accessName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "AccessIdName"
                },
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/AccessParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "API identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "apiId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ApiIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "apiId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ApiIdRevParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Api Version Set identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "versionSetId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ApiVersionSetIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Attachment identifier within an Issue. Must be unique in the current Issue.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "attachmentId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/AttachmentIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the authorization server.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "authsid",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/AuthenticationServerIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the Backend entity. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "backendId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/BackendIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the Cache entity. Cache identifier (should be either 'default' or valid Azure region identifier).",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "cacheId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/CacheIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the certificate entity. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "certificateId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/CertificateIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Comment identifier within an Issue. Must be unique in the current Issue.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "commentId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/CommentIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The identifier of the Git Configuration Operation.",
                "enum": [
                  "configuration"
                ],
                "in": "path",
                "name": "configurationName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "configurationIdName"
                },
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ConfigurationParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Diagnostic identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "diagnosticId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/DiagnosticIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Email identifier.",
                "in": "path",
                "name": "email",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/EmailParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Group identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "groupId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/GroupIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identity Provider Type identifier.",
                "enum": [
                  "facebook",
                  "google",
                  "microsoft",
                  "twitter",
                  "aad",
                  "aadB2C"
                ],
                "in": "path",
                "name": "identityProviderName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "IdentityProviderType",
                  "values": [
                    {
                      "description": "Facebook as Identity provider.",
                      "value": "facebook"
                    },
                    {
                      "description": "Google as Identity provider.",
                      "value": "google"
                    },
                    {
                      "description": "Microsoft Live as Identity provider.",
                      "value": "microsoft"
                    },
                    {
                      "description": "Twitter as Identity provider.",
                      "value": "twitter"
                    },
                    {
                      "description": "Azure Active Directory as Identity provider.",
                      "value": "aad"
                    },
                    {
                      "description": "Azure Active Directory B2C as Identity provider.",
                      "value": "aadB2C"
                    }
                  ]
                },
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/IdentityProviderNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Issue identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "issueId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/IssueIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Location in which the API Management service is deployed. This is one of the Azure Regions like West US, East US, South Central US.",
                "in": "path",
                "minLength": 1,
                "name": "locationName",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/LocationNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Logger identifier. Must be unique in the API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "name": "loggerId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/LoggerIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Notification Name Identifier.",
                "enum": [
                  "RequestPublisherNotificationMessage",
                  "PurchasePublisherNotificationMessage",
                  "NewApplicationNotificationMessage",
                  "BCC",
                  "NewIssuePublisherNotificationMessage",
                  "AccountClosedPublisher",
                  "QuotaLimitApproachingPublisherNotificationMessage"
                ],
                "in": "path",
                "name": "notificationName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "NotificationName",
                  "values": [
                    {
                      "description": "The following email recipients and users will receive email notifications about subscription requests for API products requiring approval.",
                      "value": "RequestPublisherNotificationMessage"
                    },
                    {
                      "description": "The following email recipients and users will receive email notifications about new API product subscriptions.",
                      "value": "PurchasePublisherNotificationMessage"
                    },
                    {
                      "description": "The following email recipients and users will receive email notifications when new applications are submitted to the application gallery.",
                      "value": "NewApplicationNotificationMessage"
                    },
                    {
                      "description": "The following recipients will receive blind carbon copies of all emails sent to developers.",
                      "value": "BCC"
                    },
                    {
                      "description": "The following email recipients and users will receive email notifications when a new issue or comment is submitted on the developer portal.",
                      "value": "NewIssuePublisherNotificationMessage"
                    },
                    {
                      "description": "The following email recipients and users will receive email notifications when developer closes his account.",
                      "value": "AccountClosedPublisher"
                    },
                    {
                      "description": "The following email recipients and users will receive email notifications when subscription usage gets close to usage quota.",
                      "value": "QuotaLimitApproachingPublisherNotificationMessage"
                    }
                  ]
                },
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/NotificationNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Notify change in Subscription State. \n - If false, do not send any email notification for change of state of subscription \n - If true, send email notification of change of state of subscription ",
                "in": "query",
                "name": "notify",
                "required": false,
                "type": "boolean",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/NotifySubscriptionStateChangeParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the OpenID Connect Provider.",
                "in": "path",
                "maxLength": 256,
                "name": "opid",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/OpenIdConnectIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Operation identifier within an API. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "operationId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/OperationIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Product identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "productId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ProductIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Identifier of the property.",
                "in": "path",
                "maxLength": 256,
                "name": "propId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/PropertyIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Quota counter key identifier.This is the result of expression defined in counter-key attribute of the quota-by-key policy.For Example, if you specify counter-key=\"boo\" in the policy, then it\u2019s accessible by \"boo\" counter key. But if it\u2019s defined as counter-key=\"@(\"b\"+\"a\")\" then it will be accessible by \"ba\" key",
                "in": "path",
                "name": "quotaCounterKey",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/QuotaCounterKeyParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Quota period key identifier.",
                "in": "path",
                "name": "quotaPeriodKey",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/QuotaPeriodKeyParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Release identifier within an API. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "releaseId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/ReleaseIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Schema identifier within an API. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "schemaId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/SchemaIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Subscription entity Identifier. The entity represents the association between a user and a product in API Management.",
                "in": "path",
                "maxLength": 256,
                "name": "sid",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/SubscriptionEntityIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Tag identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "tagId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/TagIdParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "Email Template Name Identifier.",
                "enum": [
                  "applicationApprovedNotificationMessage",
                  "accountClosedDeveloper",
                  "quotaLimitApproachingDeveloperNotificationMessage",
                  "newDeveloperNotificationMessage",
                  "emailChangeIdentityDefault",
                  "inviteUserNotificationMessage",
                  "newCommentNotificationMessage",
                  "confirmSignUpIdentityDefault",
                  "newIssueNotificationMessage",
                  "purchaseDeveloperNotificationMessage",
                  "passwordResetIdentityDefault",
                  "passwordResetByAdminNotificationMessage",
                  "rejectDeveloperNotificationMessage",
                  "requestDeveloperNotificationMessage"
                ],
                "in": "path",
                "name": "templateName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "TemplateName"
                },
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/TemplateNameParameter"
            },
            {
              "oldValue": null,
              "value": {
                "description": "User identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 80,
                "minLength": 1,
                "name": "userId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "op": "add",
              "from": "",
              "path": "/UserIdParameter"
            }
          ]
        }
      },
      "info": {
        "version": {
          "from": "2018-01-01",
          "to": "2018-06-01-preview"
        }
      },
      "paths": {
        "deleted": [
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/regions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policies/{policyId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policySnippets"
        ]
      }
    },
    "stub_ast_a": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "flask",
          "names": [
            {
              "type": "alias",
              "name": "Flask",
              "asname": null
            },
            {
              "type": "alias",
              "name": "request",
              "asname": null
            },
            {
              "type": "alias",
              "name": "redirect",
              "asname": null
            },
            {
              "type": "alias",
              "name": "session",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "secrets",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "hashlib",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": "b64"
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Name",
              "id": "app",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "Flask",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Name",
                "id": "__name__",
                "ctx": {
                  "type": "Load"
                }
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "app",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "secret_key",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "os",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "getenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "OAUTH2_SECRET_KEY",
                "kind": null
              },
              {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "secrets",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "token_hex",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": 16,
                    "kind": null
                  }
                ],
                "keywords": []
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[OAUTH LOGIN SERVER] Flask OAuth2 login server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "app",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "debug",
                    "value": {
                      "type": "Constant",
                      "value": true,
                      "kind": null
                    }
                  },
                  {
                    "type": "keyword",
                    "arg": "port",
                    "value": {
                      "type": "Constant",
                      "value": 8888,
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  },
  "output": {
    "stub_ast_b": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "json",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "typing",
          "names": [
            {
              "type": "alias",
              "name": "Optional",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Union",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Any",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "ImportFrom",
          "module": "fastmcp",
          "names": [
            {
              "type": "alias",
              "name": "FastMCP",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[MCP SERVER] FastMCP server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Assign",
              "targets": [
                {
                  "type": "Name",
                  "id": "mcp",
                  "ctx": {
                    "type": "Store"
                  }
                }
              ],
              "value": {
                "type": "Call",
                "func": {
                  "type": "Name",
                  "id": "FastMCP",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": "my-server",
                    "kind": null
                  }
                ],
                "keywords": []
              },
              "type_comment": null
            },
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "mcp",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "transport",
                    "value": {
                      "type": "Constant",
                      "value": "stdio",
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  }
}