{
  "input": {
    "oas_diff": {
      "extensions": {
        "deleted": [
          "x-ms-paths"
        ],
        "modified": {
          "definitions": [
            {
              "oldValue": {
                "description": "Tenant access information contract of the API Management service.",
                "properties": {
                  "enabled": {
                    "description": "Tenant access information of the API Management service.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "Identifier.",
                    "type": "string"
                  },
                  "primaryKey": {
                    "description": "Primary access key.",
                    "type": "string"
                  },
                  "secondaryKey": {
                    "description": "Secondary access key.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/AccessInformationContract"
            },
            {
              "oldValue": {
                "description": "Tenant access information update parameters of the API Management service.",
                "properties": {
                  "enabled": {
                    "description": "Tenant access information of the API Management service.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "enabled"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/AccessInformationUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Paged Api list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "API details.",
                      "properties": {
                        "authenticationSettings": {
                          "description": "API Authentication Settings.",
                          "properties": {
                            "oAuth2": {
                              "description": "API OAuth2 Authentication settings details.",
                              "properties": {
                                "authorizationServerId": {
                                  "description": "OAuth authorization server identifier.",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "operations scope.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "description": "Description of the API. May include HTML formatting tags.",
                          "type": "string"
                        },
                        "id": {
                          "description": "API identifier path: /apis/{apiId}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "API name.",
                          "maxLength": 300,
                          "minLength": 1,
                          "type": "string"
                        },
                        "path": {
                          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
                          "maxLength": 400,
                          "minLength": 0,
                          "type": "string"
                        },
                        "protocols": {
                          "description": "Describes on which protocols the operations in this API can be invoked.",
                          "items": {
                            "enum": [
                              "Http",
                              "Https"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ApiProtocolContract"
                            }
                          },
                          "type": "array"
                        },
                        "serviceUrl": {
                          "description": "Absolute URL of the backend service implementing this API.",
                          "maxLength": 2000,
                          "minLength": 1,
                          "type": "string"
                        },
                        "subscriptionKeyParameterNames": {
                          "description": "Subscription key parameter names details.",
                          "example": {
                            "subscriptionKeyParameterNames": {
                              "header": "customHeaderParameterName",
                              "query": "customQueryParameterName"
                            }
                          },
                          "properties": {
                            "header": {
                              "description": "Subscription key header name.",
                              "type": "string"
                            },
                            "query": {
                              "description": "Subscription key query string parameter name.",
                              "type": "string"
                            }
                          }
                        },
                        "type": {
                          "description": "Type of API.",
                          "enum": [
                            "Http",
                            "Soap"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "ApiTypeContract"
                          }
                        }
                      },
                      "required": [
                        "name",
                        "serviceUrl",
                        "path",
                        "protocols"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ApiCollection"
            },
            {
              "oldValue": {
                "description": "API details.",
                "properties": {
                  "authenticationSettings": {
                    "description": "API Authentication Settings.",
                    "properties": {
                      "oAuth2": {
                        "description": "API OAuth2 Authentication settings details.",
                        "properties": {
                          "authorizationServerId": {
                            "description": "OAuth authorization server identifier.",
                            "type": "string"
                          },
                          "scope": {
                            "description": "operations scope.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "description": "Description of the API. May include HTML formatting tags.",
                    "type": "string"
                  },
                  "id": {
                    "description": "API identifier path: /apis/{apiId}",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "API name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "path": {
                    "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
                    "maxLength": 400,
                    "minLength": 0,
                    "type": "string"
                  },
                  "protocols": {
                    "description": "Describes on which protocols the operations in this API can be invoked.",
                    "items": {
                      "enum": [
                        "Http",
                        "Https"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ApiProtocolContract"
                      }
                    },
                    "type": "array"
                  },
                  "serviceUrl": {
                    "description": "Absolute URL of the backend service implementing this API.",
                    "maxLength": 2000,
                    "minLength": 1,
                    "type": "string"
                  },
                  "subscriptionKeyParameterNames": {
                    "description": "Subscription key parameter names details.",
                    "example": {
                      "subscriptionKeyParameterNames": {
                        "header": "customHeaderParameterName",
                        "query": "customQueryParameterName"
                      }
                    },
                    "properties": {
                      "header": {
                        "description": "Subscription key header name.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Subscription key query string parameter name.",
                        "type": "string"
                      }
                    }
                  },
                  "type": {
                    "description": "Type of API.",
                    "enum": [
                      "Http",
                      "Soap"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "ApiTypeContract"
                    }
                  }
                },
                "required": [
                  "name",
                  "serviceUrl",
                  "path",
                  "protocols"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ApiContract"
            },
            {
              "oldValue": {
                "description": "The response model for the export API output operation.",
                "properties": {
                  "content": {
                    "description": "Response content bytes.",
                    "format": "byte",
                    "type": "string"
                  },
                  "requestId": {
                    "type": "string"
                  },
                  "statusCode": {
                    "enum": [
                      "Continue",
                      "OK",
                      "Created",
                      "Accepted",
                      "NotFound",
                      "Conflict"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "HttpStatusCode"
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ApiExportResult"
            },
            {
              "oldValue": {
                "description": "API Authentication Settings.",
                "properties": {
                  "oAuth2": {
                    "description": "API OAuth2 Authentication settings details.",
                    "properties": {
                      "authorizationServerId": {
                        "description": "OAuth authorization server identifier.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "operations scope.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/AuthenticationSettingsContract"
            },
            {
              "oldValue": {
                "description": "Paged OAuth2 Authorization Servers list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "External OAuth authorization server settings.",
                      "example": {
                        "authorizationEndpoint": "https://login.microsoftonline.com/55abb68a-8ews-4565-8675-927722a8a005/oauth2/authorize?api-version=1.0",
                        "authorizationMethods": [
                          "GET"
                        ],
                        "bearerTokenSendingMethods": [
                          "authorizationHeader"
                        ],
                        "clientAuthenticationMethod": [
                          "Body"
                        ],
                        "clientId": "demo",
                        "clientRegistrationEndpoint": "https://contoso.com/",
                        "clientSecret": "demo",
                        "defaultScope": null,
                        "description": null,
                        "grantTypes": [
                          "authorizationCode"
                        ],
                        "id": "/authorizationServers/554be23d0fce600674232c33",
                        "name": "AAD OAuth A/S",
                        "resourceOwnerPassword": null,
                        "resourceOwnerUsername": null,
                        "supportState": false,
                        "tokenBodyParameters": [],
                        "tokenEndpoint": "https://login.microsoftonline.com/55abb68a-8ews-4565-8675-927722a8a005/oauth2/token?api-version=1.0"
                      },
                      "properties": {
                        "authorizationEndpoint": {
                          "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.",
                          "type": "string"
                        },
                        "authorizationMethods": {
                          "description": "HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.",
                          "items": {
                            "enum": [
                              "HEAD",
                              "OPTIONS",
                              "TRACE",
                              "GET",
                              "POST",
                              "PUT",
                              "PATCH",
                              "DELETE"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "MethodContract"
                            }
                          },
                          "type": "array"
                        },
                        "bearerTokenSendingMethods": {
                          "description": "Specifies the mechanism by which access token is passed to the API. ",
                          "externalDocs": {
                            "url": "http://tools.ietf.org/html/rfc6749#section-4"
                          },
                          "items": {
                            "enum": [
                              "authorizationHeader",
                              "query"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "BearerTokenSendingMethodsContract"
                            }
                          },
                          "type": "array"
                        },
                        "clientAuthenticationMethod": {
                          "description": "Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.",
                          "items": {
                            "enum": [
                              "Basic",
                              "Body"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ClientAuthenticationMethodContract"
                            }
                          },
                          "type": "array"
                        },
                        "clientId": {
                          "description": "Client or app id registered with this authorization server.",
                          "type": "string"
                        },
                        "clientRegistrationEndpoint": {
                          "description": "Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "description": "Client or app secret registered with this authorization server.",
                          "type": "string"
                        },
                        "defaultScope": {
                          "description": "Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.",
                          "externalDocs": {
                            "url": "http://tools.ietf.org/html/rfc6749#section-3.3"
                          },
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the authorization server. Can contain HTML formatting tags.",
                          "type": "string"
                        },
                        "grantTypes": {
                          "description": "Form of an authorization grant, which the client uses to request the access token.",
                          "externalDocs": {
                            "url": "http://tools.ietf.org/html/rfc6749#section-4"
                          },
                          "items": {
                            "enum": [
                              "authorizationCode",
                              "implicit",
                              "resourceOwnerPassword",
                              "clientCredentials"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "GrantTypesContract"
                            }
                          },
                          "type": "array"
                        },
                        "id": {
                          "description": "Uniquely identifies the authorization server within the current API Management service instance. The value is a valid relative URL in the format of /authorizationServers/{authsid} where {authsid} is an authorization server identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "User-friendly authorization server name.",
                          "maxLength": 50,
                          "minLength": 1,
                          "type": "string"
                        },
                        "resourceOwnerPassword": {
                          "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.",
                          "type": "string"
                        },
                        "resourceOwnerUsername": {
                          "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.",
                          "type": "string"
                        },
                        "supportState": {
                          "description": "If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.",
                          "externalDocs": {
                            "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                          },
                          "type": "boolean"
                        },
                        "tokenBodyParameters": {
                          "description": "Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.",
                          "items": {
                            "description": "OAuth acquire token request body parameter (www-url-form-encoded).",
                            "properties": {
                              "name": {
                                "description": "body parameter name.",
                                "type": "string"
                              },
                              "value": {
                                "description": "body parameter value.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "value"
                            ]
                          },
                          "type": "array"
                        },
                        "tokenEndpoint": {
                          "description": "OAuth token endpoint. Contains absolute URI to entity being referenced.",
                          "externalDocs": {
                            "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                          },
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "clientRegistrationEndpoint",
                        "authorizationEndpoint",
                        "clientId",
                        "grantTypes"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/AuthorizationServerCollection"
            },
            {
              "oldValue": {
                "description": "Paged Backend list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Backend values.",
                    "items": {
                      "allOf": [
                        {
                          "description": "Parameters supplied to the Create Backend operation.",
                          "properties": {
                            "host": {
                              "description": "Host attribute of the backend. Host is a pure hostname without a port or suffix, for example backend.contoso.com. Must not be empty.",
                              "maxLength": 255,
                              "minLength": 1,
                              "type": "string"
                            },
                            "skipCertificateChainValidation": {
                              "default": false,
                              "description": "Flag indicating whether SSL certificate chain validation should be skipped when using self-signed certificates for this backend host.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "host"
                          ]
                        }
                      ],
                      "description": "The Backend entity in API Management represents a backend service that is configured to skip certification chain validation when using a self-signed certificate to test mutual certificate authentication.",
                      "properties": {
                        "id": {
                          "description": "Uniquely identifies the backend within the current API Management service instance. The value is a valid relative URL in the format of /backends/{backendId} where {backendId} is a backend identifier.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/BackendCollection"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create Backend operation.",
                "properties": {
                  "host": {
                    "description": "Host attribute of the backend. Host is a pure hostname without a port or suffix, for example backend.contoso.com. Must not be empty.",
                    "maxLength": 255,
                    "minLength": 1,
                    "type": "string"
                  },
                  "skipCertificateChainValidation": {
                    "default": false,
                    "description": "Flag indicating whether SSL certificate chain validation should be skipped when using self-signed certificates for this backend host.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "host"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/BackendContract"
            },
            {
              "oldValue": {
                "allOf": [
                  {
                    "description": "Parameters supplied to the Create Backend operation.",
                    "properties": {
                      "host": {
                        "description": "Host attribute of the backend. Host is a pure hostname without a port or suffix, for example backend.contoso.com. Must not be empty.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                      },
                      "skipCertificateChainValidation": {
                        "default": false,
                        "description": "Flag indicating whether SSL certificate chain validation should be skipped when using self-signed certificates for this backend host.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "host"
                    ]
                  }
                ],
                "description": "The Backend entity in API Management represents a backend service that is configured to skip certification chain validation when using a self-signed certificate to test mutual certificate authentication.",
                "properties": {
                  "id": {
                    "description": "Uniquely identifies the backend within the current API Management service instance. The value is a valid relative URL in the format of /backends/{backendId} where {backendId} is a backend identifier.",
                    "readOnly": true,
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/BackendResponse"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update Backend operation.",
                "properties": {
                  "host": {
                    "description": "Host attribute of the backend. Host is a pure hostname without a port or suffix, for example backend.contoso.com. Must not be empty.",
                    "maxLength": 255,
                    "minLength": 1,
                    "type": "string"
                  },
                  "skipCertificateChainValidation": {
                    "default": false,
                    "description": "Flag indicating whether SSL certificate chain validation should be skipped when using self-signed certificates for this backend host.",
                    "type": "boolean"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/BackendUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Paged Certificates list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Certificate details.",
                      "properties": {
                        "expirationDate": {
                          "description": "Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "id": {
                          "description": "Certificate identifier path: /certificates/{certificateId}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "subject": {
                          "description": "Subject attribute of the certificate.",
                          "type": "string"
                        },
                        "thumbprint": {
                          "description": "Thumbprint of the certificate.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "subject",
                        "thumbprint",
                        "expirationDate"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/CertificateCollection"
            },
            {
              "oldValue": {
                "description": "Certificate details.",
                "properties": {
                  "expirationDate": {
                    "description": "Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "id": {
                    "description": "Certificate identifier path: /certificates/{certificateId}",
                    "readOnly": true,
                    "type": "string"
                  },
                  "subject": {
                    "description": "Subject attribute of the certificate.",
                    "type": "string"
                  },
                  "thumbprint": {
                    "description": "Thumbprint of the certificate.",
                    "type": "string"
                  }
                },
                "required": [
                  "subject",
                  "thumbprint",
                  "expirationDate"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/CertificateContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the CreateOrUpdate certificate operation.",
                "properties": {
                  "data": {
                    "description": "Base 64 encoded certificate using the application/x-pkcs12 representation.",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password for the Certificate",
                    "type": "string"
                  }
                },
                "required": [
                  "data",
                  "password"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/CertificateCreateOrUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Deploy Configuration operation.",
                "properties": {
                  "branch": {
                    "description": "The name of the Git branch from which the configuration is to be deployed to the configuration database.",
                    "type": "string"
                  },
                  "force": {
                    "description": "The value enforcing deleting subscriptions to products that are deleted in this update.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "branch"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/DeployConfigurationParameters"
            },
            {
              "oldValue": {
                "description": "Generate SSO Url operations response details.",
                "properties": {
                  "value": {
                    "description": "Redirect Url containing the SSO URL value.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GenerateSsoUrlResult"
            },
            {
              "oldValue": {
                "description": "Paged Group list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Developer group.",
                      "properties": {
                        "builtIn": {
                          "description": "true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.",
                          "readOnly": true,
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Group description. Can contain HTML formatting tags.",
                          "maxLength": 1000,
                          "type": "string"
                        },
                        "externalId": {
                          "description": "For external groups, this property contains the id of the group from the external identity provider, e.g. Azure Active Directory; otherwise the value is null.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "Uniquely identifies the group within the current API Management service instance. The value is a valid relative URL in the format of /groups/{groupId} where {groupId} is a group identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Group name.",
                          "maxLength": 300,
                          "minLength": 1,
                          "type": "string"
                        },
                        "type": {
                          "description": "Group type.",
                          "enum": [
                            "Custom",
                            "System",
                            "External"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "GroupTypeContract"
                          }
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GroupCollection"
            },
            {
              "oldValue": {
                "description": "Developer group.",
                "properties": {
                  "builtIn": {
                    "description": "true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.",
                    "readOnly": true,
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Group description. Can contain HTML formatting tags.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "externalId": {
                    "description": "For external groups, this property contains the id of the group from the external identity provider, e.g. Azure Active Directory; otherwise the value is null.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "id": {
                    "description": "Uniquely identifies the group within the current API Management service instance. The value is a valid relative URL in the format of /groups/{groupId} where {groupId} is a group identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": {
                    "description": "Group type.",
                    "enum": [
                      "Custom",
                      "System",
                      "External"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "GroupTypeContract"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GroupContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create Group operation.",
                "properties": {
                  "description": {
                    "description": "Group description.",
                    "type": "string"
                  },
                  "externalId": {
                    "description": "Identifier for an external group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": {
                    "description": "Group type.",
                    "enum": [
                      "Custom",
                      "System",
                      "External"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "GroupTypeContract"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GroupCreateParameters"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update Group operation.",
                "properties": {
                  "description": {
                    "description": "Group description.",
                    "type": "string"
                  },
                  "externalId": {
                    "description": "Identifier for an external group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": {
                    "description": "Group type.",
                    "enum": [
                      "Custom",
                      "System",
                      "External"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "GroupTypeContract"
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GroupUpdateParameters"
            },
            {
              "oldValue": {
                "description": "The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.",
                "externalDocs": {
                  "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-authorize-developer-accounts-using-azure-active-directory"
                },
                "properties": {
                  "allowedTenants": {
                    "description": "List of Allowed Tenants when configuring Azure Active Directory login.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 32,
                    "type": "array"
                  },
                  "clientId": {
                    "description": "Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "type": {
                    "description": "Identity Provider Type identifier.",
                    "enum": [
                      "facebook",
                      "google",
                      "microsoft",
                      "twitter",
                      "aad"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "IdentityProviderNameType"
                    }
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/IdentityProviderContract"
            },
            {
              "oldValue": {
                "description": "List of all the Identity Providers configured on the service instance.",
                "properties": {
                  "value": {
                    "description": "Identity Provider configuration values.",
                    "items": {
                      "description": "The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.",
                      "externalDocs": {
                        "url": "https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-authorize-developer-accounts-using-azure-active-directory"
                      },
                      "properties": {
                        "allowedTenants": {
                          "description": "List of Allowed Tenants when configuring Azure Active Directory login.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 32,
                          "type": "array"
                        },
                        "clientId": {
                          "description": "Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "clientSecret": {
                          "description": "Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "type": {
                          "description": "Identity Provider Type identifier.",
                          "enum": [
                            "facebook",
                            "google",
                            "microsoft",
                            "twitter",
                            "aad"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "IdentityProviderNameType"
                          }
                        }
                      },
                      "required": [
                        "clientId",
                        "clientSecret"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/IdentityProviderList"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update Identity Provider operation.",
                "properties": {
                  "allowedTenants": {
                    "description": "List of Allowed Tenants when configuring Azure Active Directory login.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 32,
                    "type": "array"
                  },
                  "clientId": {
                    "description": "Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.",
                    "minLength": 1,
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/IdentityProviderUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Paged Logger list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Logger values.",
                    "items": {
                      "description": "The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.",
                      "properties": {
                        "credentials": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "The name and SendRule connection string of the event hub.",
                          "example": {
                            "connectionString": "Endpoint=sb://contoso-ns.servicebus.windows.net/;SharedAccessKeyName=Sender;SharedAccessKey=...",
                            "name": "apim"
                          },
                          "type": "object"
                        },
                        "description": {
                          "description": "Logger description.",
                          "maxLength": 256,
                          "type": "string"
                        },
                        "id": {
                          "description": "Uniquely identifies the logger within the current API Management service instance. The value is a valid relative URL in the format of /loggers/{loggerId} where {loggerId} is a logger identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "isBuffered": {
                          "default": true,
                          "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "Logger type.",
                          "enum": [
                            "AzureEventHub"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "LoggerTypeContract"
                          }
                        }
                      },
                      "required": [
                        "type",
                        "credentials"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/LoggerCollection"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create Logger operation.",
                "properties": {
                  "credentials": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The name and SendRule connection string of the event hub.",
                    "example": {
                      "connectionString": "Endpoint=endpoint and key from Azure classic portal. This property in credentials is must.",
                      "name": "Event hub name. This is optional."
                    },
                    "type": "object"
                  },
                  "description": {
                    "description": "Logger description.",
                    "type": "string"
                  },
                  "isBuffered": {
                    "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Logger type.",
                    "enum": [
                      "AzureEventHub"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "LoggerTypeContract"
                    }
                  }
                },
                "required": [
                  "type",
                  "credentials"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/LoggerCreateParameters"
            },
            {
              "oldValue": {
                "description": "The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.",
                "properties": {
                  "credentials": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The name and SendRule connection string of the event hub.",
                    "example": {
                      "connectionString": "Endpoint=sb://contoso-ns.servicebus.windows.net/;SharedAccessKeyName=Sender;SharedAccessKey=...",
                      "name": "apim"
                    },
                    "type": "object"
                  },
                  "description": {
                    "description": "Logger description.",
                    "maxLength": 256,
                    "type": "string"
                  },
                  "id": {
                    "description": "Uniquely identifies the logger within the current API Management service instance. The value is a valid relative URL in the format of /loggers/{loggerId} where {loggerId} is a logger identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "isBuffered": {
                    "default": true,
                    "description": "Whether records are buffered in the logger before publishing. Default is assumed to be true.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Logger type.",
                    "enum": [
                      "AzureEventHub"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "LoggerTypeContract"
                    }
                  }
                },
                "required": [
                  "type",
                  "credentials"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/LoggerResponse"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update Logger operation.",
                "properties": {
                  "credentials": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Logger credentials.",
                    "type": "object"
                  },
                  "description": {
                    "description": "Logger description.",
                    "type": "string"
                  },
                  "isBuffered": {
                    "description": "whether records are buffered in the logger before publishing. Default is assumed to be true.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Logger type.",
                    "enum": [
                      "AzureEventHub"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "LoggerTypeContract"
                    }
                  }
                },
                "required": [
                  "type"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/LoggerUpdateParameters"
            },
            {
              "oldValue": {
                "description": "API OAuth2 Authentication settings details.",
                "properties": {
                  "authorizationServerId": {
                    "description": "OAuth authorization server identifier.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "operations scope.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OAuth2AuthenticationSettingsContract"
            },
            {
              "oldValue": {
                "description": "External OAuth authorization server settings.",
                "example": {
                  "authorizationEndpoint": "https://login.microsoftonline.com/55abb68a-8ews-4565-8675-927722a8a005/oauth2/authorize?api-version=1.0",
                  "authorizationMethods": [
                    "GET"
                  ],
                  "bearerTokenSendingMethods": [
                    "authorizationHeader"
                  ],
                  "clientAuthenticationMethod": [
                    "Body"
                  ],
                  "clientId": "demo",
                  "clientRegistrationEndpoint": "https://contoso.com/",
                  "clientSecret": "demo",
                  "defaultScope": null,
                  "description": null,
                  "grantTypes": [
                    "authorizationCode"
                  ],
                  "id": "/authorizationServers/554be23d0fce600674232c33",
                  "name": "AAD OAuth A/S",
                  "resourceOwnerPassword": null,
                  "resourceOwnerUsername": null,
                  "supportState": false,
                  "tokenBodyParameters": [],
                  "tokenEndpoint": "https://login.microsoftonline.com/55abb68a-8ews-4565-8675-927722a8a005/oauth2/token?api-version=1.0"
                },
                "properties": {
                  "authorizationEndpoint": {
                    "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.",
                    "type": "string"
                  },
                  "authorizationMethods": {
                    "description": "HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.",
                    "items": {
                      "enum": [
                        "HEAD",
                        "OPTIONS",
                        "TRACE",
                        "GET",
                        "POST",
                        "PUT",
                        "PATCH",
                        "DELETE"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MethodContract"
                      }
                    },
                    "type": "array"
                  },
                  "bearerTokenSendingMethods": {
                    "description": "Specifies the mechanism by which access token is passed to the API. ",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-4"
                    },
                    "items": {
                      "enum": [
                        "authorizationHeader",
                        "query"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "BearerTokenSendingMethodsContract"
                      }
                    },
                    "type": "array"
                  },
                  "clientAuthenticationMethod": {
                    "description": "Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.",
                    "items": {
                      "enum": [
                        "Basic",
                        "Body"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ClientAuthenticationMethodContract"
                      }
                    },
                    "type": "array"
                  },
                  "clientId": {
                    "description": "Client or app id registered with this authorization server.",
                    "type": "string"
                  },
                  "clientRegistrationEndpoint": {
                    "description": "Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client or app secret registered with this authorization server.",
                    "type": "string"
                  },
                  "defaultScope": {
                    "description": "Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.3"
                    },
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the authorization server. Can contain HTML formatting tags.",
                    "type": "string"
                  },
                  "grantTypes": {
                    "description": "Form of an authorization grant, which the client uses to request the access token.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-4"
                    },
                    "items": {
                      "enum": [
                        "authorizationCode",
                        "implicit",
                        "resourceOwnerPassword",
                        "clientCredentials"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "GrantTypesContract"
                      }
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Uniquely identifies the authorization server within the current API Management service instance. The value is a valid relative URL in the format of /authorizationServers/{authsid} where {authsid} is an authorization server identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "User-friendly authorization server name.",
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string"
                  },
                  "resourceOwnerPassword": {
                    "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.",
                    "type": "string"
                  },
                  "resourceOwnerUsername": {
                    "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.",
                    "type": "string"
                  },
                  "supportState": {
                    "description": "If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                    },
                    "type": "boolean"
                  },
                  "tokenBodyParameters": {
                    "description": "Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.",
                    "items": {
                      "description": "OAuth acquire token request body parameter (www-url-form-encoded).",
                      "properties": {
                        "name": {
                          "description": "body parameter name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "body parameter value.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    },
                    "type": "array"
                  },
                  "tokenEndpoint": {
                    "description": "OAuth token endpoint. Contains absolute URI to entity being referenced.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                    },
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "clientRegistrationEndpoint",
                  "authorizationEndpoint",
                  "clientId",
                  "grantTypes"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OAuth2AuthorizationServerContract"
            },
            {
              "oldValue": {
                "description": "External OAuth authorization server Update settings contract.",
                "properties": {
                  "authorizationEndpoint": {
                    "description": "OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.",
                    "type": "string"
                  },
                  "authorizationMethods": {
                    "description": "HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.",
                    "items": {
                      "enum": [
                        "HEAD",
                        "OPTIONS",
                        "TRACE",
                        "GET",
                        "POST",
                        "PUT",
                        "PATCH",
                        "DELETE"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MethodContract"
                      }
                    },
                    "type": "array"
                  },
                  "bearerTokenSendingMethods": {
                    "description": "Specifies the mechanism by which access token is passed to the API. ",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-4"
                    },
                    "items": {
                      "enum": [
                        "authorizationHeader",
                        "query"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "BearerTokenSendingMethodsContract"
                      }
                    },
                    "type": "array"
                  },
                  "clientAuthenticationMethod": {
                    "description": "Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.",
                    "items": {
                      "enum": [
                        "Basic",
                        "Body"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ClientAuthenticationMethodContract"
                      }
                    },
                    "type": "array"
                  },
                  "clientId": {
                    "description": "Client or app id registered with this authorization server.",
                    "type": "string"
                  },
                  "clientRegistrationEndpoint": {
                    "description": "Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client or app secret registered with this authorization server.",
                    "type": "string"
                  },
                  "defaultScope": {
                    "description": "Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.3"
                    },
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the authorization server. Can contain HTML formatting tags.",
                    "type": "string"
                  },
                  "grantTypes": {
                    "description": "Form of an authorization grant, which the client uses to request the access token.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-4"
                    },
                    "items": {
                      "enum": [
                        "authorizationCode",
                        "implicit",
                        "resourceOwnerPassword",
                        "clientCredentials"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "GrantTypesContract"
                      }
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "User-friendly authorization server name.",
                    "maxLength": 50,
                    "minLength": 1,
                    "type": "string"
                  },
                  "resourceOwnerPassword": {
                    "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.",
                    "type": "string"
                  },
                  "resourceOwnerUsername": {
                    "description": "Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.",
                    "type": "string"
                  },
                  "supportState": {
                    "description": "If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                    },
                    "type": "boolean"
                  },
                  "tokenBodyParameters": {
                    "description": "Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.",
                    "items": {
                      "description": "OAuth acquire token request body parameter (www-url-form-encoded).",
                      "properties": {
                        "name": {
                          "description": "body parameter name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "body parameter value.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    },
                    "type": "array"
                  },
                  "tokenEndpoint": {
                    "description": "OAuth token endpoint. Contains absolute URI to entity being referenced.",
                    "externalDocs": {
                      "url": "http://tools.ietf.org/html/rfc6749#section-3.1"
                    },
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OAuth2AuthorizationServerUpdateContract"
            },
            {
              "oldValue": {
                "description": "Paged OpenIdProviders list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "OpenID Connect Providers Contract.",
                      "properties": {
                        "clientId": {
                          "description": "Client ID of developer console which is the client application.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "description": "Client Secret of developer console which is the client application.",
                          "type": "string"
                        },
                        "description": {
                          "description": "User-friendly description of OpenID Connect Provider.",
                          "type": "string"
                        },
                        "id": {
                          "description": "OpenID Connect Provider identifier.",
                          "type": "string"
                        },
                        "metadataEndpoint": {
                          "description": "Metadata endpoint URI.",
                          "type": "string"
                        },
                        "name": {
                          "description": "User-friendly OpenID Connect Provider name.",
                          "maxLength": 50,
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "metadataEndpoint",
                        "clientId"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OpenIdConnectProviderCollection"
            },
            {
              "oldValue": {
                "description": "OpenID Connect Providers Contract.",
                "properties": {
                  "clientId": {
                    "description": "Client ID of developer console which is the client application.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client Secret of developer console which is the client application.",
                    "type": "string"
                  },
                  "description": {
                    "description": "User-friendly description of OpenID Connect Provider.",
                    "type": "string"
                  },
                  "id": {
                    "description": "OpenID Connect Provider identifier.",
                    "type": "string"
                  },
                  "metadataEndpoint": {
                    "description": "Metadata endpoint URI.",
                    "type": "string"
                  },
                  "name": {
                    "description": "User-friendly OpenID Connect Provider name.",
                    "maxLength": 50,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "metadataEndpoint",
                  "clientId"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OpenidConnectProviderContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create OpenID Connect Provider operation.",
                "properties": {
                  "clientId": {
                    "description": "Client ID of developer console which is the client application.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client Secret of developer console which is the client application.",
                    "type": "string"
                  },
                  "description": {
                    "description": "User-friendly description of OpenID Connect Provider.",
                    "type": "string"
                  },
                  "metadataEndpoint": {
                    "description": "Metadata endpoint URI.",
                    "type": "string"
                  },
                  "name": {
                    "description": "User-friendly OpenID Connect Provider name.",
                    "maxLength": 50,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "metadataEndpoint",
                  "clientId"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OpenidConnectProviderCreateContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update OpenID Connect Provider operation.",
                "properties": {
                  "clientId": {
                    "description": "Client ID of developer console which is the client application.",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "Client Secret of developer console which is the client application.",
                    "type": "string"
                  },
                  "description": {
                    "description": "User-friendly description of OpenID Connect Provider.",
                    "type": "string"
                  },
                  "metadataEndpoint": {
                    "description": "Metadata endpoint URI.",
                    "type": "string"
                  },
                  "name": {
                    "description": "User-friendly OpenID Connect Provider name.",
                    "maxLength": 50,
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OpenidConnectProviderUpdateContract"
            },
            {
              "oldValue": {
                "description": "Paged Operation list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Api Operation details.",
                      "properties": {
                        "description": {
                          "description": "Description of the operation. May include HTML formatting tags.",
                          "maxLength": 1000,
                          "type": "string"
                        },
                        "id": {
                          "description": "Uniquely identifies the operation within the current API Management service instance. The value is a valid relative URL in the format of /apis/{aid}/operations/{id} where {aid} is an API identifier and {id} is an operation identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "method": {
                          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
                          "externalDocs": {
                            "description": "As defined by RFC.",
                            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
                          },
                          "type": "string"
                        },
                        "name": {
                          "description": "Operation Name.",
                          "maxLength": 300,
                          "minLength": 1,
                          "type": "string"
                        },
                        "request": {
                          "description": "Operation request details.",
                          "properties": {
                            "description": {
                              "description": "Operation request description.",
                              "type": "string"
                            },
                            "headers": {
                              "description": "Collection of operation request headers.",
                              "items": {
                                "description": "Operation parameters details.",
                                "properties": {
                                  "defaultValue": {
                                    "description": "Default parameter value.",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Parameter description.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Parameter name.",
                                    "type": "string"
                                  },
                                  "required": {
                                    "description": "whether parameter is required or not.",
                                    "type": "boolean"
                                  },
                                  "type": {
                                    "description": "Parameter type.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "Parameter values.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "name",
                                  "type"
                                ]
                              },
                              "type": "array"
                            },
                            "queryParameters": {
                              "description": "Collection of operation request query parameters.",
                              "items": {
                                "description": "Operation parameters details.",
                                "properties": {
                                  "defaultValue": {
                                    "description": "Default parameter value.",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Parameter description.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Parameter name.",
                                    "type": "string"
                                  },
                                  "required": {
                                    "description": "whether parameter is required or not.",
                                    "type": "boolean"
                                  },
                                  "type": {
                                    "description": "Parameter type.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "Parameter values.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "name",
                                  "type"
                                ]
                              },
                              "type": "array"
                            },
                            "representations": {
                              "description": "Collection of operation request representations.",
                              "items": {
                                "description": "Operation request/response representation details.",
                                "properties": {
                                  "contentType": {
                                    "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                                    "type": "string"
                                  },
                                  "sample": {
                                    "description": "An example of the representation.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "contentType"
                                ]
                              },
                              "type": "array"
                            }
                          }
                        },
                        "responses": {
                          "description": "Array of Operation responses.",
                          "items": {
                            "description": "Operation response details.",
                            "properties": {
                              "description": {
                                "description": "Operation response description.",
                                "type": "string"
                              },
                              "representations": {
                                "description": "Collection of operation response representations.",
                                "items": {
                                  "description": "Operation request/response representation details.",
                                  "properties": {
                                    "contentType": {
                                      "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                                      "type": "string"
                                    },
                                    "sample": {
                                      "description": "An example of the representation.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "contentType"
                                  ]
                                },
                                "type": "array"
                              },
                              "statusCode": {
                                "description": "Operation response HTTP status code.",
                                "format": "int32",
                                "maximum": 599,
                                "minimum": 100,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "statusCode"
                            ]
                          },
                          "type": "array"
                        },
                        "templateParameters": {
                          "description": "Collection of URL template parameters.",
                          "items": {
                            "description": "Operation parameters details.",
                            "properties": {
                              "defaultValue": {
                                "description": "Default parameter value.",
                                "type": "string"
                              },
                              "description": {
                                "description": "Parameter description.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Parameter name.",
                                "type": "string"
                              },
                              "required": {
                                "description": "whether parameter is required or not.",
                                "type": "boolean"
                              },
                              "type": {
                                "description": "Parameter type.",
                                "type": "string"
                              },
                              "values": {
                                "description": "Parameter values.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "name",
                              "type"
                            ]
                          },
                          "type": "array"
                        },
                        "urlTemplate": {
                          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
                          "maxLength": 1000,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "method",
                        "urlTemplate"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OperationCollection"
            },
            {
              "oldValue": {
                "description": "Api Operation details.",
                "properties": {
                  "description": {
                    "description": "Description of the operation. May include HTML formatting tags.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "id": {
                    "description": "Uniquely identifies the operation within the current API Management service instance. The value is a valid relative URL in the format of /apis/{aid}/operations/{id} where {aid} is an API identifier and {id} is an operation identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "method": {
                    "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
                    "externalDocs": {
                      "description": "As defined by RFC.",
                      "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
                    },
                    "type": "string"
                  },
                  "name": {
                    "description": "Operation Name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "request": {
                    "description": "Operation request details.",
                    "properties": {
                      "description": {
                        "description": "Operation request description.",
                        "type": "string"
                      },
                      "headers": {
                        "description": "Collection of operation request headers.",
                        "items": {
                          "description": "Operation parameters details.",
                          "properties": {
                            "defaultValue": {
                              "description": "Default parameter value.",
                              "type": "string"
                            },
                            "description": {
                              "description": "Parameter description.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Parameter name.",
                              "type": "string"
                            },
                            "required": {
                              "description": "whether parameter is required or not.",
                              "type": "boolean"
                            },
                            "type": {
                              "description": "Parameter type.",
                              "type": "string"
                            },
                            "values": {
                              "description": "Parameter values.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ]
                        },
                        "type": "array"
                      },
                      "queryParameters": {
                        "description": "Collection of operation request query parameters.",
                        "items": {
                          "description": "Operation parameters details.",
                          "properties": {
                            "defaultValue": {
                              "description": "Default parameter value.",
                              "type": "string"
                            },
                            "description": {
                              "description": "Parameter description.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Parameter name.",
                              "type": "string"
                            },
                            "required": {
                              "description": "whether parameter is required or not.",
                              "type": "boolean"
                            },
                            "type": {
                              "description": "Parameter type.",
                              "type": "string"
                            },
                            "values": {
                              "description": "Parameter values.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ]
                        },
                        "type": "array"
                      },
                      "representations": {
                        "description": "Collection of operation request representations.",
                        "items": {
                          "description": "Operation request/response representation details.",
                          "properties": {
                            "contentType": {
                              "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                              "type": "string"
                            },
                            "sample": {
                              "description": "An example of the representation.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "contentType"
                          ]
                        },
                        "type": "array"
                      }
                    }
                  },
                  "responses": {
                    "description": "Array of Operation responses.",
                    "items": {
                      "description": "Operation response details.",
                      "properties": {
                        "description": {
                          "description": "Operation response description.",
                          "type": "string"
                        },
                        "representations": {
                          "description": "Collection of operation response representations.",
                          "items": {
                            "description": "Operation request/response representation details.",
                            "properties": {
                              "contentType": {
                                "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                                "type": "string"
                              },
                              "sample": {
                                "description": "An example of the representation.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "contentType"
                            ]
                          },
                          "type": "array"
                        },
                        "statusCode": {
                          "description": "Operation response HTTP status code.",
                          "format": "int32",
                          "maximum": 599,
                          "minimum": 100,
                          "type": "integer"
                        }
                      },
                      "required": [
                        "statusCode"
                      ]
                    },
                    "type": "array"
                  },
                  "templateParameters": {
                    "description": "Collection of URL template parameters.",
                    "items": {
                      "description": "Operation parameters details.",
                      "properties": {
                        "defaultValue": {
                          "description": "Default parameter value.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Parameter description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "required": {
                          "description": "whether parameter is required or not.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "Parameter type.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Parameter values.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ]
                    },
                    "type": "array"
                  },
                  "urlTemplate": {
                    "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "method",
                  "urlTemplate"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OperationContract"
            },
            {
              "oldValue": {
                "description": "Operation Result.",
                "properties": {
                  "error": {
                    "description": "Error Body contract.",
                    "properties": {
                      "code": {
                        "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.",
                        "type": "string"
                      },
                      "details": {
                        "description": "The list of invalid fields send in request, in case of validation error.",
                        "items": {
                          "description": "Error Field contract.",
                          "properties": {
                            "code": {
                              "description": "Property level error code.",
                              "type": "string"
                            },
                            "message": {
                              "description": "Human-readable representation of property-level error.",
                              "type": "string"
                            },
                            "target": {
                              "description": "Property name.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "message": {
                        "description": "Human-readable representation of the error.",
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "description": "Operation result identifier.",
                    "type": "string"
                  },
                  "resultInfo": {
                    "description": "Optional result info.",
                    "type": "string"
                  },
                  "started": {
                    "description": "Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of an async operation.",
                    "enum": [
                      "Started",
                      "InProgress",
                      "Succeeded",
                      "Failed"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "AsyncOperationState"
                    }
                  },
                  "updated": {
                    "description": "Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OperationResultContract"
            },
            {
              "oldValue": {
                "description": "Operation parameters details.",
                "properties": {
                  "defaultValue": {
                    "description": "Default parameter value.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Parameter description.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "required": {
                    "description": "whether parameter is required or not.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Parameter type.",
                    "type": "string"
                  },
                  "values": {
                    "description": "Parameter values.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ParameterContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Patch operations.",
                "properties": {
                  "RawJson": {
                    "description": "json value.",
                    "type": "object"
                  }
                },
                "required": [
                  "RawJson"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PatchParameters"
            },
            {
              "oldValue": null,
              "value": {
                "description": "The response of the list policy snippets operation.",
                "properties": {
                  "value": {
                    "description": "Policy snippet value.",
                    "items": {
                      "description": "Policy snippet.",
                      "properties": {
                        "content": {
                          "description": "Snippet content.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Snippet name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "scope": {
                          "description": "Snippet scope.",
                          "enum": [
                            "Tenant",
                            "Product",
                            "Api",
                            "Operation",
                            "All"
                          ],
                          "readOnly": true,
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "PolicyScopeContract"
                          }
                        },
                        "toolTip": {
                          "description": "Snippet toolTip.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "op": "add",
              "from": "",
              "path": "/PolicySnippetsCollection"
            },
            {
              "oldValue": {
                "description": "Paged Products list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Product profile.",
                      "properties": {
                        "approvalRequired": {
                          "description": "whether subscription approval is required. If\u00a0false, new subscriptions will be approved automatically enabling developers to call the product\u2019s APIs immediately after subscribing. If\u00a0true, administrators must manually approve the subscription before the developer can any of the product\u2019s APIs. Can be present only if subscriptionRequired property is present and has a value of true.",
                          "type": "boolean"
                        },
                        "description": {
                          "description": "Product description. May include HTML formatting tags.",
                          "maxLength": 1000,
                          "minLength": 1,
                          "type": "string"
                        },
                        "id": {
                          "description": "Uniquely identifies the product within the current API Management service instance. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Product name.",
                          "maxLength": 300,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "default": "NotPublished",
                          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.",
                          "enum": [
                            "NotPublished",
                            "Published"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "ProductStateContract"
                          }
                        },
                        "subscriptionRequired": {
                          "default": true,
                          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
                          "type": "boolean"
                        },
                        "subscriptionsLimit": {
                          "description": "Whether the number of subscriptions a user can have to this product at the same time. Set to\u00a0null\u00a0or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "terms": {
                          "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ProductCollection"
            },
            {
              "oldValue": {
                "description": "Product profile.",
                "properties": {
                  "approvalRequired": {
                    "description": "whether subscription approval is required. If\u00a0false, new subscriptions will be approved automatically enabling developers to call the product\u2019s APIs immediately after subscribing. If\u00a0true, administrators must manually approve the subscription before the developer can any of the product\u2019s APIs. Can be present only if subscriptionRequired property is present and has a value of true.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Product description. May include HTML formatting tags.",
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                  },
                  "id": {
                    "description": "Uniquely identifies the product within the current API Management service instance. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Product name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "default": "NotPublished",
                    "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.",
                    "enum": [
                      "NotPublished",
                      "Published"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "ProductStateContract"
                    }
                  },
                  "subscriptionRequired": {
                    "default": true,
                    "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
                    "type": "boolean"
                  },
                  "subscriptionsLimit": {
                    "description": "Whether the number of subscriptions a user can have to this product at the same time. Set to\u00a0null\u00a0or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "terms": {
                    "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ProductContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the CreateOrUpdate Product operation.",
                "properties": {
                  "approvalRequired": {
                    "description": "whether subscription approval is required. If\u00a0false, new subscriptions will be approved automatically enabling developers to call the product\u2019s APIs immediately after subscribing. If\u00a0true, administrators must manually approve the subscription before the developer can any of the product\u2019s APIs. Can be present only if subscriptionRequired property is present and has a value of true.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Product description.",
                    "maxLength": 500,
                    "minLength": 1,
                    "type": "string"
                  },
                  "name": {
                    "description": "Product name.",
                    "maxLength": 300,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
                    "enum": [
                      "NotPublished",
                      "Published"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "ProductStateContract"
                    }
                  },
                  "subscriptionRequired": {
                    "description": "whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
                    "type": "boolean"
                  },
                  "subscriptionsLimit": {
                    "description": "whether the number of subscriptions a user can have to this product at the same time. Set to\u00a0null\u00a0or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "terms": {
                    "description": "Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ProductUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Paged Property list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Property details.",
                      "properties": {
                        "id": {
                          "description": "Uniquely identifies the property within the current API Management service instance. The value is a valid relative URL in the format of /properties/{propId} where {propId} is a property identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
                          "maxLength": 256,
                          "minLength": 1,
                          "pattern": "^[A-Z0-9-._]+$",
                          "type": "string"
                        },
                        "secret": {
                          "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
                          "type": "boolean"
                        },
                        "tags": {
                          "description": "Optional tags that when provided can be used to filter the property list.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 32,
                          "type": "array"
                        },
                        "value": {
                          "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
                          "maxLength": 4096,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PropertyCollection"
            },
            {
              "oldValue": {
                "description": "Property details.",
                "properties": {
                  "id": {
                    "description": "Uniquely identifies the property within the current API Management service instance. The value is a valid relative URL in the format of /properties/{propId} where {propId} is a property identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
                    "maxLength": 256,
                    "minLength": 1,
                    "pattern": "^[A-Z0-9-._]+$",
                    "type": "string"
                  },
                  "secret": {
                    "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
                    "type": "boolean"
                  },
                  "tags": {
                    "description": "Optional tags that when provided can be used to filter the property list.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 32,
                    "type": "array"
                  },
                  "value": {
                    "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
                    "maxLength": 4096,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PropertyContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create Property operation.",
                "properties": {
                  "name": {
                    "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
                    "maxLength": 256,
                    "minLength": 1,
                    "pattern": "^[A-Z0-9-._]+$",
                    "type": "string"
                  },
                  "secret": {
                    "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
                    "type": "boolean"
                  },
                  "tags": {
                    "description": "Optional tags that when provided can be used to filter the property list.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 32,
                    "type": "array"
                  },
                  "value": {
                    "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
                    "maxLength": 4096,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PropertyCreateParameters"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update Property operation.",
                "properties": {
                  "name": {
                    "description": "Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.",
                    "maxLength": 256,
                    "minLength": 1,
                    "pattern": "^[A-Z0-9-._]+$",
                    "type": "string"
                  },
                  "secret": {
                    "description": "Determines whether the value is a secret and should be encrypted or not. Default value is false.",
                    "type": "boolean"
                  },
                  "tags": {
                    "description": "Optional tags that when provided can be used to filter the property list.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 32,
                    "type": "array"
                  },
                  "value": {
                    "description": "Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.",
                    "maxLength": 4096,
                    "minLength": 1,
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/PropertyUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Paged Quota Counter list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Quota counter values.",
                    "items": {
                      "allOf": [
                        {
                          "description": "Quota counter value details.",
                          "properties": {
                            "callsCount": {
                              "description": "Number of times Counter was called.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "kbTransferred": {
                              "description": "Data Transferred in KiloBytes.",
                              "format": "double",
                              "type": "number"
                            }
                          }
                        }
                      ],
                      "description": "Quota counter details.",
                      "properties": {
                        "counterKey": {
                          "description": "The Key value of the Counter. Must not be empty.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "periodEndTime": {
                          "description": "The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "periodKey": {
                          "description": "Identifier of the Period for which the counter was collected. Must not be empty.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "periodStartTime": {
                          "description": "The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "counterKey",
                        "periodKey",
                        "periodStartTime",
                        "periodEndTime"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/QuotaCounterCollection"
            },
            {
              "oldValue": {
                "allOf": [
                  {
                    "description": "Quota counter value details.",
                    "properties": {
                      "callsCount": {
                        "description": "Number of times Counter was called.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "kbTransferred": {
                        "description": "Data Transferred in KiloBytes.",
                        "format": "double",
                        "type": "number"
                      }
                    }
                  }
                ],
                "description": "Quota counter details.",
                "properties": {
                  "counterKey": {
                    "description": "The Key value of the Counter. Must not be empty.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "periodEndTime": {
                    "description": "The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "periodKey": {
                    "description": "Identifier of the Period for which the counter was collected. Must not be empty.",
                    "minLength": 1,
                    "type": "string"
                  },
                  "periodStartTime": {
                    "description": "The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "counterKey",
                  "periodKey",
                  "periodStartTime",
                  "periodEndTime"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/QuotaCounterContract"
            },
            {
              "oldValue": {
                "description": "Quota counter value details.",
                "properties": {
                  "callsCount": {
                    "description": "Number of times Counter was called.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "kbTransferred": {
                    "description": "Data Transferred in KiloBytes.",
                    "format": "double",
                    "type": "number"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/QuotaCounterValueContract"
            },
            {
              "oldValue": {
                "description": "Paged Report records list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Report data.",
                      "properties": {
                        "apiId": {
                          "description": "API identifier path. /apis/{apiId}",
                          "type": "string"
                        },
                        "apiRegion": {
                          "description": "API region identifier.",
                          "type": "string"
                        },
                        "apiTimeAvg": {
                          "description": "Average time it took to process request.",
                          "format": "double",
                          "type": "number"
                        },
                        "apiTimeMax": {
                          "description": "Maximum time it took to process request.",
                          "format": "double",
                          "type": "number"
                        },
                        "apiTimeMin": {
                          "description": "Minimum time it took to process request.",
                          "format": "double",
                          "type": "number"
                        },
                        "bandwidth": {
                          "description": "Bandwidth consumed.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "cacheHitCount": {
                          "description": "Number of times when content was served from cache policy.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "cacheMissCount": {
                          "description": "Number of times content was fetched from backend.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "callCountBlocked": {
                          "description": "Number of calls blocked due to invalid credentials.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "callCountFailed": {
                          "description": "Number of calls failed due to proxy or backend errors.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "callCountOther": {
                          "description": "Number of other calls.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "callCountSuccess": {
                          "description": "Number of successful calls.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "callCountTotal": {
                          "description": "Total number of calls.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "country": {
                          "description": "Country to which this record data is related.",
                          "type": "string"
                        },
                        "interval": {
                          "description": "Length of aggregation period.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name depending on report endpoint specifies product, API, operation or developer name.",
                          "type": "string"
                        },
                        "operationId": {
                          "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                          "type": "string"
                        },
                        "productId": {
                          "description": "Product identifier path. /products/{productId}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "region": {
                          "description": "Country region to which this record data is related.",
                          "type": "string"
                        },
                        "serviceTimeAvg": {
                          "description": "Average time it took to process request on backend.",
                          "format": "double",
                          "type": "number"
                        },
                        "serviceTimeMax": {
                          "description": "Maximum time it took to process request on backend.",
                          "format": "double",
                          "type": "number"
                        },
                        "serviceTimeMin": {
                          "description": "Minimum time it took to process request on backend.",
                          "format": "double",
                          "type": "number"
                        },
                        "subscriptionId": {
                          "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "userId": {
                          "description": "User identifier path. /users/{userId}",
                          "readOnly": true,
                          "type": "string"
                        },
                        "zip": {
                          "description": "Zip code to which this record data is related.",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ReportCollection"
            },
            {
              "oldValue": {
                "description": "Report data.",
                "properties": {
                  "apiId": {
                    "description": "API identifier path. /apis/{apiId}",
                    "type": "string"
                  },
                  "apiRegion": {
                    "description": "API region identifier.",
                    "type": "string"
                  },
                  "apiTimeAvg": {
                    "description": "Average time it took to process request.",
                    "format": "double",
                    "type": "number"
                  },
                  "apiTimeMax": {
                    "description": "Maximum time it took to process request.",
                    "format": "double",
                    "type": "number"
                  },
                  "apiTimeMin": {
                    "description": "Minimum time it took to process request.",
                    "format": "double",
                    "type": "number"
                  },
                  "bandwidth": {
                    "description": "Bandwidth consumed.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "cacheHitCount": {
                    "description": "Number of times when content was served from cache policy.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "cacheMissCount": {
                    "description": "Number of times content was fetched from backend.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "callCountBlocked": {
                    "description": "Number of calls blocked due to invalid credentials.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "callCountFailed": {
                    "description": "Number of calls failed due to proxy or backend errors.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "callCountOther": {
                    "description": "Number of other calls.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "callCountSuccess": {
                    "description": "Number of successful calls.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "callCountTotal": {
                    "description": "Total number of calls.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "country": {
                    "description": "Country to which this record data is related.",
                    "type": "string"
                  },
                  "interval": {
                    "description": "Length of aggregation period.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name depending on report endpoint specifies product, API, operation or developer name.",
                    "type": "string"
                  },
                  "operationId": {
                    "description": "Operation identifier path. /apis/{apiId}/operations/{operationId}",
                    "type": "string"
                  },
                  "productId": {
                    "description": "Product identifier path. /products/{productId}",
                    "readOnly": true,
                    "type": "string"
                  },
                  "region": {
                    "description": "Country region to which this record data is related.",
                    "type": "string"
                  },
                  "serviceTimeAvg": {
                    "description": "Average time it took to process request on backend.",
                    "format": "double",
                    "type": "number"
                  },
                  "serviceTimeMax": {
                    "description": "Maximum time it took to process request on backend.",
                    "format": "double",
                    "type": "number"
                  },
                  "serviceTimeMin": {
                    "description": "Minimum time it took to process request on backend.",
                    "format": "double",
                    "type": "number"
                  },
                  "subscriptionId": {
                    "description": "Subscription identifier path. /subscriptions/{subscriptionId}",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "userId": {
                    "description": "User identifier path. /users/{userId}",
                    "readOnly": true,
                    "type": "string"
                  },
                  "zip": {
                    "description": "Zip code to which this record data is related.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ReportRecordContract"
            },
            {
              "oldValue": {
                "description": "Operation request/response representation details.",
                "properties": {
                  "contentType": {
                    "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                    "type": "string"
                  },
                  "sample": {
                    "description": "An example of the representation.",
                    "type": "string"
                  }
                },
                "required": [
                  "contentType"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/RepresentationContract"
            },
            {
              "oldValue": {
                "description": "Operation request details.",
                "properties": {
                  "description": {
                    "description": "Operation request description.",
                    "type": "string"
                  },
                  "headers": {
                    "description": "Collection of operation request headers.",
                    "items": {
                      "description": "Operation parameters details.",
                      "properties": {
                        "defaultValue": {
                          "description": "Default parameter value.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Parameter description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "required": {
                          "description": "whether parameter is required or not.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "Parameter type.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Parameter values.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ]
                    },
                    "type": "array"
                  },
                  "queryParameters": {
                    "description": "Collection of operation request query parameters.",
                    "items": {
                      "description": "Operation parameters details.",
                      "properties": {
                        "defaultValue": {
                          "description": "Default parameter value.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Parameter description.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Parameter name.",
                          "type": "string"
                        },
                        "required": {
                          "description": "whether parameter is required or not.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "Parameter type.",
                          "type": "string"
                        },
                        "values": {
                          "description": "Parameter values.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ]
                    },
                    "type": "array"
                  },
                  "representations": {
                    "description": "Collection of operation request representations.",
                    "items": {
                      "description": "Operation request/response representation details.",
                      "properties": {
                        "contentType": {
                          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                          "type": "string"
                        },
                        "sample": {
                          "description": "An example of the representation.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "contentType"
                      ]
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/RequestContract"
            },
            {
              "oldValue": {
                "description": "Operation response details.",
                "properties": {
                  "description": {
                    "description": "Operation response description.",
                    "type": "string"
                  },
                  "representations": {
                    "description": "Collection of operation response representations.",
                    "items": {
                      "description": "Operation request/response representation details.",
                      "properties": {
                        "contentType": {
                          "description": "Specifies a registered or custom content type for this representation, e.g. application/xml.",
                          "type": "string"
                        },
                        "sample": {
                          "description": "An example of the representation.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "contentType"
                      ]
                    },
                    "type": "array"
                  },
                  "statusCode": {
                    "description": "Operation response HTTP status code.",
                    "format": "int32",
                    "maximum": 599,
                    "minimum": 100,
                    "type": "integer"
                  }
                },
                "required": [
                  "statusCode"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ResultContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Save Tenant Configuration operation.",
                "properties": {
                  "branch": {
                    "description": "The name of the Git branch in which to commit the current configuration snapshot.",
                    "type": "string"
                  },
                  "force": {
                    "description": "The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "branch"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SaveConfigurationParameter"
            },
            {
              "oldValue": {
                "description": "Paged Subscriptions list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "Subscription details.",
                      "properties": {
                        "createdDate": {
                          "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "endDate": {
                          "description": "Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "expirationDate": {
                          "description": "Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "id": {
                          "description": "Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the subscription, or null if the subscription has no name.",
                          "maxLength": 100,
                          "minLength": 0,
                          "type": "string"
                        },
                        "notificationDate": {
                          "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "primaryKey": {
                          "description": "Subscription primary key.",
                          "maxLength": 256,
                          "minLength": 1,
                          "type": "string"
                        },
                        "productId": {
                          "description": "The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.",
                          "type": "string"
                        },
                        "secondaryKey": {
                          "description": "Subscription secondary key.",
                          "maxLength": 256,
                          "minLength": 1,
                          "type": "string"
                        },
                        "startDate": {
                          "description": "Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "state": {
                          "description": "Subscription state. Possible states are * active \u2013 the subscription is active, * suspended \u2013 the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted \u2013 the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected \u2013 the subscription request has been denied by an administrator, * cancelled \u2013 the subscription has been cancelled by the developer or administrator, * expired \u2013 the subscription reached its expiration date and was deactivated.",
                          "enum": [
                            "Suspended",
                            "Active",
                            "Expired",
                            "Submitted",
                            "Rejected",
                            "Cancelled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SubscriptionStateContract"
                          }
                        },
                        "stateComment": {
                          "description": "Optional subscription comment added by an administrator.",
                          "type": "string"
                        },
                        "userId": {
                          "description": "The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SubscriptionCollection"
            },
            {
              "oldValue": {
                "description": "Subscription details.",
                "properties": {
                  "createdDate": {
                    "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "endDate": {
                    "description": "Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "expirationDate": {
                    "description": "Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "id": {
                    "description": "Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the subscription, or null if the subscription has no name.",
                    "maxLength": 100,
                    "minLength": 0,
                    "type": "string"
                  },
                  "notificationDate": {
                    "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "primaryKey": {
                    "description": "Subscription primary key.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "productId": {
                    "description": "The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.",
                    "type": "string"
                  },
                  "secondaryKey": {
                    "description": "Subscription secondary key.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "startDate": {
                    "description": "Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "state": {
                    "description": "Subscription state. Possible states are * active \u2013 the subscription is active, * suspended \u2013 the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted \u2013 the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected \u2013 the subscription request has been denied by an administrator, * cancelled \u2013 the subscription has been cancelled by the developer or administrator, * expired \u2013 the subscription reached its expiration date and was deactivated.",
                    "enum": [
                      "Suspended",
                      "Active",
                      "Expired",
                      "Submitted",
                      "Rejected",
                      "Cancelled"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "SubscriptionStateContract"
                    }
                  },
                  "stateComment": {
                    "description": "Optional subscription comment added by an administrator.",
                    "type": "string"
                  },
                  "userId": {
                    "description": "The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SubscriptionContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create subscription operation.",
                "properties": {
                  "name": {
                    "description": "Subscription name.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "primaryKey": {
                    "description": "Primary subscription key. If not specified during request key will be generated automatically.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "productId": {
                    "description": "Product (product id path) for which subscription is being created in form /products/{productId}",
                    "type": "string"
                  },
                  "secondaryKey": {
                    "description": "Secondary subscription key. If not specified during request key will be generated automatically.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active \u2013 the subscription is active, * suspended \u2013 the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted \u2013 the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected \u2013 the subscription request has been denied by an administrator, * cancelled \u2013 the subscription has been cancelled by the developer or administrator, * expired \u2013 the subscription reached its expiration date and was deactivated.",
                    "enum": [
                      "Suspended",
                      "Active",
                      "Expired",
                      "Submitted",
                      "Rejected",
                      "Cancelled"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "SubscriptionStateContract"
                    }
                  },
                  "userId": {
                    "description": "User (user id path) for whom subscription is being created in form /users/{uid}",
                    "type": "string"
                  }
                },
                "required": [
                  "userId",
                  "productId",
                  "name"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SubscriptionCreateParameters"
            },
            {
              "oldValue": {
                "description": "Subscription key parameter names details.",
                "example": {
                  "subscriptionKeyParameterNames": {
                    "header": "customHeaderParameterName",
                    "query": "customQueryParameterName"
                  }
                },
                "properties": {
                  "header": {
                    "description": "Subscription key header name.",
                    "type": "string"
                  },
                  "query": {
                    "description": "Subscription key query string parameter name.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SubscriptionKeyParameterNamesContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update subscription operation.",
                "properties": {
                  "expirationDate": {
                    "description": "New subscription expiration date.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Subscription name.",
                    "type": "string"
                  },
                  "primaryKey": {
                    "description": "Primary subscription key.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "productId": {
                    "description": "Product identifier path: /products/{productId}",
                    "type": "string"
                  },
                  "secondaryKey": {
                    "description": "Secondary subscription key.",
                    "maxLength": 256,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "Subscription state. Possible states are * active \u2013 the subscription is active, * suspended \u2013 the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted \u2013 the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected \u2013 the subscription request has been denied by an administrator, * cancelled \u2013 the subscription has been cancelled by the developer or administrator, * expired \u2013 the subscription reached its expiration date and was deactivated.",
                    "enum": [
                      "Suspended",
                      "Active",
                      "Expired",
                      "Submitted",
                      "Rejected",
                      "Cancelled"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "SubscriptionStateContract"
                    }
                  },
                  "stateComment": {
                    "description": "Comments describing subscription state change by the administrator.",
                    "type": "string"
                  },
                  "userId": {
                    "description": "User identifier path: /users/{uid}",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/SubscriptionUpdateParameters"
            },
            {
              "oldValue": {
                "description": "Tenant Configuration Synchronization State.",
                "properties": {
                  "branch": {
                    "description": "The name of Git branch.",
                    "type": "string"
                  },
                  "commitId": {
                    "description": "The latest commit Id.",
                    "type": "string"
                  },
                  "configurationChangeDate": {
                    "description": "The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "isExport": {
                    "description": "value indicating if last sync was save (true) or deploy (false) operation.",
                    "type": "boolean"
                  },
                  "isGitEnabled": {
                    "description": "value indicating whether Git configuration access is enabled.",
                    "type": "boolean"
                  },
                  "isSynced": {
                    "description": "value indicating if last synchronization was later than the configuration change.",
                    "type": "boolean"
                  },
                  "syncDate": {
                    "description": "The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/TenantConfigurationSyncStateContract"
            },
            {
              "oldValue": {
                "description": "A standard service response for long running tenant operations.",
                "properties": {
                  "operationStatusLink": {
                    "description": "operation status link.",
                    "type": "string"
                  },
                  "requestId": {
                    "type": "string"
                  },
                  "retryAfter": {
                    "description": "The number of minutes to retry the operation after.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "status": {
                    "description": "Current status of the operation.",
                    "enum": [
                      "InProgress",
                      "Succeeded",
                      "Failed"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "OperationStatus"
                    }
                  },
                  "statusCode": {
                    "enum": [
                      "Continue",
                      "OK",
                      "Created",
                      "Accepted",
                      "NotFound",
                      "Conflict"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "HttpStatusCode"
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/TenantLongRunningOperationResult"
            },
            {
              "oldValue": {
                "description": "OAuth acquire token request body parameter (www-url-form-encoded).",
                "properties": {
                  "name": {
                    "description": "body parameter name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "body parameter value.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/TokenBodyParameterContract"
            },
            {
              "oldValue": {
                "description": "Paged Users list representation.",
                "properties": {
                  "count": {
                    "description": "Total records count number.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "nextLink": {
                    "description": "Next page link if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Page values.",
                    "items": {
                      "description": "User profile.",
                      "properties": {
                        "email": {
                          "description": "Email address.",
                          "type": "string"
                        },
                        "firstName": {
                          "description": "First name.",
                          "type": "string"
                        },
                        "id": {
                          "description": "User identifier path.",
                          "type": "string"
                        },
                        "identities": {
                          "description": "Collection of user identities.",
                          "items": {
                            "description": "User identity details.",
                            "properties": {
                              "id": {
                                "description": "Identifier value within provider.",
                                "type": "string"
                              },
                              "provider": {
                                "description": "Identity provider name.",
                                "type": "string"
                              }
                            }
                          },
                          "readOnly": true,
                          "type": "array"
                        },
                        "lastName": {
                          "description": "Last name.",
                          "type": "string"
                        },
                        "note": {
                          "description": "Administrator's note about given user.",
                          "type": "string"
                        },
                        "registrationDate": {
                          "description": "Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "state": {
                          "description": "User state.",
                          "enum": [
                            "Active",
                            "Blocked"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "UserStateContract"
                          }
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserCollection"
            },
            {
              "oldValue": {
                "description": "User profile.",
                "properties": {
                  "email": {
                    "description": "Email address.",
                    "type": "string"
                  },
                  "firstName": {
                    "description": "First name.",
                    "type": "string"
                  },
                  "id": {
                    "description": "User identifier path.",
                    "type": "string"
                  },
                  "identities": {
                    "description": "Collection of user identities.",
                    "items": {
                      "description": "User identity details.",
                      "properties": {
                        "id": {
                          "description": "Identifier value within provider.",
                          "type": "string"
                        },
                        "provider": {
                          "description": "Identity provider name.",
                          "type": "string"
                        }
                      }
                    },
                    "readOnly": true,
                    "type": "array"
                  },
                  "lastName": {
                    "description": "Last name.",
                    "type": "string"
                  },
                  "note": {
                    "description": "Administrator's note about given user.",
                    "type": "string"
                  },
                  "registrationDate": {
                    "description": "Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "state": {
                    "description": "User state.",
                    "enum": [
                      "Active",
                      "Blocked"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "UserStateContract"
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Create User operation.",
                "properties": {
                  "email": {
                    "description": "Email address. Must not be empty and must be unique within the service instance.",
                    "maxLength": 254,
                    "minLength": 1,
                    "type": "string"
                  },
                  "firstName": {
                    "description": "First name.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "lastName": {
                    "description": "Last name.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "note": {
                    "description": "Optional note about a user set by the administrator.",
                    "type": "string"
                  },
                  "password": {
                    "description": "User Password.",
                    "type": "string"
                  },
                  "state": {
                    "default": "Active",
                    "description": "Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.",
                    "enum": [
                      "Active",
                      "Blocked"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "UserStateContract"
                    }
                  }
                },
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName"
                ]
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserCreateParameters"
            },
            {
              "oldValue": {
                "description": "User identity details.",
                "properties": {
                  "id": {
                    "description": "Identifier value within provider.",
                    "type": "string"
                  },
                  "provider": {
                    "description": "Identity provider name.",
                    "type": "string"
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserIdentityContract"
            },
            {
              "oldValue": {
                "description": "Parameters supplied to the Update User operation.",
                "properties": {
                  "email": {
                    "description": "Email address.",
                    "type": "string"
                  },
                  "firstName": {
                    "description": "First name.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "lastName": {
                    "description": "Last name.",
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string"
                  },
                  "note": {
                    "description": "Note about user.",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password.",
                    "type": "string"
                  },
                  "state": {
                    "description": "Account state.",
                    "enum": [
                      "Active",
                      "Blocked"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "UserStateContract"
                    }
                  }
                }
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserUpdateParameters"
            }
          ],
          "parameters": [
            {
              "oldValue": {
                "description": "API identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "apiId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ApiIdParameter"
            },
            {
              "oldValue": {
                "description": "User identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 255,
                "minLength": 1,
                "name": "backendid",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/BackendIdParameter"
            },
            {
              "oldValue": {
                "description": "Group identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "groupId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/GroupIdParameter"
            },
            {
              "oldValue": {
                "description": "Identity Provider Type identifier.",
                "enum": [
                  "facebook",
                  "google",
                  "microsoft",
                  "twitter",
                  "aad"
                ],
                "in": "path",
                "name": "identityProviderName",
                "required": true,
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": true,
                  "name": "IdentityProviderNameType"
                },
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/IdentityProviderNameParameter"
            },
            {
              "oldValue": {
                "description": "Operation identifier within an API. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "operationId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/OperationIdParameter"
            },
            {
              "oldValue": {
                "description": "Product identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "productId",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/ProductIdParameter"
            },
            {
              "oldValue": {
                "description": "Quota counter key identifier.",
                "in": "path",
                "name": "quotaCounterKey",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/QuotaCounterKeyParameter"
            },
            {
              "oldValue": {
                "description": "Quota period key identifier.",
                "in": "path",
                "name": "quotaPeriodKey",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/QuotaPeriodKeyParameter"
            },
            {
              "oldValue": {
                "description": "User identifier. Must be unique in the current API Management service instance.",
                "in": "path",
                "maxLength": 256,
                "minLength": 1,
                "name": "uid",
                "pattern": "^[^*#&+:<>?]+$",
                "required": true,
                "type": "string",
                "x-ms-parameter-location": "method"
              },
              "value": null,
              "op": "remove",
              "from": "",
              "path": "/UserIdParameter"
            }
          ]
        }
      },
      "info": {
        "version": {
          "from": "2016-07-07",
          "to": "2016-10-10"
        }
      },
      "paths": {
        "deleted": [
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regenerateSecondaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git/regeneratePrimaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regeneratePrimaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders/{identityProviderName}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/validate",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/save",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/identityProviders",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/groups",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/openidConnectProviders/{opid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/regenerateSecondaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/access/git",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/subscriptions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/properties/{propId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates/{certificateId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/certificates",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/syncState",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/loggers/{loggerid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/identities",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}/{quotaPeriodKey}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/groups/{groupId}/users/{uid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationServers/{authsid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/configuration/deploy",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/quotas/{quotaCounterKey}",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/subscriptions",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{uid}/generateSsoUrl",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users",
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/{aggregation}"
        ],
        "modified": {
          "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/policySnippets": {
            "operations": {
              "modified": {
                "GET": {
                  "responses": {
                    "modified": {
                      "200": {
                        "extensions": {
                          "modified": {
                            "schema": [
                              {
                                "oldValue": null,
                                "value": "The response of the list policy snippets operation.",
                                "op": "add",
                                "from": "",
                                "path": "/description"
                              },
                              {
                                "oldValue": {
                                  "description": "Policy snippet.",
                                  "properties": {
                                    "content": {
                                      "description": "Snippet content.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Snippet name.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "scope": {
                                      "description": "Snippet scope.",
                                      "enum": [
                                        "Tenant",
                                        "Product",
                                        "Api",
                                        "Operation",
                                        "All"
                                      ],
                                      "readOnly": true,
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "PolicyScopeContract"
                                      }
                                    },
                                    "toolTip": {
                                      "description": "Snippet toolTip.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  }
                                },
                                "value": null,
                                "op": "remove",
                                "from": "",
                                "path": "/items"
                              },
                              {
                                "oldValue": null,
                                "value": {
                                  "value": {
                                    "description": "Policy snippet value.",
                                    "items": {
                                      "description": "Policy snippet.",
                                      "properties": {
                                        "content": {
                                          "description": "Snippet content.",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Snippet name.",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "scope": {
                                          "description": "Snippet scope.",
                                          "enum": [
                                            "Tenant",
                                            "Product",
                                            "Api",
                                            "Operation",
                                            "All"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "PolicyScopeContract"
                                          }
                                        },
                                        "toolTip": {
                                          "description": "Snippet toolTip.",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "type": "array"
                                  }
                                },
                                "op": "add",
                                "from": "",
                                "path": "/properties"
                              },
                              {
                                "oldValue": "array",
                                "value": null,
                                "op": "remove",
                                "from": "",
                                "path": "/type"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "function_name": "PolicySnippets_ListByService",
            "line_range": [
              2178,
              2225
            ]
          }
        }
      }
    },
    "stub_ast_a": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "flask",
          "names": [
            {
              "type": "alias",
              "name": "Flask",
              "asname": null
            },
            {
              "type": "alias",
              "name": "request",
              "asname": null
            },
            {
              "type": "alias",
              "name": "redirect",
              "asname": null
            },
            {
              "type": "alias",
              "name": "session",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "secrets",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "hashlib",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "base64",
              "asname": "b64"
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Name",
              "id": "app",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "Flask",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Name",
                "id": "__name__",
                "ctx": {
                  "type": "Load"
                }
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Assign",
          "targets": [
            {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "app",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "secret_key",
              "ctx": {
                "type": "Store"
              }
            }
          ],
          "value": {
            "type": "Call",
            "func": {
              "type": "Attribute",
              "value": {
                "type": "Name",
                "id": "os",
                "ctx": {
                  "type": "Load"
                }
              },
              "attr": "getenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "OAUTH2_SECRET_KEY",
                "kind": null
              },
              {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "secrets",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "token_hex",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": 16,
                    "kind": null
                  }
                ],
                "keywords": []
              }
            ],
            "keywords": []
          },
          "type_comment": null
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[OAUTH LOGIN SERVER] Flask OAuth2 login server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "app",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "debug",
                    "value": {
                      "type": "Constant",
                      "value": true,
                      "kind": null
                    }
                  },
                  {
                    "type": "keyword",
                    "arg": "port",
                    "value": {
                      "type": "Constant",
                      "value": 8888,
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  },
  "output": {
    "stub_ast_b": {
      "type": "Module",
      "body": [
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "os",
              "asname": null
            }
          ]
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "json",
              "asname": null
            }
          ]
        },
        {
          "type": "ImportFrom",
          "module": "typing",
          "names": [
            {
              "type": "alias",
              "name": "Optional",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Union",
              "asname": null
            },
            {
              "type": "alias",
              "name": "Any",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "ImportFrom",
          "module": "dotenv",
          "names": [
            {
              "type": "alias",
              "name": "load_dotenv",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "load_dotenv",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [],
            "keywords": []
          }
        },
        {
          "type": "ImportFrom",
          "module": "fastmcp",
          "names": [
            {
              "type": "alias",
              "name": "FastMCP",
              "asname": null
            }
          ],
          "level": 0
        },
        {
          "type": "Import",
          "names": [
            {
              "type": "alias",
              "name": "requests",
              "asname": null
            }
          ]
        },
        {
          "type": "Expr",
          "value": {
            "type": "Call",
            "func": {
              "type": "Name",
              "id": "print",
              "ctx": {
                "type": "Load"
              }
            },
            "args": [
              {
                "type": "Constant",
                "value": "[MCP SERVER] FastMCP server running.",
                "kind": null
              }
            ],
            "keywords": []
          }
        },
        {
          "type": "If",
          "test": {
            "type": "Compare",
            "left": {
              "type": "Name",
              "id": "__name__",
              "ctx": {
                "type": "Load"
              }
            },
            "ops": [
              {
                "type": "Eq"
              }
            ],
            "comparators": [
              {
                "type": "Constant",
                "value": "__main__",
                "kind": null
              }
            ]
          },
          "body": [
            {
              "type": "Assign",
              "targets": [
                {
                  "type": "Name",
                  "id": "mcp",
                  "ctx": {
                    "type": "Store"
                  }
                }
              ],
              "value": {
                "type": "Call",
                "func": {
                  "type": "Name",
                  "id": "FastMCP",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [
                  {
                    "type": "Constant",
                    "value": "my-server",
                    "kind": null
                  }
                ],
                "keywords": []
              },
              "type_comment": null
            },
            {
              "type": "FunctionDef",
              "name": "PolicySnippets_ListByService",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "serviceName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "scope",
                    "annotation": {
                      "type": "Subscript",
                      "value": {
                        "type": "Name",
                        "id": "Optional",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "slice": {
                        "type": "Name",
                        "id": "str",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "api_version",
                    "annotation": {
                      "type": "Subscript",
                      "value": {
                        "type": "Name",
                        "id": "Optional",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "slice": {
                        "type": "Name",
                        "id": "str",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": [
                  {
                    "type": "Constant",
                    "value": null,
                    "kind": null
                  },
                  {
                    "type": "Constant",
                    "value": null,
                    "kind": null
                  }
                ]
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "Lists all policy snippets.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.ApiManagement/service/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "serviceName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/policySnippets",
                        "kind": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "serviceName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: serviceName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "scope",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "IsNot"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Subscript",
                          "value": {
                            "type": "Name",
                            "id": "params",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "slice": {
                            "type": "Constant",
                            "value": "scope",
                            "kind": null
                          },
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Name",
                        "id": "scope",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "type_comment": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "api_version",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "IsNot"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Subscript",
                          "value": {
                            "type": "Name",
                            "id": "params",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "slice": {
                            "type": "Constant",
                            "value": "api-version",
                            "kind": null
                          },
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Name",
                        "id": "api_version",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "type_comment": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "get",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "PolicySnippets_ListByService",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "Lists all policy snippets.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "FunctionDef",
              "name": "Regions_ListByService",
              "args": {
                "type": "arguments",
                "posonlyargs": [],
                "args": [
                  {
                    "type": "arg",
                    "arg": "resourceGroupName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "subscriptionId",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "serviceName",
                    "annotation": {
                      "type": "Name",
                      "id": "str",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  },
                  {
                    "type": "arg",
                    "arg": "api_version",
                    "annotation": {
                      "type": "Subscript",
                      "value": {
                        "type": "Name",
                        "id": "Optional",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "slice": {
                        "type": "Name",
                        "id": "str",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "type_comment": null
                  }
                ],
                "vararg": null,
                "kwonlyargs": [],
                "kw_defaults": [],
                "kwarg": null,
                "defaults": [
                  {
                    "type": "Constant",
                    "value": null,
                    "kind": null
                  }
                ]
              },
              "body": [
                {
                  "type": "Expr",
                  "value": {
                    "type": "Constant",
                    "value": "Lists all azure regions in which the service exists.",
                    "kind": null
                  }
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "base_url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": "https://management.azure.com",
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "url",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "JoinedStr",
                    "values": [
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "base_url",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/subscriptions/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "subscriptionId",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/resourceGroups/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "resourceGroupName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/providers/Microsoft.ApiManagement/service/",
                        "kind": null
                      },
                      {
                        "type": "FormattedValue",
                        "value": {
                          "type": "Name",
                          "id": "serviceName",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "conversion": -1,
                        "format_spec": null
                      },
                      {
                        "type": "Constant",
                        "value": "/regions",
                        "kind": null
                      }
                    ]
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "params",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "cookies",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Dict",
                    "keys": [],
                    "values": []
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "extra_headers",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Call",
                    "func": {
                      "type": "Attribute",
                      "value": {
                        "type": "Name",
                        "id": "os",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "attr": "getenv",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "args": [
                      {
                        "type": "Constant",
                        "value": "EXTRA_HEADERS",
                        "kind": null
                      }
                    ],
                    "keywords": []
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Name",
                    "id": "extra_headers",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "For",
                          "target": {
                            "type": "Tuple",
                            "elts": [
                              {
                                "type": "Name",
                                "id": "k",
                                "ctx": {
                                  "type": "Store"
                                }
                              },
                              {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Store"
                                }
                              }
                            ],
                            "ctx": {
                              "type": "Store"
                            }
                          },
                          "iter": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "json",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "loads",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Name",
                                    "id": "extra_headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              },
                              "attr": "items",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          },
                          "body": [
                            {
                              "type": "Assign",
                              "targets": [
                                {
                                  "type": "Subscript",
                                  "value": {
                                    "type": "Name",
                                    "id": "headers",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "slice": {
                                    "type": "Name",
                                    "id": "k",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "ctx": {
                                    "type": "Store"
                                  }
                                }
                              ],
                              "value": {
                                "type": "Name",
                                "id": "v",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "type_comment": null
                            }
                          ],
                          "orelse": [],
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "print",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Failed to parse EXTRA_HEADERS:",
                                    "kind": null
                                  },
                                  {
                                    "type": "Name",
                                    "id": "e",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "Constant",
                    "value": false,
                    "kind": null
                  },
                  "type_comment": null
                },
                {
                  "type": "Assign",
                  "targets": [
                    {
                      "type": "Name",
                      "id": "auth_error_msgs",
                      "ctx": {
                        "type": "Store"
                      }
                    }
                  ],
                  "value": {
                    "type": "List",
                    "elts": [],
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "type_comment": null
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Try",
                      "body": [
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "os",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "getenv",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          },
                          "type_comment": null
                        },
                        {
                          "type": "If",
                          "test": {
                            "type": "UnaryOp",
                            "op": {
                              "type": "Not"
                            },
                            "operand": {
                              "type": "Name",
                              "id": "access_token",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          "body": [
                            {
                              "type": "Raise",
                              "exc": {
                                "type": "Call",
                                "func": {
                                  "type": "Name",
                                  "id": "ValueError",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Constant",
                                    "value": "Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN",
                                    "kind": null
                                  }
                                ],
                                "keywords": []
                              },
                              "cause": null
                            }
                          ],
                          "orelse": []
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Subscript",
                              "value": {
                                "type": "Name",
                                "id": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "slice": {
                                "type": "Constant",
                                "value": "Authorization",
                                "kind": null
                              },
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "JoinedStr",
                            "values": [
                              {
                                "type": "Constant",
                                "value": "Bearer ",
                                "kind": null
                              },
                              {
                                "type": "FormattedValue",
                                "value": {
                                  "type": "Name",
                                  "id": "access_token",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "conversion": -1,
                                "format_spec": null
                              }
                            ]
                          },
                          "type_comment": null
                        },
                        {
                          "type": "Assign",
                          "targets": [
                            {
                              "type": "Name",
                              "id": "auth_satisfied",
                              "ctx": {
                                "type": "Store"
                              }
                            }
                          ],
                          "value": {
                            "type": "Constant",
                            "value": true,
                            "kind": null
                          },
                          "type_comment": null
                        }
                      ],
                      "handlers": [
                        {
                          "type": {
                            "type": "Name",
                            "id": "Exception",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "name": "e",
                          "body": [
                            {
                              "type": "Expr",
                              "value": {
                                "type": "Call",
                                "func": {
                                  "type": "Attribute",
                                  "value": {
                                    "type": "Name",
                                    "id": "auth_error_msgs",
                                    "ctx": {
                                      "type": "Load"
                                    }
                                  },
                                  "attr": "append",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "args": [
                                  {
                                    "type": "Call",
                                    "func": {
                                      "type": "Name",
                                      "id": "str",
                                      "ctx": {
                                        "type": "Load"
                                      }
                                    },
                                    "args": [
                                      {
                                        "type": "Name",
                                        "id": "e",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      }
                                    ],
                                    "keywords": []
                                  }
                                ],
                                "keywords": []
                              }
                            }
                          ]
                        }
                      ],
                      "orelse": [],
                      "finalbody": []
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "UnaryOp",
                    "op": {
                      "type": "Not"
                    },
                    "operand": {
                      "type": "Name",
                      "id": "auth_satisfied",
                      "ctx": {
                        "type": "Load"
                      }
                    }
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "BinOp",
                            "left": {
                              "type": "Constant",
                              "value": "No valid authentication found. Details: ",
                              "kind": null
                            },
                            "op": {
                              "type": "Add"
                            },
                            "right": {
                              "type": "Call",
                              "func": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Constant",
                                  "value": "; ",
                                  "kind": null
                                },
                                "attr": "join",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "args": [
                                {
                                  "type": "Name",
                                  "id": "auth_error_msgs",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                }
                              ],
                              "keywords": []
                            }
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "resourceGroupName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: resourceGroupName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "subscriptionId",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: subscriptionId",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "serviceName",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "Is"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Raise",
                      "exc": {
                        "type": "Call",
                        "func": {
                          "type": "Name",
                          "id": "ValueError",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Constant",
                            "value": "Missing required path parameter: serviceName",
                            "kind": null
                          }
                        ],
                        "keywords": []
                      },
                      "cause": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "If",
                  "test": {
                    "type": "Compare",
                    "left": {
                      "type": "Name",
                      "id": "api_version",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "ops": [
                      {
                        "type": "IsNot"
                      }
                    ],
                    "comparators": [
                      {
                        "type": "Constant",
                        "value": null,
                        "kind": null
                      }
                    ]
                  },
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Subscript",
                          "value": {
                            "type": "Name",
                            "id": "params",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "slice": {
                            "type": "Constant",
                            "value": "api-version",
                            "kind": null
                          },
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Name",
                        "id": "api_version",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "type_comment": null
                    }
                  ],
                  "orelse": []
                },
                {
                  "type": "Try",
                  "body": [
                    {
                      "type": "Assign",
                      "targets": [
                        {
                          "type": "Name",
                          "id": "resp",
                          "ctx": {
                            "type": "Store"
                          }
                        }
                      ],
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "get",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [
                          {
                            "type": "Name",
                            "id": "url",
                            "ctx": {
                              "type": "Load"
                            }
                          }
                        ],
                        "keywords": [
                          {
                            "type": "keyword",
                            "arg": "params",
                            "value": {
                              "type": "Name",
                              "id": "params",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "headers",
                            "value": {
                              "type": "Name",
                              "id": "headers",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          },
                          {
                            "type": "keyword",
                            "arg": "cookies",
                            "value": {
                              "type": "Name",
                              "id": "cookies",
                              "ctx": {
                                "type": "Load"
                              }
                            }
                          }
                        ]
                      },
                      "type_comment": null
                    },
                    {
                      "type": "Expr",
                      "value": {
                        "type": "Call",
                        "func": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "resp",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "raise_for_status",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "args": [],
                        "keywords": []
                      }
                    },
                    {
                      "type": "If",
                      "test": {
                        "type": "Compare",
                        "left": {
                          "type": "Constant",
                          "value": "application/json",
                          "kind": null
                        },
                        "ops": [
                          {
                            "type": "In"
                          }
                        ],
                        "comparators": [
                          {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "headers",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "get",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "Constant",
                                "value": "Content-Type",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "",
                                "kind": null
                              }
                            ],
                            "keywords": []
                          }
                        ]
                      },
                      "body": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Call",
                            "func": {
                              "type": "Attribute",
                              "value": {
                                "type": "Name",
                                "id": "resp",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              "attr": "json",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [],
                            "keywords": []
                          }
                        }
                      ],
                      "orelse": [
                        {
                          "type": "Return",
                          "value": {
                            "type": "Dict",
                            "keys": [
                              {
                                "type": "Constant",
                                "value": "raw",
                                "kind": null
                              },
                              {
                                "type": "Constant",
                                "value": "status_code",
                                "kind": null
                              }
                            ],
                            "values": [
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "text",
                                "ctx": {
                                  "type": "Load"
                                }
                              },
                              {
                                "type": "Attribute",
                                "value": {
                                  "type": "Name",
                                  "id": "resp",
                                  "ctx": {
                                    "type": "Load"
                                  }
                                },
                                "attr": "status_code",
                                "ctx": {
                                  "type": "Load"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "handlers": [
                    {
                      "type": {
                        "type": "Attribute",
                        "value": {
                          "type": "Attribute",
                          "value": {
                            "type": "Name",
                            "id": "requests",
                            "ctx": {
                              "type": "Load"
                            }
                          },
                          "attr": "exceptions",
                          "ctx": {
                            "type": "Load"
                          }
                        },
                        "attr": "RequestException",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "HTTP request failed: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    },
                    {
                      "type": {
                        "type": "Name",
                        "id": "Exception",
                        "ctx": {
                          "type": "Load"
                        }
                      },
                      "name": "e",
                      "body": [
                        {
                          "type": "Raise",
                          "exc": {
                            "type": "Call",
                            "func": {
                              "type": "Name",
                              "id": "ValueError",
                              "ctx": {
                                "type": "Load"
                              }
                            },
                            "args": [
                              {
                                "type": "JoinedStr",
                                "values": [
                                  {
                                    "type": "Constant",
                                    "value": "Unexpected error: ",
                                    "kind": null
                                  },
                                  {
                                    "type": "FormattedValue",
                                    "value": {
                                      "type": "Call",
                                      "func": {
                                        "type": "Name",
                                        "id": "str",
                                        "ctx": {
                                          "type": "Load"
                                        }
                                      },
                                      "args": [
                                        {
                                          "type": "Name",
                                          "id": "e",
                                          "ctx": {
                                            "type": "Load"
                                          }
                                        }
                                      ],
                                      "keywords": []
                                    },
                                    "conversion": -1,
                                    "format_spec": null
                                  }
                                ]
                              }
                            ],
                            "keywords": []
                          },
                          "cause": null
                        }
                      ]
                    }
                  ],
                  "orelse": [],
                  "finalbody": []
                }
              ],
              "decorator_list": [
                {
                  "type": "Call",
                  "func": {
                    "type": "Attribute",
                    "value": {
                      "type": "Name",
                      "id": "mcp",
                      "ctx": {
                        "type": "Load"
                      }
                    },
                    "attr": "tool",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "args": [],
                  "keywords": [
                    {
                      "type": "keyword",
                      "arg": "name",
                      "value": {
                        "type": "Constant",
                        "value": "Regions_ListByService",
                        "kind": null
                      }
                    },
                    {
                      "type": "keyword",
                      "arg": "description",
                      "value": {
                        "type": "Constant",
                        "value": "Lists all azure regions in which the service exists.",
                        "kind": null
                      }
                    }
                  ]
                }
              ],
              "returns": null,
              "type_comment": null,
              "type_params": []
            },
            {
              "type": "Expr",
              "value": {
                "type": "Call",
                "func": {
                  "type": "Attribute",
                  "value": {
                    "type": "Name",
                    "id": "mcp",
                    "ctx": {
                      "type": "Load"
                    }
                  },
                  "attr": "run",
                  "ctx": {
                    "type": "Load"
                  }
                },
                "args": [],
                "keywords": [
                  {
                    "type": "keyword",
                    "arg": "transport",
                    "value": {
                      "type": "Constant",
                      "value": "stdio",
                      "kind": null
                    }
                  }
                ]
              }
            }
          ],
          "orelse": []
        }
      ],
      "type_ignores": []
    }
  }
}