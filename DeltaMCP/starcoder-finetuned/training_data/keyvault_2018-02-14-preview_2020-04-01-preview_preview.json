{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "Purge protection status of the original vault.",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVault/properties/properties/properties/purgeProtectionEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Purge protection status of the original vault.",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVaultListResult/properties/value/items/properties/properties/properties/purgeProtectionEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Purge protection status of the original vault.",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/DeletedVaultProperties/properties/purgeProtectionEnabled"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The type of identity.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "identityType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/IdentityType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/NetworkRuleSet/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Private endpoint object properties.",
              "properties": {
                "id": {
                  "description": "Full identifier of the private endpoint resource.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Key Vault resource",
                  "properties": {
                    "id": {
                      "description": "Fully qualified identifier of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Azure location of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Tags assigned to the key vault resource.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "Private endpoint connection resource.",
              "properties": {
                "etag": {
                  "description": "Modified whenever there is a change in the state of private endpoint connection.",
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of the private endpoint connection resource.",
                  "properties": {
                    "privateEndpoint": {
                      "description": "Private endpoint object properties.",
                      "properties": {
                        "id": {
                          "description": "Full identifier of the private endpoint resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "privateLinkServiceConnectionState": {
                      "description": "An object that represents the approval state of the private link connection.",
                      "properties": {
                        "actionsRequired": {
                          "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                          "enum": [
                            "None"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ActionsRequired"
                          }
                        },
                        "description": {
                          "description": "The reason for approval or rejection.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The private endpoint connection status.",
                          "enum": [
                            "Pending",
                            "Approved",
                            "Rejected",
                            "Disconnected"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "PrivateEndpointServiceConnectionStatus"
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The current provisioning state.",
                      "enum": [
                        "Succeeded",
                        "Creating",
                        "Updating",
                        "Deleting",
                        "Failed",
                        "Disconnected"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PrivateEndpointConnectionProvisioningState"
                      }
                    }
                  }
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointConnection"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Private endpoint connection item.",
              "properties": {
                "etag": {
                  "description": "Modified whenever there is a change in the state of private endpoint connection.",
                  "type": "string"
                },
                "id": {
                  "description": "Id of private endpoint connection.",
                  "type": "string"
                },
                "properties": {
                  "description": "Properties of the private endpoint connection resource.",
                  "properties": {
                    "privateEndpoint": {
                      "description": "Private endpoint object properties.",
                      "properties": {
                        "id": {
                          "description": "Full identifier of the private endpoint resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "privateLinkServiceConnectionState": {
                      "description": "An object that represents the approval state of the private link connection.",
                      "properties": {
                        "actionsRequired": {
                          "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                          "enum": [
                            "None"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ActionsRequired"
                          }
                        },
                        "description": {
                          "description": "The reason for approval or rejection.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The private endpoint connection status.",
                          "enum": [
                            "Pending",
                            "Approved",
                            "Rejected",
                            "Disconnected"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "PrivateEndpointServiceConnectionStatus"
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The current provisioning state.",
                      "enum": [
                        "Succeeded",
                        "Creating",
                        "Updating",
                        "Deleting",
                        "Failed",
                        "Disconnected"
                      ],
                      "readOnly": true,
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PrivateEndpointConnectionProvisioningState"
                      }
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointConnectionItem"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of the private endpoint connection resource.",
              "properties": {
                "privateEndpoint": {
                  "description": "Private endpoint object properties.",
                  "properties": {
                    "id": {
                      "description": "Full identifier of the private endpoint resource.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "privateLinkServiceConnectionState": {
                  "description": "An object that represents the approval state of the private link connection.",
                  "properties": {
                    "actionsRequired": {
                      "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                      "enum": [
                        "None"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ActionsRequired"
                      }
                    },
                    "description": {
                      "description": "The reason for approval or rejection.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The private endpoint connection status.",
                      "enum": [
                        "Pending",
                        "Approved",
                        "Rejected",
                        "Disconnected"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "PrivateEndpointServiceConnectionStatus"
                      }
                    }
                  }
                },
                "provisioningState": {
                  "description": "The current provisioning state.",
                  "enum": [
                    "Succeeded",
                    "Creating",
                    "Updating",
                    "Deleting",
                    "Failed",
                    "Disconnected"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PrivateEndpointConnectionProvisioningState"
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointConnectionProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The current provisioning state.",
              "enum": [
                "Succeeded",
                "Creating",
                "Updating",
                "Deleting",
                "Failed",
                "Disconnected"
              ],
              "readOnly": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "PrivateEndpointConnectionProvisioningState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointConnectionProvisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The private endpoint connection status.",
              "enum": [
                "Pending",
                "Approved",
                "Rejected",
                "Disconnected"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "PrivateEndpointServiceConnectionStatus"
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointServiceConnectionStatus"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "Key Vault resource",
                  "properties": {
                    "id": {
                      "description": "Fully qualified identifier of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Azure location of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Tags assigned to the key vault resource.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type of the key vault resource.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A private link resource",
              "properties": {
                "properties": {
                  "description": "Properties of a private link resource.",
                  "properties": {
                    "groupId": {
                      "description": "Group identifier of private link resource.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "requiredMembers": {
                      "description": "Required member names of private link resource.",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "requiredZoneNames": {
                      "description": "Required DNS zone names of the the private link resource.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateLinkResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A list of private link resources",
              "properties": {
                "value": {
                  "description": "Array of private link resources",
                  "items": {
                    "allOf": [
                      {
                        "description": "Key Vault resource",
                        "properties": {
                          "id": {
                            "description": "Fully qualified identifier of the key vault resource.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Azure location of the key vault resource.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the key vault resource.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Tags assigned to the key vault resource.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type of the key vault resource.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "A private link resource",
                    "properties": {
                      "properties": {
                        "description": "Properties of a private link resource.",
                        "properties": {
                          "groupId": {
                            "description": "Group identifier of private link resource.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "requiredMembers": {
                            "description": "Required member names of private link resource.",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "requiredZoneNames": {
                            "description": "Required DNS zone names of the the private link resource.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateLinkResourceListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties of a private link resource.",
              "properties": {
                "groupId": {
                  "description": "Group identifier of private link resource.",
                  "readOnly": true,
                  "type": "string"
                },
                "requiredMembers": {
                  "description": "Required member names of private link resource.",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "requiredZoneNames": {
                  "description": "Required DNS zone names of the the private link resource.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateLinkResourceProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An object that represents the approval state of the private link connection.",
              "properties": {
                "actionsRequired": {
                  "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                  "enum": [
                    "None"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ActionsRequired"
                  }
                },
                "description": {
                  "description": "The reason for approval or rejection.",
                  "type": "string"
                },
                "status": {
                  "description": "The private endpoint connection status.",
                  "enum": [
                    "Pending",
                    "Approved",
                    "Rejected",
                    "Disconnected"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PrivateEndpointServiceConnectionStatus"
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PrivateLinkServiceConnectionState"
          },
          {
            "oldValue": "The Azure Resource Manager resource ID for the key vault.",
            "value": "Fully qualified identifier of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/Resource/properties/id/description"
          },
          {
            "oldValue": "The supported Azure location where the key vault should be created.",
            "value": "Azure location of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/Resource/properties/location/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Resource/properties/location/readOnly"
          },
          {
            "oldValue": "The name of the key vault.",
            "value": "Name of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/Resource/properties/name/description"
          },
          {
            "oldValue": "The tags that will be assigned to the key vault. ",
            "value": "Tags assigned to the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/Resource/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Resource/properties/tags/readOnly"
          },
          {
            "oldValue": "The resource type of the key vault.",
            "value": "Resource type of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/Resource/properties/type/description"
          },
          {
            "oldValue": [
              "location"
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Resource/required"
          },
          {
            "oldValue": "The Azure Resource Manager resource ID for the key vault.",
            "value": "Fully qualified identifier of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/id/description"
          },
          {
            "oldValue": "The supported Azure location where the key vault should be created.",
            "value": "Azure location of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/location/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/location/readOnly"
          },
          {
            "oldValue": "The name of the key vault.",
            "value": "Name of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/name/description"
          },
          {
            "oldValue": "The tags that will be assigned to the key vault. ",
            "value": "Tags assigned to the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/tags/description"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/tags/readOnly"
          },
          {
            "oldValue": "The resource type of the key vault.",
            "value": "Resource type of the key vault resource.",
            "op": "replace",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/properties/type/description"
          },
          {
            "oldValue": [
              "location"
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceListResult/properties/value/items/required"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata pertaining to creation and last modification of key vault resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of key vault resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created key vault resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of key vault resource last modification (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified key vault resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SystemData"
          },
          {
            "oldValue": [
              {
                "description": "Key Vault resource",
                "properties": {
                  "id": {
                    "description": "The Azure Resource Manager resource ID for the key vault.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "location": {
                    "description": "The supported Azure location where the key vault should be created.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the key vault.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The tags that will be assigned to the key vault. ",
                    "type": "object"
                  },
                  "type": {
                    "description": "The resource type of the key vault.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "required": [
                  "location"
                ],
                "x-ms-azure-resource": true
              }
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Vault/allOf"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Fully qualified identifier of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/id"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure location of the key vault resource.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/location"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/name"
          },
          {
            "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/enableSoftDelete/default"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/Vault/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of private endpoint connections associated with the key vault.",
              "items": {
                "description": "Private endpoint connection item.",
                "properties": {
                  "etag": {
                    "description": "Modified whenever there is a change in the state of private endpoint connection.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of private endpoint connection.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "Properties of the private endpoint connection resource.",
                    "properties": {
                      "privateEndpoint": {
                        "description": "Private endpoint object properties.",
                        "properties": {
                          "id": {
                            "description": "Full identifier of the private endpoint resource.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "privateLinkServiceConnectionState": {
                        "description": "An object that represents the approval state of the private link connection.",
                        "properties": {
                          "actionsRequired": {
                            "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                            "enum": [
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ActionsRequired"
                            }
                          },
                          "description": {
                            "description": "The reason for approval or rejection.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The private endpoint connection status.",
                            "enum": [
                              "Pending",
                              "Approved",
                              "Rejected",
                              "Disconnected"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PrivateEndpointServiceConnectionStatus"
                            }
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The current provisioning state.",
                        "enum": [
                          "Succeeded",
                          "Creating",
                          "Updating",
                          "Deleting",
                          "Failed",
                          "Disconnected"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PrivateEndpointConnectionProvisioningState"
                        }
                      }
                    }
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/privateEndpointConnections"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provisioning state of the vault.",
              "enum": [
                "Succeeded",
                "RegisteringDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VaultProvisioningState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/provisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "default": 90,
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/properties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata pertaining to creation and last modification of key vault resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of key vault resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created key vault resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of key vault resource last modification (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified key vault resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/systemData"
          },
          {
            "oldValue": null,
            "value": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags assigned to the key vault resource.",
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/tags"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource type of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/Vault/properties/type"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/Vault/x-ms-azure-resource"
          },
          {
            "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enableSoftDelete/default"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of private endpoint connections associated with the key vault.",
              "items": {
                "description": "Private endpoint connection item.",
                "properties": {
                  "etag": {
                    "description": "Modified whenever there is a change in the state of private endpoint connection.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of private endpoint connection.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "Properties of the private endpoint connection resource.",
                    "properties": {
                      "privateEndpoint": {
                        "description": "Private endpoint object properties.",
                        "properties": {
                          "id": {
                            "description": "Full identifier of the private endpoint resource.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "privateLinkServiceConnectionState": {
                        "description": "An object that represents the approval state of the private link connection.",
                        "properties": {
                          "actionsRequired": {
                            "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                            "enum": [
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ActionsRequired"
                            }
                          },
                          "description": {
                            "description": "The reason for approval or rejection.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The private endpoint connection status.",
                            "enum": [
                              "Pending",
                              "Approved",
                              "Rejected",
                              "Disconnected"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PrivateEndpointServiceConnectionStatus"
                            }
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The current provisioning state.",
                        "enum": [
                          "Succeeded",
                          "Creating",
                          "Updating",
                          "Deleting",
                          "Failed",
                          "Disconnected"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PrivateEndpointConnectionProvisioningState"
                        }
                      }
                    }
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/privateEndpointConnections"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provisioning state of the vault.",
              "enum": [
                "Succeeded",
                "RegisteringDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VaultProvisioningState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/provisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "default": 90,
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/VaultCreateOrUpdateParameters/properties/properties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": [
              {
                "description": "Key Vault resource",
                "properties": {
                  "id": {
                    "description": "The Azure Resource Manager resource ID for the key vault.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "location": {
                    "description": "The supported Azure location where the key vault should be created.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the key vault.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The tags that will be assigned to the key vault. ",
                    "type": "object"
                  },
                  "type": {
                    "description": "The resource type of the key vault.",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "required": [
                  "location"
                ],
                "x-ms-azure-resource": true
              }
            ],
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/VaultListResult/properties/value/items/allOf"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Fully qualified identifier of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/id"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure location of the key vault resource.",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/location"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/name"
          },
          {
            "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/accessPolicies/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enableSoftDelete/default"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of private endpoint connections associated with the key vault.",
              "items": {
                "description": "Private endpoint connection item.",
                "properties": {
                  "etag": {
                    "description": "Modified whenever there is a change in the state of private endpoint connection.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of private endpoint connection.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "Properties of the private endpoint connection resource.",
                    "properties": {
                      "privateEndpoint": {
                        "description": "Private endpoint object properties.",
                        "properties": {
                          "id": {
                            "description": "Full identifier of the private endpoint resource.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "privateLinkServiceConnectionState": {
                        "description": "An object that represents the approval state of the private link connection.",
                        "properties": {
                          "actionsRequired": {
                            "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                            "enum": [
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ActionsRequired"
                            }
                          },
                          "description": {
                            "description": "The reason for approval or rejection.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The private endpoint connection status.",
                            "enum": [
                              "Pending",
                              "Approved",
                              "Rejected",
                              "Disconnected"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PrivateEndpointServiceConnectionStatus"
                            }
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The current provisioning state.",
                        "enum": [
                          "Succeeded",
                          "Creating",
                          "Updating",
                          "Deleting",
                          "Failed",
                          "Disconnected"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PrivateEndpointConnectionProvisioningState"
                        }
                      }
                    }
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/privateEndpointConnections"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provisioning state of the vault.",
              "enum": [
                "Succeeded",
                "RegisteringDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VaultProvisioningState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/provisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "default": 90,
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/properties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Metadata pertaining to creation and last modification of key vault resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of key vault resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created key vault resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of key vault resource last modification (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified key vault resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "identityType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/systemData"
          },
          {
            "oldValue": null,
            "value": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags assigned to the key vault resource.",
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/tags"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource type of the key vault resource.",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/properties/type"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/VaultListResult/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchParameters/properties/properties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/VaultPatchProperties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/VaultPatchProperties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
            "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/accessPolicies/description"
          },
          {
            "oldValue": null,
            "value": {
              "default": false,
              "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/enableRbacAuthorization"
          },
          {
            "oldValue": null,
            "value": true,
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/enableSoftDelete/default"
          },
          {
            "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
            "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
            "op": "replace",
            "from": "",
            "path": "/VaultProperties/properties/enableSoftDelete/description"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of private endpoint connections associated with the key vault.",
              "items": {
                "description": "Private endpoint connection item.",
                "properties": {
                  "etag": {
                    "description": "Modified whenever there is a change in the state of private endpoint connection.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of private endpoint connection.",
                    "type": "string"
                  },
                  "properties": {
                    "description": "Properties of the private endpoint connection resource.",
                    "properties": {
                      "privateEndpoint": {
                        "description": "Private endpoint object properties.",
                        "properties": {
                          "id": {
                            "description": "Full identifier of the private endpoint resource.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "privateLinkServiceConnectionState": {
                        "description": "An object that represents the approval state of the private link connection.",
                        "properties": {
                          "actionsRequired": {
                            "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                            "enum": [
                              "None"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ActionsRequired"
                            }
                          },
                          "description": {
                            "description": "The reason for approval or rejection.",
                            "type": "string"
                          },
                          "status": {
                            "description": "The private endpoint connection status.",
                            "enum": [
                              "Pending",
                              "Approved",
                              "Rejected",
                              "Disconnected"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PrivateEndpointServiceConnectionStatus"
                            }
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The current provisioning state.",
                        "enum": [
                          "Succeeded",
                          "Creating",
                          "Updating",
                          "Deleting",
                          "Failed",
                          "Disconnected"
                        ],
                        "readOnly": true,
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PrivateEndpointConnectionProvisioningState"
                        }
                      }
                    }
                  }
                }
              },
              "readOnly": true,
              "type": "array"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/privateEndpointConnections"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Provisioning state of the vault.",
              "enum": [
                "Succeeded",
                "RegisteringDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "VaultProvisioningState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/provisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "default": 90,
              "description": "softDelete data retention days. It accepts >=7 and <=90.",
              "format": "int32",
              "type": "integer"
            },
            "op": "add",
            "from": "",
            "path": "/VaultProperties/properties/softDeleteRetentionInDays"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/VirtualNetworkRule/properties/ignoreMissingVnetServiceEndpoint"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "Name of the private endpoint connection associated with the key vault.",
              "in": "path",
              "name": "privateEndpointConnectionName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/PrivateEndpointConnectionName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the resource group that contains the key vault.",
              "in": "path",
              "name": "resourceGroupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ResourceGroupName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the key vault.",
              "in": "path",
              "name": "vaultName",
              "pattern": "^[a-zA-Z0-9-]{3,24}$",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/VaultName"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2018-02-14-preview",
        "to": "2020-04-01-preview"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateLinkResources"
      ],
      "modified": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Validate a vault name/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List deleted vaults in the specified subscription/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/deletedVaults?api-version=2018-02-14-preview&%24skiptoken=HY3RaoMwAEX%2fRcbeYhJrnRXKYNWOuqpME0sfNcYui0Yxade19N8ne7hcDlzOvVuKX81eKKmt4G4dooLQwgqsL2NGHUDYV6o68Z4rY1e388RtNvRQn2vNJjEaMSgNvcbneMUcsKg8BFwft8DndQ0w9hu2QOiFLRs4TsNFNHzSMBFsGvTQGvuD%2f5bVuTOw4R03vPkH%2fVqNAlzm5SxfOwh7ACOA8POTlvPjILlaU1ke8jImOc23JCppQVfZnna0DXc4ISc3vSVuRo5zJE6%2bj25C3vwk2v2kEV2mMn7PyOc1DbtNGkonnzuLym1G400uI5QRZj0efw%3d%3d",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/deletedVaults?api-version=2020-04-01-preview&%24skiptoken=HY3RaoMwAEX%2fRcbeYhJrnRXKYNWOuqpME0sfNcYui0Yxade19N8ne7hcDlzOvVuKX81eKKmt4G4dooLQwgqsL2NGHUDYV6o68Z4rY1e388RtNvRQn2vNJjEaMSgNvcbneMUcsKg8BFwft8DndQ0w9hu2QOiFLRs4TsNFNHzSMBFsGvTQGvuD%2f5bVuTOw4R03vPkH%2fVqNAlzm5SxfOwh7ACOA8POTlvPjILlaU1ke8jImOc23JCppQVfZnna0DXc4ISc3vSVuRo5zJE6%2bj25C3vwk2v2kEV2mMn7PyOc1DbtNGkonnzuLym1G400uI5QRZj0efw%3d%3d",
                        "op": "replace",
                        "from": "",
                        "path": "/List deleted vaults in the specified subscription/responses/200/body/nextLink"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/List deleted vaults in the specified subscription/responses/200/body/value/0/properties/purgeProtectionEnabled"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Purge protection status of the original vault.",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/purgeProtectionEnabled"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Retrieve a deleted vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/Retrieve a deleted vault/responses/200/body/properties/purgeProtectionEnabled"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Purge protection status of the original vault.",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/purgeProtectionEnabled"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Purge a deleted vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Purge a deleted vault/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Purge a deleted vault/responses/404"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "400",
                    "404",
                    "default"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified subscription/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resources?api-version=22018-02-14-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resources?api-version=22020-04-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified subscription/responses/200/body/nextLink"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/List vaults in the specified subscription/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/List vaults in the specified subscription/responses/200/body/value/0/systemData"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2018-02-14-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2020-04-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/nextLink"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/value/0/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/value/0/systemData"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Delete a vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Delete a vault/responses/204"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Delete a vault/responses/400"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "400",
                    "default",
                    "204"
                  ]
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Retrieve a vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Retrieve a vault/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Retrieve a vault/responses/200/body/systemData"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Update an existing vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [
                            {
                              "value": ""
                            }
                          ],
                          "virtualNetworkRules": [
                            {
                              "id": "",
                              "ignoreMissingVnetServiceEndpoint": false
                            }
                          ]
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/200/body/properties/networkAcls"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          {
                            "id": "",
                            "properties": {
                              "privateEndpoint": {
                                "id": ""
                              },
                              "privateLinkServiceConnectionState": {
                                "actionsRequired": "None",
                                "status": "Approved"
                              },
                              "provisioningState": "Succeeded"
                            }
                          }
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/200/body/properties/privateEndpointConnections"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T13:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/200/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T13:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/201/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Update an existing vault/responses/409"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "enableRbacAuthorization",
                                    "softDeleteRetentionInDays"
                                  ],
                                  "modified": {
                                    "enableSoftDelete": {
                                      "description": {
                                        "from": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                                        "to": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot be reverted to false."
                                      }
                                    },
                                    "networkAcls": {
                                      "properties": {
                                        "modified": {
                                          "virtualNetworkRules": {
                                            "items": {
                                              "properties": {
                                                "added": [
                                                  "ignoreMissingVnetServiceEndpoint"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "400",
                    "409",
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [
                            {
                              "value": ""
                            }
                          ],
                          "virtualNetworkRules": [
                            {
                              "id": "",
                              "ignoreMissingVnetServiceEndpoint": false
                            }
                          ]
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/networkAcls"
                      },
                      {
                        "oldValue": null,
                        "value": [
                          {
                            "id": "",
                            "properties": {
                              "privateEndpoint": {
                                "id": ""
                              },
                              "privateLinkServiceConnectionState": {
                                "actionsRequired": "None",
                                "status": "Approved"
                              },
                              "provisioningState": "Succeeded"
                            }
                          }
                        ],
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/privateEndpointConnections"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/200/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": "Succeeded",
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/201/body/properties/provisioningState"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/201/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create a new vault or update an existing vault/responses/409"
                      },
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Create or update a vault with network acls/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/200/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "createdAt": "2020-01-01T12:00:00.0000000Z",
                          "createdBy": "keyVaultUser1",
                          "createdByType": "User",
                          "lastModifiedAt": "2020-01-01T12:00:00.0000000Z",
                          "lastModifiedBy": "keyVaultUser2",
                          "lastModifiedByType": "User"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/201/body/systemData"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Create or update a vault with network acls/responses/409"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "parameters": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "provisioningState",
                                    "softDeleteRetentionInDays",
                                    "enableRbacAuthorization",
                                    "privateEndpointConnections"
                                  ],
                                  "modified": {
                                    "accessPolicies": {
                                      "description": {
                                        "from": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                                        "to": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required."
                                      }
                                    },
                                    "enableSoftDelete": {
                                      "description": {
                                        "from": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                                        "to": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false."
                                      },
                                      "default": {
                                        "from": null,
                                        "to": true
                                      }
                                    },
                                    "networkAcls": {
                                      "properties": {
                                        "modified": {
                                          "virtualNetworkRules": {
                                            "items": {
                                              "properties": {
                                                "added": [
                                                  "ignoreMissingVnetServiceEndpoint"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "added": [
                    "400",
                    "409",
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": false,
                                "description": "Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableRbacAuthorization"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/default"
                            },
                            {
                              "oldValue": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Property to specify whether NRP will ignore the check if parent subnet has serviceEndpoints configured.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/networkAcls/properties/virtualNetworkRules/items/properties/ignoreMissingVnetServiceEndpoint"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "etag": {
                                      "description": "Modified whenever there is a change in the state of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "Id of private endpoint connection.",
                                      "type": "string"
                                    },
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionsRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "enum": [
                                                "None"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ActionsRequired"
                                              }
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Provisioning state of the vault.",
                                "enum": [
                                  "Succeeded",
                                  "RegisteringDns"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VaultProvisioningState"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/provisioningState"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "default": 90,
                                "description": "softDelete data retention days. It accepts >=7 and <=90.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/softDeleteRetentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Metadata pertaining to creation and last modification of key vault resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of key vault resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created key vault resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of key vault resource last modification (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified key vault resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "identityType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}": {
          "operations": {
            "modified": {
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-02-14-preview",
                        "value": "2020-04-01-preview",
                        "op": "replace",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/responses/400"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/responses/404"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "body": {
                            "error": {
                              "code": "",
                              "message": ""
                            }
                          },
                          "headers": {}
                        },
                        "op": "add",
                        "from": "",
                        "path": "/Add an access policy, or update an access policy with new permissions/responses/409"
                      }
                    ]
                  }
                },
                "responses": {
                  "added": [
                    "404",
                    "409",
                    "default",
                    "400"
                  ]
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resources": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "deleted": [
                    "consumes"
                  ]
                },
                "responses": {
                  "added": [
                    "default"
                  ],
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "The Azure Resource Manager resource ID for the key vault.",
                              "value": "Fully qualified identifier of the key vault resource.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/id/description"
                            },
                            {
                              "oldValue": "The supported Azure location where the key vault should be created.",
                              "value": "Azure location of the key vault resource.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/location/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/location/readOnly"
                            },
                            {
                              "oldValue": "The name of the key vault.",
                              "value": "Name of the key vault resource.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/name/description"
                            },
                            {
                              "oldValue": "The tags that will be assigned to the key vault. ",
                              "value": "Tags assigned to the key vault resource.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/description"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags/readOnly"
                            },
                            {
                              "oldValue": "The resource type of the key vault.",
                              "value": "Resource type of the key vault resource.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/type/description"
                            },
                            {
                              "oldValue": [
                                "location"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/required"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Update": "FunctionDef(\n  name='Vaults_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_UpdateAccessPolicy": "FunctionDef(\n  name='Vaults_UpdateAccessPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationKind',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update access policies in a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessPolicies/'),\n          FormattedValue(\n            value=Name(id='operationKind', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationKind', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationKind')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_UpdateAccessPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update access policies in a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_ListBySubscription": "FunctionDef(\n  name='Vaults_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_ListDeleted": "FunctionDef(\n  name='Vaults_ListDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets information about the deleted vaults in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/deletedVaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets information about the deleted vaults in a subscription.'))])],\n  type_params=[])",
    "Vaults_GetDeleted": "FunctionDef(\n  name='Vaults_GetDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_GetDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_PurgeDeleted": "FunctionDef(\n  name='Vaults_PurgeDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/purge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_PurgeDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_CheckNameAvailability": "FunctionDef(\n  name='Vaults_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the vault name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the vault name is valid and is not already in use.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "Vaults_CreateOrUpdate": "FunctionDef(\n  name='Vaults_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Update": "FunctionDef(\n  name='Vaults_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_Delete": "FunctionDef(\n  name='Vaults_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_Get": "FunctionDef(\n  name='Vaults_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified Azure key vault.'))])],\n  type_params=[])",
    "Vaults_UpdateAccessPolicy": "FunctionDef(\n  name='Vaults_UpdateAccessPolicy',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='operationKind',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update access policies in a key vault in the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessPolicies/'),\n          FormattedValue(\n            value=Name(id='operationKind', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='operationKind', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: operationKind')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_UpdateAccessPolicy')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update access policies in a key vault in the specified subscription.'))])],\n  type_params=[])",
    "Vaults_ListByResourceGroup": "FunctionDef(\n  name='Vaults_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])],\n  type_params=[])",
    "Vaults_ListBySubscription": "FunctionDef(\n  name='Vaults_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_ListDeleted": "FunctionDef(\n  name='Vaults_ListDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets information about the deleted vaults in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/deletedVaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_ListDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets information about the deleted vaults in a subscription.'))])],\n  type_params=[])",
    "Vaults_GetDeleted": "FunctionDef(\n  name='Vaults_GetDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_GetDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_PurgeDeleted": "FunctionDef(\n  name='Vaults_PurgeDeleted',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deletedVaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/purge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_PurgeDeleted')),\n        keyword(\n          arg='description',\n          value=Constant(value='Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='The List operation gets information about the vaults associated with the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='The List operation gets information about the vaults associated with the subscription.'))])],\n  type_params=[])",
    "Vaults_CheckNameAvailability": "FunctionDef(\n  name='Vaults_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Checks that the vault name is valid and is not already in use.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Checks that the vault name is valid and is not already in use.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Get": "FunctionDef(\n  name='PrivateEndpointConnections_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Put": "FunctionDef(\n  name='PrivateEndpointConnections_Put',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Put')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateEndpointConnections_Delete": "FunctionDef(\n  name='PrivateEndpointConnections_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='privateEndpointConnectionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateEndpointConnections/'),\n          FormattedValue(\n            value=Name(id='privateEndpointConnectionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='privateEndpointConnectionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: privateEndpointConnectionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateEndpointConnections_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes the specified private endpoint connection associated with the key vault.'))])],\n  type_params=[])",
    "PrivateLinkResources_ListByVault": "FunctionDef(\n  name='PrivateLinkResources_ListByVault',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='vaultName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the private link resources supported for the key vault.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.KeyVault/vaults/'),\n          FormattedValue(\n            value=Name(id='vaultName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/privateLinkResources')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='vaultName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: vaultName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PrivateLinkResources_ListByVault')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the private link resources supported for the key vault.'))])],\n  type_params=[])"
  }
}