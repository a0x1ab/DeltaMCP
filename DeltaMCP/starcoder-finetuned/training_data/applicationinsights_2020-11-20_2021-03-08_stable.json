{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "Error definition.",
              "properties": {
                "code": {
                  "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                  "readOnly": true,
                  "type": "string"
                },
                "innererror": {
                  "description": "Internal error details.",
                  "items": {
                    "description": "Error details",
                    "properties": {
                      "trace": {
                        "description": "detailed error trace",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "type": "array"
                      }
                    }
                  },
                  "readOnly": true
                },
                "message": {
                  "description": "Description of the error.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ErrorDefinition"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Error details",
              "properties": {
                "trace": {
                  "description": "detailed error trace",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/InnerErrorTrace"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "etag": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource etag"
                    },
                    "id": {
                      "description": "Azure resource Id",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "identity": {
                      "description": "Customer Managed Identity",
                      "properties": {
                        "type": {
                          "description": "The identity type.",
                          "enum": [
                            "UserAssigned",
                            "None"
                          ],
                          "type": "string"
                        },
                        "userAssignedIdentities": {
                          "description": "Customer Managed Identity",
                          "properties": {
                            "principalId": {
                              "description": "The principal ID of resource identity.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "tenantId": {
                              "description": "The tenant ID of resource.",
                              "readOnly": true,
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An Application Insights private workbook definition.",
              "properties": {
                "kind": {
                  "description": "The kind of workbook. Choices are user and shared.",
                  "enum": [
                    "user",
                    "shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "kind"
                  }
                },
                "properties": {
                  "description": "Properties that contain a private workbook.",
                  "properties": {
                    "category": {
                      "description": "Workbook category, as defined by the user at creation time.",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "The user-defined name of the private workbook.",
                      "type": "string"
                    },
                    "serializedData": {
                      "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                      "type": "string",
                      "x-nullable": true
                    },
                    "sourceId": {
                      "description": "Optional resourceId for a source resource.",
                      "type": "string"
                    },
                    "storageUri": {
                      "description": "BYOS Storage Account URI",
                      "type": "string",
                      "x-nullable": true
                    },
                    "tags": {
                      "description": "A list of 0 or more tags that are associated with this private workbook definition",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timeModified": {
                      "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "userId": {
                      "description": "Unique user id of the specific user that owns this private workbook.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "version": {
                      "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "displayName",
                    "category",
                    "serializedData"
                  ]
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbook"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Error response.",
              "properties": {
                "error": {
                  "description": "Error definition.",
                  "properties": {
                    "code": {
                      "description": "Service specific error code which serves as the substatus for the HTTP error code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "innererror": {
                      "description": "Internal error details.",
                      "items": {
                        "description": "Error details",
                        "properties": {
                          "trace": {
                            "description": "detailed error trace",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                          }
                        }
                      },
                      "readOnly": true
                    },
                    "message": {
                      "description": "Description of the error.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Customer Managed Identity",
              "properties": {
                "type": {
                  "description": "The identity type.",
                  "enum": [
                    "UserAssigned",
                    "None"
                  ],
                  "type": "string"
                },
                "userAssignedIdentities": {
                  "description": "Customer Managed Identity",
                  "properties": {
                    "principalId": {
                      "description": "The principal ID of resource identity.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The tenant ID of resource.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookManagedIdentity"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Properties that contain a private workbook.",
              "properties": {
                "category": {
                  "description": "Workbook category, as defined by the user at creation time.",
                  "type": "string"
                },
                "displayName": {
                  "description": "The user-defined name of the private workbook.",
                  "type": "string"
                },
                "serializedData": {
                  "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                  "type": "string",
                  "x-nullable": true
                },
                "sourceId": {
                  "description": "Optional resourceId for a source resource.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "BYOS Storage Account URI",
                  "type": "string",
                  "x-nullable": true
                },
                "tags": {
                  "description": "A list of 0 or more tags that are associated with this private workbook definition",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "timeModified": {
                  "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                  "readOnly": true,
                  "type": "string"
                },
                "userId": {
                  "description": "Unique user id of the specific user that owns this private workbook.",
                  "readOnly": true,
                  "type": "string"
                },
                "version": {
                  "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                  "type": "string"
                }
              },
              "required": [
                "displayName",
                "category",
                "serializedData"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure resource object",
              "properties": {
                "etag": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource etag"
                },
                "id": {
                  "description": "Azure resource Id",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "identity": {
                  "description": "Customer Managed Identity",
                  "properties": {
                    "type": {
                      "description": "The identity type.",
                      "enum": [
                        "UserAssigned",
                        "None"
                      ],
                      "type": "string"
                    },
                    "userAssignedIdentities": {
                      "description": "Customer Managed Identity",
                      "properties": {
                        "principalId": {
                          "description": "The principal ID of resource identity.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "The tenant ID of resource.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags"
                },
                "type": {
                  "description": "Azure resource type",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Customer Managed Identity",
              "properties": {
                "principalId": {
                  "description": "The principal ID of resource identity.",
                  "readOnly": true,
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant ID of resource.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbookUserAssignedIdentities"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Workbook list result.",
              "properties": {
                "nextLink": {
                  "type": "string"
                },
                "value": {
                  "description": "An array of private workbooks.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "etag": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource etag"
                          },
                          "id": {
                            "description": "Azure resource Id",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "identity": {
                            "description": "Customer Managed Identity",
                            "properties": {
                              "type": {
                                "description": "The identity type.",
                                "enum": [
                                  "UserAssigned",
                                  "None"
                                ],
                                "type": "string"
                              },
                              "userAssignedIdentities": {
                                "description": "Customer Managed Identity",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An Application Insights private workbook definition.",
                    "properties": {
                      "kind": {
                        "description": "The kind of workbook. Choices are user and shared.",
                        "enum": [
                          "user",
                          "shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "kind"
                        }
                      },
                      "properties": {
                        "description": "Properties that contain a private workbook.",
                        "properties": {
                          "category": {
                            "description": "Workbook category, as defined by the user at creation time.",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "The user-defined name of the private workbook.",
                            "type": "string"
                          },
                          "serializedData": {
                            "description": "Configuration of this particular private workbook. Configuration data is a string containing valid JSON",
                            "type": "string",
                            "x-nullable": true
                          },
                          "sourceId": {
                            "description": "Optional resourceId for a source resource.",
                            "type": "string"
                          },
                          "storageUri": {
                            "description": "BYOS Storage Account URI",
                            "type": "string",
                            "x-nullable": true
                          },
                          "tags": {
                            "description": "A list of 0 or more tags that are associated with this private workbook definition",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "timeModified": {
                            "description": "Date and time in UTC of the last modification that was made to this private workbook definition.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userId": {
                            "description": "Unique user id of the specific user that owns this private workbook.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "version": {
                            "description": "This instance's version of the data model. This can change as new features are added that can be marked private workbook.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "displayName",
                          "category",
                          "serializedData"
                        ]
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MyWorkbooksListResult"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags",
                      "type": "object"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An Application Insights workbook template definition.",
              "properties": {
                "properties": {
                  "description": "Properties that contain a workbook template.",
                  "properties": {
                    "author": {
                      "description": "Information about the author of the workbook template.",
                      "type": "string"
                    },
                    "galleries": {
                      "description": "Workbook galleries supported by the template.",
                      "items": {
                        "description": "Gallery information for a workbook template.",
                        "properties": {
                          "category": {
                            "description": "Category for the gallery.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the workbook template in the gallery.",
                            "type": "string"
                          },
                          "order": {
                            "description": "Order of the template within the gallery.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "resourceType": {
                            "description": "Azure resource type supported by the gallery.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of workbook supported by the workbook template.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array",
                      "x-ms-identifiers": [
                        "name",
                        "type"
                      ]
                    },
                    "localized": {
                      "additionalProperties": {
                        "items": {
                          "description": "Localized template data and gallery information.",
                          "properties": {
                            "galleries": {
                              "description": "Workbook galleries supported by the template.",
                              "items": {
                                "description": "Gallery information for a workbook template.",
                                "properties": {
                                  "category": {
                                    "description": "Category for the gallery.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the workbook template in the gallery.",
                                    "type": "string"
                                  },
                                  "order": {
                                    "description": "Order of the template within the gallery.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "resourceType": {
                                    "description": "Azure resource type supported by the gallery.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type of workbook supported by the workbook template.",
                                    "type": "string"
                                  }
                                }
                              },
                              "type": "array",
                              "x-ms-identifiers": [
                                "name",
                                "type"
                              ]
                            },
                            "templateData": {
                              "description": "Valid JSON object containing workbook template payload.",
                              "type": "object"
                            }
                          }
                        },
                        "type": "array",
                        "x-ms-identifiers": []
                      },
                      "description": "Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.",
                      "type": "object"
                    },
                    "priority": {
                      "description": "Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "templateData": {
                      "description": "Valid JSON object containing workbook template payload.",
                      "type": "object"
                    }
                  },
                  "required": [
                    "templateData",
                    "galleries"
                  ]
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplate"
          },
          {
            "oldValue": {
              "description": "Error message that will indicate why the operation failed.",
              "properties": {
                "error": {
                  "description": "Error message body that will indicate why the operation failed.",
                  "properties": {
                    "code": {
                      "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.",
                      "type": "string"
                    },
                    "details": {
                      "description": "The list of invalid fields send in request, in case of validation error.",
                      "items": {
                        "description": "Error Field contract.",
                        "properties": {
                          "code": {
                            "description": "Property level error code.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Human-readable representation of property-level error.",
                            "type": "string"
                          },
                          "target": {
                            "description": "Property name.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array",
                      "x-ms-identifiers": [
                        "message",
                        "target"
                      ]
                    },
                    "message": {
                      "description": "Human-readable representation of the error.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateError"
          },
          {
            "oldValue": {
              "description": "Error message body that will indicate why the operation failed.",
              "properties": {
                "code": {
                  "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.",
                  "type": "string"
                },
                "details": {
                  "description": "The list of invalid fields send in request, in case of validation error.",
                  "items": {
                    "description": "Error Field contract.",
                    "properties": {
                      "code": {
                        "description": "Property level error code.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Human-readable representation of property-level error.",
                        "type": "string"
                      },
                      "target": {
                        "description": "Property name.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array",
                  "x-ms-identifiers": [
                    "message",
                    "target"
                  ]
                },
                "message": {
                  "description": "Human-readable representation of the error.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateErrorBody"
          },
          {
            "oldValue": {
              "description": "Error Field contract.",
              "properties": {
                "code": {
                  "description": "Property level error code.",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable representation of property-level error.",
                  "type": "string"
                },
                "target": {
                  "description": "Property name.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateErrorFieldContract"
          },
          {
            "oldValue": {
              "description": "Gallery information for a workbook template.",
              "properties": {
                "category": {
                  "description": "Category for the gallery.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the workbook template in the gallery.",
                  "type": "string"
                },
                "order": {
                  "description": "Order of the template within the gallery.",
                  "format": "int32",
                  "type": "integer"
                },
                "resourceType": {
                  "description": "Azure resource type supported by the gallery.",
                  "type": "string"
                },
                "type": {
                  "description": "Type of workbook supported by the workbook template.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateGallery"
          },
          {
            "oldValue": {
              "description": "Localized template data and gallery information.",
              "properties": {
                "galleries": {
                  "description": "Workbook galleries supported by the template.",
                  "items": {
                    "description": "Gallery information for a workbook template.",
                    "properties": {
                      "category": {
                        "description": "Category for the gallery.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the workbook template in the gallery.",
                        "type": "string"
                      },
                      "order": {
                        "description": "Order of the template within the gallery.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "resourceType": {
                        "description": "Azure resource type supported by the gallery.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of workbook supported by the workbook template.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array",
                  "x-ms-identifiers": [
                    "name",
                    "type"
                  ]
                },
                "templateData": {
                  "description": "Valid JSON object containing workbook template payload.",
                  "type": "object"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateLocalizedGallery"
          },
          {
            "oldValue": {
              "description": "Properties that contain a workbook template.",
              "properties": {
                "author": {
                  "description": "Information about the author of the workbook template.",
                  "type": "string"
                },
                "galleries": {
                  "description": "Workbook galleries supported by the template.",
                  "items": {
                    "description": "Gallery information for a workbook template.",
                    "properties": {
                      "category": {
                        "description": "Category for the gallery.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the workbook template in the gallery.",
                        "type": "string"
                      },
                      "order": {
                        "description": "Order of the template within the gallery.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "resourceType": {
                        "description": "Azure resource type supported by the gallery.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of workbook supported by the workbook template.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array",
                  "x-ms-identifiers": [
                    "name",
                    "type"
                  ]
                },
                "localized": {
                  "additionalProperties": {
                    "items": {
                      "description": "Localized template data and gallery information.",
                      "properties": {
                        "galleries": {
                          "description": "Workbook galleries supported by the template.",
                          "items": {
                            "description": "Gallery information for a workbook template.",
                            "properties": {
                              "category": {
                                "description": "Category for the gallery.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the workbook template in the gallery.",
                                "type": "string"
                              },
                              "order": {
                                "description": "Order of the template within the gallery.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "resourceType": {
                                "description": "Azure resource type supported by the gallery.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of workbook supported by the workbook template.",
                                "type": "string"
                              }
                            }
                          },
                          "type": "array",
                          "x-ms-identifiers": [
                            "name",
                            "type"
                          ]
                        },
                        "templateData": {
                          "description": "Valid JSON object containing workbook template payload.",
                          "type": "object"
                        }
                      }
                    },
                    "type": "array",
                    "x-ms-identifiers": []
                  },
                  "description": "Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.",
                  "type": "object"
                },
                "priority": {
                  "description": "Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.",
                  "format": "int32",
                  "type": "integer"
                },
                "templateData": {
                  "description": "Valid JSON object containing workbook template payload.",
                  "type": "object"
                }
              },
              "required": [
                "templateData",
                "galleries"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateProperties"
          },
          {
            "oldValue": {
              "description": "An azure resource object",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags",
                  "type": "object"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateResource"
          },
          {
            "oldValue": {
              "description": "The parameters that can be provided when updating workbook template.",
              "properties": {
                "properties": {
                  "description": "Properties that contain a workbook template.",
                  "properties": {
                    "author": {
                      "description": "Information about the author of the workbook template.",
                      "type": "string"
                    },
                    "galleries": {
                      "description": "Workbook galleries supported by the template.",
                      "items": {
                        "description": "Gallery information for a workbook template.",
                        "properties": {
                          "category": {
                            "description": "Category for the gallery.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the workbook template in the gallery.",
                            "type": "string"
                          },
                          "order": {
                            "description": "Order of the template within the gallery.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "resourceType": {
                            "description": "Azure resource type supported by the gallery.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of workbook supported by the workbook template.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array",
                      "x-ms-identifiers": [
                        "name",
                        "type"
                      ]
                    },
                    "localized": {
                      "additionalProperties": {
                        "items": {
                          "description": "Localized template data and gallery information.",
                          "properties": {
                            "galleries": {
                              "description": "Workbook galleries supported by the template.",
                              "items": {
                                "description": "Gallery information for a workbook template.",
                                "properties": {
                                  "category": {
                                    "description": "Category for the gallery.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the workbook template in the gallery.",
                                    "type": "string"
                                  },
                                  "order": {
                                    "description": "Order of the template within the gallery.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "resourceType": {
                                    "description": "Azure resource type supported by the gallery.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type of workbook supported by the workbook template.",
                                    "type": "string"
                                  }
                                }
                              },
                              "type": "array",
                              "x-ms-identifiers": [
                                "name",
                                "type"
                              ]
                            },
                            "templateData": {
                              "description": "Valid JSON object containing workbook template payload.",
                              "type": "object"
                            }
                          }
                        },
                        "type": "array",
                        "x-ms-identifiers": []
                      },
                      "description": "Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.",
                      "type": "object"
                    },
                    "priority": {
                      "description": "Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "templateData": {
                      "description": "Valid JSON object containing workbook template payload.",
                      "type": "object"
                    }
                  },
                  "required": [
                    "templateData",
                    "galleries"
                  ]
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags",
                  "type": "object"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateUpdateParameters"
          },
          {
            "oldValue": {
              "description": "WorkbookTemplate list result.",
              "properties": {
                "value": {
                  "description": "An array of workbook templates.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags",
                            "type": "object"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An Application Insights workbook template definition.",
                    "properties": {
                      "properties": {
                        "description": "Properties that contain a workbook template.",
                        "properties": {
                          "author": {
                            "description": "Information about the author of the workbook template.",
                            "type": "string"
                          },
                          "galleries": {
                            "description": "Workbook galleries supported by the template.",
                            "items": {
                              "description": "Gallery information for a workbook template.",
                              "properties": {
                                "category": {
                                  "description": "Category for the gallery.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the workbook template in the gallery.",
                                  "type": "string"
                                },
                                "order": {
                                  "description": "Order of the template within the gallery.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "resourceType": {
                                  "description": "Azure resource type supported by the gallery.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type of workbook supported by the workbook template.",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array",
                            "x-ms-identifiers": [
                              "name",
                              "type"
                            ]
                          },
                          "localized": {
                            "additionalProperties": {
                              "items": {
                                "description": "Localized template data and gallery information.",
                                "properties": {
                                  "galleries": {
                                    "description": "Workbook galleries supported by the template.",
                                    "items": {
                                      "description": "Gallery information for a workbook template.",
                                      "properties": {
                                        "category": {
                                          "description": "Category for the gallery.",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Name of the workbook template in the gallery.",
                                          "type": "string"
                                        },
                                        "order": {
                                          "description": "Order of the template within the gallery.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "resourceType": {
                                          "description": "Azure resource type supported by the gallery.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "Type of workbook supported by the workbook template.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "type": "array",
                                    "x-ms-identifiers": [
                                      "name",
                                      "type"
                                    ]
                                  },
                                  "templateData": {
                                    "description": "Valid JSON object containing workbook template payload.",
                                    "type": "object"
                                  }
                                }
                              },
                              "type": "array",
                              "x-ms-identifiers": []
                            },
                            "description": "Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.",
                            "type": "object"
                          },
                          "priority": {
                            "description": "Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "templateData": {
                            "description": "Valid JSON object containing workbook template payload.",
                            "type": "object"
                          }
                        },
                        "required": [
                          "templateData",
                          "galleries"
                        ]
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplatesListResult"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks.",
              "in": "query",
              "name": "canFetchContent",
              "required": false,
              "type": "boolean",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/CanFetchWorkbookContentParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Category of workbook to return.",
              "enum": [
                "workbook",
                "TSG",
                "performance",
                "retention"
              ],
              "in": "query",
              "name": "category",
              "required": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "CategoryType"
              },
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/CategoryParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure Resource Id that will fetch all linked workbooks.",
              "in": "query",
              "name": "sourceId",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SourceIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "collectionFormat": "csv",
              "description": "Tags presents on each workbook returned.",
              "in": "query",
              "items": {
                "type": "string"
              },
              "name": "tags",
              "required": false,
              "type": "array",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/TagsParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The name of the Application Insights component resource.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/WorkbookResourceNameParameter"
          },
          {
            "oldValue": {
              "description": "The name of the Application Insights component resource.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkbookTemplateResourceNameParameter"
          }
        ]
      }
    },
    "info": {
      "description": {
        "from": "Azure Application Insights workbook template type.",
        "to": "Azure Application Insights private workbook type."
      },
      "version": {
        "from": "2020-11-20",
        "to": "2021-03-08"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/myWorkbooks"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates/{resourceName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "MyWorkbooks_ListByResourceGroup": "FunctionDef(\n  name='MyWorkbooks_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='category',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='tags',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='canFetchContent',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get all private workbooks defined within a specified resource group and category.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='category', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='category'),\n              ctx=Store())],\n          value=Name(id='category', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='tags', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='tags'),\n              ctx=Store())],\n          value=Name(id='tags', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='canFetchContent', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='canFetchContent'),\n              ctx=Store())],\n          value=Name(id='canFetchContent', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all private workbooks defined within a specified resource group and category.'))])],\n  type_params=[])",
    "MyWorkbooks_ListBySubscription": "FunctionDef(\n  name='MyWorkbooks_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='category',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='tags',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='canFetchContent',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get all private workbooks defined within a specified subscription and category.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='category', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='category'),\n              ctx=Store())],\n          value=Name(id='category', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='tags', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='tags'),\n              ctx=Store())],\n          value=Name(id='tags', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='canFetchContent', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='canFetchContent'),\n              ctx=Store())],\n          value=Name(id='canFetchContent', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all private workbooks defined within a specified subscription and category.'))])],\n  type_params=[])",
    "MyWorkbooks_Get": "FunctionDef(\n  name='MyWorkbooks_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a single private workbook by its resourceName.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a single private workbook by its resourceName.'))])],\n  type_params=[])",
    "MyWorkbooks_Delete": "FunctionDef(\n  name='MyWorkbooks_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a private workbook.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a private workbook.'))])],\n  type_params=[])",
    "MyWorkbooks_CreateOrUpdate": "FunctionDef(\n  name='MyWorkbooks_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create a new private workbook.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a new private workbook.'))])],\n  type_params=[])",
    "MyWorkbooks_Update": "FunctionDef(\n  name='MyWorkbooks_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='sourceId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates a private workbook that has already been added.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/myWorkbooks/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='sourceId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='sourceId'),\n              ctx=Store())],\n          value=Name(id='sourceId', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='MyWorkbooks_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates a private workbook that has already been added.'))])],\n  type_params=[])"
  }
}